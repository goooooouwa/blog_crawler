<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Managed Code Analysis Tools</title>
<link>https://blog.codinghorror.com/managed-code-analysis-tools/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Navigating a new codebase can feel like like landing on an alien planet. That's where <a href="http://en.wikipedia.org/wiki/Static_code_analysis">static code analysis</a> tools come in handy; they're akin to <a href="http://en.wikipedia.org/wiki/Tricorder">software tricorders</a>. They provide a general snapshot of unfamiliar code: Is it normal? Is it unusual? Is it dangerous?*
</p>
<p>
<img alt="Classic Star Trek Tricorder" border="0" class="at-xid-6a0120a85dcdae970b0128776fb81e970c" height="282" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0128776fb81e970c-pi.jpg" width="300">
</p>
<p>
There's an element of "correctness" associated with static code analysis, but I think this should be de-emphasized. <b>The last thing developers want is a Code Nazi peering over their shoulder.</b> I prefer to think of these tools as software tricorders, collecting a bunch of recommendations and metrics about our code. What we choose to do with that data is up to us.
</p>
<p>
The most famous static code analysis tool for .NET is, of course, <a href="http://www.gotdotnet.com/team/fxcop/">Microsoft's FxCop</a>. If you haven't tried FxCop in a while, I recommend running the latest version across one of your compiled assemblies. You'd be surprised how helpful it is, particularly for identifying unused variables and functions. You may also be surprised how annoying some of the rules are; that's why the entire list of rules can be selectively enabled or disabled and saved as profiles. You can even write your own custom FxCop rules-- how about <a href="http://msdn.microsoft.com/msdnmag/issues/04/06/Bugslayer/default.aspx">a custom rule that requires XML documentation for each assembly</a>, as illustrated in this June 2004 MSDN article?
</p>
<p>
FxCop is currently a standalone .exe in an informal GotDotNet workspace, but in Visual Studio 2005, it's an integrated part of the build process. You can enable output from the console version of FxCop by ticking the checkbox on the Code Analysis tab of the project properties. Any FxCop warnings or errors then show up as you would expect in the standard Task List tab.**
</p>
<p>
There's at least one commercial tool that also does .NET static code analysis, namely <a href="http://www.fmsinc.com/dotnet/analyzer/index.asp">FMS Total .NET Analyzer</a>. I tried the evaluation version which is limited to identifying only one issue for each category. It's nice enough, but it also seems to overlap quite a bit with FxCop. And it's pricey.
</p>
<p>
In addition to those well-known tools, <a href="http://codebetter.com/blogs/raymond.lewallen/archive/2005/06/13/64539.aspx">Raymond Lewallen</a> and <a href="http://www.robincurry.org/blog/CodeMetricsAndCodeMetricsTools.aspx">Robin Curry</a> found some additional lesser known managed code analysis tools:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.testingreflections.com/node/view/1158?PHPSESSID=85bbd7bc0f621cbfa9f5e8612a75b4b5">Reflector.CodeMetrics</a> (an add-in for the essential <a href="http://www.aisto.com/roeder/dotnet/">Reflector</a>)
</li>
<li>
<a href="http://www.anticipatingminds.com/Content/products/devMetrics/devMetrics.aspx">DevMetrics</a> ($)
</li>
<li>
<a href="http://smacchia.chez.tiscali.fr/NDepend.html">NDepend</a>
</li>
<li>
<a href="http://www.knowdotnet.com/articles/complexityanalyzer.html">Complexity Analyzer</a> ($)
</li>
<li>
<a href="http://www.serviceframework.com/jwss/utility,ccmetrics,utility.aspx">CCMetrics</a>
</li>
<li>
<a href="https://sourceforge.net/projects/crplugin/">CRPlugin</a> (plugin for <a href="http://www.devexpress.com/Downloads/NET/DXCore/">DxCore</a>)
</li>
<li>
<a href="http://www.campwoodsw.com/sm20.html">Source Monitor</a>
</li>
<li>
<a href="http://www.1bot.com/">vil</a>
</li>
</ul>
<p>
I've heard good things about NDepends in particular, but I haven't had a chance to check it out yet.
</p>
<p>
* Don't bother if you're wearing a red shirt. In classic Trek fashion, you may not be around long enough to care.<br>
** at least in VS.NET 2005 beta 2, you can.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-09-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/managed-code-analysis-tools/</guid>
</item>
</channel>
</rss>
