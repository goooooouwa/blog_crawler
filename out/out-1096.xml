<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>What if it was infinitely fast?</title>
<link>https://blog.codinghorror.com/what-if-it-was-infinitely-fast/</link>
<content>
                <!--kg-card-begin: markdown--><p>
When it comes to performance, there's always a bottleneck. The question is, which bottleneck? That's why one of the more interesting <a href="http://www.codinghorror.com/blog/archives/000339.html">back of the envelope calculations</a> is to ask, "what if it was infinitely fast?"
</p>
<p>
One way to make something infinitely fast is to make it a no-op. Instead of doing work, it does nothing. This is also known as "null driver" in hardware circles. It shows how fast your hardware could be given the limits of the underlying operating system infrastructure. Standard 2D graphics operations in Windows have been equal to null driver performance <a href="http://www.azillionmonkeys.com/qed/accelerator.html">since about 1999</a>:
</p>
<p>
</p>
<blockquote>
Modern graphics companies concerned about 2D performance take something called a NULL driver -- a graphics driver than accepts the low level rendering commands but does no rendering work whatsoever -- and see how close they can come to its performance. Companies like Matrox are basically almost at the NULL driver performance in all situations.
</blockquote>
This probably says more about Windows overhead than it does about actual 2D performance.
<p>
Gary Tarolli was the CTO of <a href="http://en.wikipedia.org/wiki/3Dfx">3dfx Interactive</a>. Their Voodoo series of add-on video cards pioneered real time 3D graphics on the PC. Gary had <a href="http://groups-beta.google.com/group/3dfx.game.discussion/browse_thread/thread/5dedbae62cf4339f/30bc4873800d89cf?lnk=st&amp;rnum=3&amp;hl=en#30bc4873800d89cf">this to say</a> about infinitely fast 3D hardware in 1998:
</p>
<p>
</p>
<blockquote>
I just want to put in a few cents here.  I know Voodoo2 relieves the CPU of triangle setup processing, however, that is all it relieves the CPU of.  If a game is taking up 80% of the CPU time, which is not that uncommon, <b>then even if we replaced our hardware with INFINITELY fast hardware, you only get a small increase in performance</b> (1.25x).  Voodoo2 isn't infintely fast, so the results are even smaller.  Each game takes up a different amount of the CPU, so you will see different results for different games.
</blockquote>
<p>
It's hard to imagine the CTO of a hardware startup actually answering questions about the product he designed in the newsgroups. Only in 1998, I guess.
</p>
<p>
AnandTech's review of the first affordable <a href="http://www.anandtech.com/storage/showdoc.aspx?i=2480&amp;p=1">solid state hard drive</a> offers a tantalizing glimpse of infinitely fast storage devices-- and some new bottlenecks we couldn't see before:
</p>
<p>
</p>
<table>
<tr>
<td>Benchmark</td>
<td align="right">Times faster
</td>
</tr>
<tr>
<td>Business Winstone</td>
<td align="right">1.02x
</td>
</tr>
<tr>
<td>Content Creation Winstone</td>
<td align="right">1.03x
</td>
</tr>
<tr>
<td>Windows XP Boot Time</td>
<td align="right">1.5x
</td>
</tr>
<tr>
<td>Battlefield 2 level load time</td>
<td align="right">1.3x
</td>
</tr>
<tr>
<td>Photoshop CS load time</td>
<td align="right">1.7x
</td>
</tr>
<tr>
<td>MS Outlook 2003 load time</td>
<td align="right">1.0x
</td>
</tr>
<tr>
<td>693mb file copy</td>
<td align="right">3.8x
</td>
</tr>
</table>
<p>
It's an interesting experiment. Kudos to Gigabyte for making a 4gb solid state hard drive affordable. All you need is $70 for the i-RAM device itself, and 4gb of PC3200 DDR RAM (at current pricing,  $90 x 4). Sure, "under $500" isn't exactly cheap, but relative to other solid state hard drives, it's an incredible bargain.
</p>
<p>
Unfortunately, Having an infinitely fast solid state hard drive doesn't do a whole lot to improve raw performance. It's probably best used as a device to reveal where all the <i>other</i> performance bottlenecks are.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-07-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/what-if-it-was-infinitely-fast/</guid>
</item>
</channel>
</rss>
