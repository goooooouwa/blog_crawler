<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>I Heart Strings</title>
<link>https://blog.codinghorror.com/i-heart-strings/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://blogs.msdn.com/BradA/">Brad Abrams</a> was a founding member of the .NET common language runtime team way back in 1998. He's also the co-author of <a href="http://www.amazon.com/exec/obidos/search-handle-url/field-keywords=brad%20abrams">many essential books on .NET</a>, including <a href="http://www.amazon.com/exec/obidos/ASIN/0321154894/codihorr-20">both</a> <a href="http://www.amazon.com/exec/obidos/ASIN/0321194454/codihorr-20">volumes</a> of the .NET Framework Standard Library Annotated Reference. I was at a presentation Brad gave to the Triangle .NET User's Group early in 2005. During the Q&amp;A period, an audience member (and a friend of mine) asked Brad this question:
</p>
<p>
<i>What's your favorite class in the .NET 1.1 common langauge runtime?</i>
</p>
<p>
His answer? <b>String.</b>
</p>
<p>
And that's from a guy who will forget more about the .NET runtime than I will ever know about it. I still have my <a href="http://www.amazon.com/exec/obidos/ASIN/0321288661/codihorr-20">.NET class library reference poster</a>, autographed by Brad right next to the String class.
</p>
<p>
I've always felt that <b>string is the most noble of datatypes</b>. Computers run on ones and zeros, sure, but people don't. They use words, sentences, and paragraphs to communicate. People communicate with strings. The meteoric rise of HTTP, HTML, REST, serialization, and other heavily string-oriented, human-readable techniques vindicates -- at least in my mind -- my lifelong preference for the humble string.
</p>
<p>
Or, you could argue that we now have so much computing power and bandwidth available that passing friendly strings around in lieu of opaque binary data is actually practical. But don't be a killjoy.
</p>
<p>
Guess what my favorite new .NET 2.0 feature is. Go ahead. Guess! Generics? Nope. Partial classes? Nope again. It's the String.Contains method. And I'm awfully fond of String.IsNullOrEmpty, too.
</p>
<p>
What I love most about strings is that they have a million and one uses. They're the swiss army knife of data types. <a href="http://www.codinghorror.com/blog/archives/000245.html">Regular expressions</a>, for example, are themselves strings, as is SQL.*
</p>
<p>
</p>
<pre>
Regex.IsMatch(s, "&lt;[a-z]|&lt;!|&amp;#|Won[a-z]*s*=|(scripts*:)|expression(")
</pre>
<p>
One of the classic uses for strings, going <a href="http://www.phim.unibe.ch/comp_doc/c_manual/C/FUNCTIONS/format.html">way back to the C days</a>, is to specify output formats. Here's an example of basic string formatting in .NET.
</p>
<p>
</p>
<pre>
"Date is " + DateTime.Now.ToString("MM/dd hh:mm:ss");
</pre>
<p>
You can explicitly use the String.Format method to format, well, almost anything, including our date:
</p>
<p>
</p>
<pre>
String.Format("Date is {0:MM/dd hh:mm:ss}", DateTime.Now);
</pre>
<p>
As <a href="http://codebetter.com/blogs/karlseguin/archive/2006/04/10/142602.aspx">Karl Seguin</a> points out, String.Format is a superior alternative to naive string concatenation:
</p>
<p>
</p>
<blockquote>
Surely, I can't be the only one that has a hard time writing and maintaining code like:
<p>
</p>
<pre>
d.SelectSingleNode("/graph/data[name='" + name + "']");
</pre>
<p>
When I do write code like the above, I almost always forget my closing quote or square bracket! And as things get more complicated, it becomes a flat out nightmare.
</p>
<p>
The solution is to make heavy use of string.Format. You'll never EVER see me use plus to concatenate something to a string, and there's no reason you should either. To write the above code better, try:
</p>
<p>
</p>
<pre>
d.SelectSingleNode(string.Format("/graph/data[name='{0}']", name));
</pre>
</blockquote>
<p>
It's a win-win scenario: you get more power and more protection. For a complete rundown of the zillion possible String.Format specifiers, try these links:
</p>
<p>
</p>
<ul>
<li>SteveX Compiled - <a href="http://blog.stevex.net/index.php/string-formatting-in-csharp/">String Formatting in C#</a>
</li>
<li>Kathy Kam - <a href="http://blogs.msdn.com/kathykam/archive/2006/03/29/564426.aspx">.NET Format String 101</a>
</li>
<li>Kit George - <a href="http://msdn.microsoft.com/netframework/programming/bcl/faq/StringFormattingFAQ.aspx">String Formatting FAQ</a>
</li>
<li>MSDN - <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconFormattingTypes.asp">Formatting Types</a>
</li>
</ul>
<p>
String class, <i>you complete me</i>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-07-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-heart-strings/</guid>
</item>
</channel>
</rss>
