<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>If an Exception happens in Form.Paint, does anyone catch it?</title>
<link>https://blog.codinghorror.com/if-an-exception-happens-in-formpaint-does-anyone-catch-it/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In a previous post, I mentioned <a href="http://www.codinghorror.com/blog/archives/000159.html">the old VB6 trick of deferring form work until the Form.Paint event</a> in order to provide a (seemingly) responsive interface to the user. Well, in the .NET world there's <b>one strange side effect when you do this</b>. Let's say you had this code, in a solution where the startup object is <b>Sub Main</b>:
</p>
<p>
</p>
<pre language="vb" name="code">
Public Class Form1
Inherits System.Windows.Forms.Form
Private Sub Form1_Load(ByVal sender As System.Object, _
ByVal e As System.EventArgs) Handles MyBase.Load
Throw New Exception("This is a Form_Load exception")
End Sub
Private Sub Form1_Paint(ByVal sender As Object, _
ByVal e As System.Windows.Forms.PaintEventArgs) _
Handles MyBase.Paint
Throw New Exception("This is a Form_Paint exception")
End Sub
End Class
Public Class Class1
Public Shared Sub Main()
Application.Run(New Form1)
End Sub
End Class
</pre>
<p>
The Form.Load exception happens as expected. The Form.Paint exception, on the other hand.. looks like this:
</p>
<p>
<img alt="Form Paint Exception" class="at-xid-6a0120a85dcdae970b0128776fb866970c" height="292" src="https://blog.codinghorror.com/content/images/uploads/2005/01/6a0120a85dcdae970b0128776fb866970c-pi.gif" width="475">
</p>
<p>
<b>The breakpoint the debugger puts us on is nowhere near the offending line of code.</b> As I'm sure you can imagine, this makes debugging.. interesting.  Oddly enough, if you look at the debug output for this exception, the actual line of the exception <i>is</i> present there:
</p>
<p>
</p>
<pre>
Unhandled Exception: System.Exception: This is a Form_Paint exception
<span style="color:red;">at WindowsApplication1.Form1.Form1_Paint(Object sender, PaintEventArgs e) in WindowsApplication1Form1.vb:line 50</span>
at System.Windows.Forms.Control.OnPaint(PaintEventArgs e)
at System.Windows.Forms.Form.OnPaint(PaintEventArgs e)
at System.Windows.Forms.Control.<b>PaintWithErrorHandling</b>(PaintEventArgs e, Int16 layer, Boolean disposeEventArgs)
at System.Windows.Forms.Control.WmPaint(Message&amp; m)
at System.Windows.Forms.Control.WndProc(Message&amp; m)
at System.Windows.Forms.ScrollableControl.WndProc(Message&amp; m)
at System.Windows.Forms.ContainerControl.WndProc(Message&amp; m)
at System.Windows.Forms.Form.WndProc(Message&amp; m)
at System.Windows.Forms.ControlNativeWindow.OnMessage(Message&amp; m)
at System.Windows.Forms.ControlNativeWindow.WndProc(Message&amp; m)
at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparThe program '[2856] WindowsApplication1.exe' has exited with code 0 (0x0).
am, IntPtr lparam)
at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp; msg)
at System.Windows.Forms.ComponentManager.System.Windows.Forms.UnsafeNativeMethods+IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
at System.Windows.Forms.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
at System.Windows.Forms.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
at System.Windows.Forms.Application.Run(Form mainForm)
<span style="color:red;">at WindowsApplication1.Class1.Main() in WindowsApplication1Class1.vb:line 4</span>
</pre>
<p>
And it gets even weirder! You can make the debugger break on the actual line in Form.Paint() by messing around with the Debug, Exceptions dialog in VS.NET. Turn on <b>"When the exception is thrown, break into the debugger" for all CLR Exceptions</b>.  Now you'll break on <i>every</i> exception-- even the handled ones, and even exceptions inside third party binaries-- which can be annoying. But at least it gets you to the actual line of code where the exception was raised:
</p>
<p>
<img alt="Form Paint Exception" class="at-xid-6a0120a85dcdae970b0128776fb871970c" height="267" src="https://blog.codinghorror.com/content/images/uploads/2005/01/6a0120a85dcdae970b0128776fb871970c-pi.gif" width="483">
</p>
<p>
I don't pretend to understand the arcane win32 api rules that cause exceptions to be somehow absorbed in Form.Paint() and passed back to the main application thread. All I know is, it's incredibly annoying. When I originally researched this problem last year, I dug up this <a href="http://www.mail-archive.com/advanced-dotnet@discuss.develop.com/msg01781.html">rather unsatisfying answer</a>:
</p>
<p>
</p>
<blockquote>
<i>
The exception is caught in <b>PaintWithErrorHandling</b> and then re-thrown again, all the way back to the program entry point because nowhere else along the callstack to your paint function is there an exception handler.
</i><p>
My two suggestions are:
1) put an exception handler in your paint function.
2) Have the debugger break on exceptions that aren't known to be owned by you when they are thrown.
</p>
</blockquote>
<p>
Anyway, <b>be careful when debugging forms that do work in the paint event</b>. I have yet to see any reasonable explanation for this behavior. If any <a href="http://www.sellsbrothers.com/">Windows Forms Coding Heroes</a> want to step up and justify this in the comments, be my guest.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/if-an-exception-happens-in-formpaint-does-anyone-catch-it/</guid>
</item>
</channel>
</rss>
