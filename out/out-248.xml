<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The World's Largest MMORPG: You're Playing it Right Now</title>
<link>https://blog.codinghorror.com/the-worlds-largest-mmorpg-youre-playing-it-right-now/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I was struck by the conclusion of Andy Oram's <a href="http://radar.oreilly.com/archives/2008/02/developing-an-i.html">thoughtful piece on the next generation of online forums</a>.
</p>
<p>
</p>
<blockquote>
People who want to learn more about computer technology and solve problems they encounter on their systems currently have a wealth of forums to turn to: mailing lists and newsgroups, official and unofficial documentation (which may be distributed on the Web, on their systems, or in printed form) and the more collaborative media of IRC channels, wikis, and virtual worlds.
<p>
Why tamper with this set of resources? Because they are not as easy to find or to use as they should be. Each medium was invented for purposes other than the specific task of educating computer users, and have never been tailored to the tasks of generating and searching for information about computer systems. If relevant material was served through more specialized and helpful tools, people might create better information and it might be used more.
</p>
<p>
[..]
</p>
<p>
Done well, this system would make it <b>fun and rewarding to contribute information to user communities</b>.
</p>
</blockquote>
<p>
The key word here is "fun".
</p>
<p>
When you interact with other people online ..
</p>
<p>
</p>
<ul>
<li>sending an email to a mailing list
</li>
<li>posting on a discussion forum
</li>
<li>chatting on IRC
</li>
<li>revising a Wiki entry
</li>
<li>entering a blog comment
</li>
</ul>
<p>
.. like it or not, you're participating in <b>the world's largest MMORPG</b>. Lurking is always free. Those that choose to go beyond lurking, to add some tiny bit of content to the web, do it because they find it enjoyable. On some level, <i>they're having fun</i>. If you want to a cultivate a community of participants instead of passive, zombie-like TV viewers who contribute nothing, <b>you should be designing to maximize this fun</b>. As Andy discovered, not designing game-like aspects into community websites is the bigger long term mistake.
</p>
<p>
In the fantastic presentation <a href="http://lostgarden.com/2008/10/princess-rescuing-application-slides.html">Mixing Games and Applications</a>, Dan C.  explores the example of Mario Brothers, which we know as a game. But what if it was a traditional desktop application: <b>Rescue Princess Enterprise 2008</b>?
</p>
<p>
<a href="http://www.codinghorror.com/blog/images/mario-princess-rescue.png"><img alt="Rescue the Princess as a desktop app" border="0" class="at-xid-6a0120a85dcdae970b0120a86e0f24970b" height="286" src="https://blog.codinghorror.com/content/images/uploads/2009/03/6a0120a85dcdae970b0120a86e0f24970b-pi.png" width="512"></a>
</p>
<p>
Or a web 2.0 website, <b>Princesszr</b>?
</p>
<p>
<a href="http://www.codinghorror.com/blog/images/mario-princess-rescue.png"><img alt="Rescue the Princess as a web 2.0 website" border="0" class="at-xid-6a0120a85dcdae970b0120a86e0f36970b" height="243" src="https://blog.codinghorror.com/content/images/uploads/2009/03/6a0120a85dcdae970b0120a86e0f36970b-pi.png" width="512"></a>
</p>
<p>
How easy are the above two applications to learn? To use? The desktop application has a steep learning curve, but offers lots of power and flexibility. The web 2.0 version has almost no learning curve, but it only does one simple (and boring) thing.
</p>
<p>
Now consider it <b>as a game</b>.
</p>
<p>
<a href="http://www.codinghorror.com/blog/images/mario-princess-rescue.png"><img alt="rescue the princess, as Super Mario Brothers" border="0" class="at-xid-6a0120a85dcdae970b0120a86e0f43970b" height="480" src="https://blog.codinghorror.com/content/images/uploads/2009/03/6a0120a85dcdae970b0120a86e0f43970b-pi.png" width="512"></a>
</p>
<p>
</p>
<blockquote>
<p>
The player is handed a new tool called Mario the first time they see this screen.  They don't know how to use him.  The screen gives them a playground where they can try different things:
</p>
<p>
</p>
<ul>
<li>Blocks that reward jumping by giving out coins.
</li>
<li>Goomba that rewards successfully learning how to attack.  It also teaches the players to avoid Goombas on pain of death.
</li>
<li>Blocks that teach the player how to collect powerups.
</li>
</ul>
There are a couple interesting points to note:
<p>
</p>
<ol>
<li>The awarding of a new tool is almost always paired with a simple level that lets the player learn the tool in a somewhat safe environment.
</li>
<li>The player cannot pass this section without mastering at least one critical skill, in this case moving and jumping.  This sort of gating ensures that the designer can rely upon the user having the jumping skill available at later points in the game.
</li>
</ol>
This is different than most apps.  In many apps, you sort through the options and turn on a new feature. There is nothing that is the equivalent of a 'level' or learning context to help you build skills associated with the tool.
</blockquote>
<p>
Recasting the experience as a game means <b>it can be simultaneously complex and easily learnable</b>. That's something we couldn't accomplish through traditional applications, which are designed to be <i>usable but not necessarily fun</i>. They've failed to design for fun. And in an era of ubiquitious web community , that's a big mistake.
</p>
<p>
Let's not trivialize this. Just because your application is fun <a href="http://bokardo.com/archives/game-mechanics-for-interaction-design-an-interview-with-amy-jo-kim/">doesn't mean you've turned it into a game</a>. You've adopted game mechanics in order to build community:
</p>
<p>
</p>
<blockquote>
I see game mechanics working well on sites like YouTube, Yelp, Twitter, and Flickr. <b>These sites have added game mechanics like points, leaderboards, level-ups, social exchanges, and customization</b> to a strong core experience. In particular, YouTube has done a brilliant job of making the overall experience feel game-like, without turning the site into a traditional game.
<p>
Why is this happening in so many places? I think game design principles have become common knowledge for young Web designers. Many of the people who are designing and building these sites grew up playing games, and are familiar with game design principles - even if they're not "officially" game designers themselves. It's a testament to how pervasive and mainstream gaming has become.
</p>
</blockquote>
<p>
I recommend paging through <a href="http://bokardo.com/archives/game-mechanics-for-interaction-design-an-interview-with-amy-jo-kim/">Amy's presentations</a> for a more detailed explanation with lots of great examples:
</p>
<p>
</p>
<ol>
<li>
<a href="http://www.slideshare.net/amyjokim/putting-the-fun-in-functiona?type=powerpoint">Putting the Fun in Functional</a>
</li>
<li>
<a href="http://www.slideshare.net/amyjokim/power-to-the-players?type=powerpoint">Power to the Players</a>
</li>
</ol>
<p>
If you're looking for a lower-level design compendium of game mechanics, suitable for implementation on your own site, check out the Yahoo Developer Network <a href="http://developer.yahoo.com/ypatterns/parent.php?pattern=reputation">social design patterns library</a>:
</p>
<p>
</p>
<ul>
<li>
<a href="http://developer.yahoo.com/ypatterns/parent.php?pattern=ratingsreviews">Ratings &amp; Reviews</a>
</li>
<li>
<a href="http://developer.yahoo.com/ypatterns/parent.php?pattern=reputation">Reputation</a>
</li>
<li>
<a href="http://developer.yahoo.com/ypatterns/parent.php?pattern=ranking">Ranking</a>
</li>
</ul>
<p>
<a href="http://lostgarden.com/2008/06/what-actitivies-that-can-be-turned-into.html">Not every activity can be turned into a game</a>. And perhaps not every activity <i>should</i> be a game.
</p>
<p>
But when it comes to community websites -- sites that get better for everyone the more users actively participate -- these are already so close to being de-facto games that it'd be downright negligent to ignore this aspect of the design. You should shape and define your community by <b>explicitly acknowledging and embracing the game-like aspects you want to encourage</b>, rather than pretending they don't exist.
</p>
<p>
After all, the first step in breaking our addiction to the world's largest MMORPG is to admit that we have a problem.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-03-15T13:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-worlds-largest-mmorpg-youre-playing-it-right-now/</guid>
</item>
</channel>
</rss>
