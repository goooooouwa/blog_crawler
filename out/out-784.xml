<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Computer Languages aren't Human Languages</title>
<link>https://blog.codinghorror.com/computer-languages-arent-human-languages/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Though I've become agnostic about <a href="http://www.codinghorror.com/blog/archives/000519.html">the utterly meaningless non-choice between VB.NET and C#</a>, the inherited syntax of C leaves a lot to be desired, in my opinion. And not just in <a href="http://www.codinghorror.com/blog/archives/000458.html">the case sensitivity department</a>. Daniel Appleman, in his excellent e-book, <a href="http://www.amazon.com/Visual-Basic-Which-Choose/dp/B0006AB0N0">VB.NET or C#, Which to Choose?</a>, concurs:
</p>
<p>
</p>
<blockquote>
Here I risk stepping on some toes, because language syntax is very much a religious issue with many programmers. Certainly we all tend to prefer the language syntax we are familiar with, and C++ and Java programmers will certainly find a great deal that is familiar in C#.
<p>
It should also be clear from this section that the differences between the two languages in this area really are minor. Both have virtually the same functionality.
</p>
<p>
Nevertheless, on the subject of object syntax, I must give the win to VB.NET. Just look at the inheritance declarations:
</p>
<p>
</p>
<pre>
public class BClass: AClass, Iint
Public Class BClass
Inherits AClass
Implements Iint
</pre>
<p>
Look at the words used to control inheritance:
</p>
<p>
</p>
<pre>
abstract, sealed, virtual
MustInherit, NotInheritable, Overridable, Overrides, Shadows
</pre>
<p>
When it comes to looking at code and understanding what it does -- especially later on when the original developer has left and some young programmer right out of college has to figure out what it does quickly to solve some obscure bug or add a new feature, which one is going to be easier to understand? Visual Basic .NET.
</p>
</blockquote>
<p>
Although I do agree with Appleman on this point-- <i>void</i> is for sci-fi geeks; <i>nothing</i> is for human beings-- in the big scheme of things, it's barely relevant. If the success or failure of your project hinges on the minor syntax differences between two virtually identical .NET languages, you have much deeper problems than choice of language.
</p>
<p>
Although <a href="http://www.codinghorror.com/blog/archives/000396.html">the tradeoff between verbosity and succinctness</a> is worth considering, there are other risks here. <b>Computer languages, however verbose you make them, shouldn't try to become proxy versions of spoken languages.</b> I've never worked with <a href="http://en.wikipedia.org/wiki/AppleScript">AppleScript</a> before, but it fell into this trap in a big way. Here's a sample bit of AppleScript code to illustrate:
</p>
<p>
</p>
<pre>
tell application "Mori"
tell front document
set a to first item of selection
set b to second item of selection
set a's note to (a reference to a's) note &amp; (a reference to b's note)
end tell
end tell
</pre>
<p>
Looks almost like a paragraph, doesn't it? John Gruber <a href="http://daringfireball.net/2005/09/englishlikeness_monster">calls AppleScript the English-Likeness Monster</a>:
</p>
<p>
</p>
<blockquote>
The idea was, and I suppose still is, that AppleScript's English-like facade frees you from worrying about computer-science-y jargon like classes and objects and properties and commands, and allows you to just say what you mean and have it just work.
<p>
But saying what you mean, in English, almost never "just works" and compiles successfully as AppleScript, and so to be productive you still have to understand all of the ways that AppleScript actually works. But this is difficult, because <b>the language syntax is optimized for English-likeness, rather than being optimized for making it clear just what the f**k is actually going on.</b>
</p>
<p>
This is why Python and JavaScript, two other scripting language of roughly the same vintage as AppleScript, are not only better languages than AppleScript, but are easier than AppleScript, even though neither is very English-like at all. Python and JavaScript's syntaxes are much more abstract than AppleScript's, but they are also more obvious. (Python, in particular, celebrates obviousness.)
</p>
</blockquote>
<p>
AppleScript's <b>natural language metaphor</b> turns out to be more of a curse than a blessing.
</p>
<p>
Some languages are arguably more readable than others, of course, but keeping the goal of clarity front and center is far more important than bickering about relatively meaningless language choices. <a href="http://www.codinghorror.com/blog/archives/000272.html">You can write FORTRAN in any language</a>, so choose whatever language you're most comfortable with and <i>optimize for making it clear what the f**k is going on.</i>
</p>
<p>
(I thought about letting the f-bomb drop in this post for emphasis, but my fireball isn't quite as daring as John Gruber's.)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-08-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/computer-languages-arent-human-languages/</guid>
</item>
</channel>
</rss>
