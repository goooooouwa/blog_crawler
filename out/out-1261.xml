<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Code-Behind vs. Inline Code</title>
<link>https://blog.codinghorror.com/code-behind-vs-inline-code/</link>
<content>
                <!--kg-card-begin: markdown--><p>
After religiously adhering to the new, improved code-behind model of ASP.NET for so long, I have to admit <b>it's sort of refreshing to rediscover inline code ASPX pages again</b>. Deploying single web pages to a server without recompiling the entire solution? Making localized edits to single pages that take effect in real time? A single file that contains both code and markup in one convenient  self-contained package? Revolutionary!
</p>
<p>
I've worked with code-behind for so long I actually didn't even know how to convert a page to the code inline model. As expected, it's quite simple:
</p>
<ol>
<li>Open the HTML (.aspx) view of an existing ASPX code-behind page.
</li>
<li>Add or modify the following page directive:
<p>
</p>
<pre>
&lt;%@ Page Language="vb" Strict="True" %&gt;
</pre>
<p>
</p>
</li>
<li>Paste all the code from your existing code-behind (.vb) into a HTML script block:
<p>
</p>
<pre>
&lt;HEAD&gt;
&lt;SCRIPT language="vb" runat="server"&gt;
(page class code goes here)
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
</pre>
<p>
only paste the code <i>inside</i> the page class, under the "Web Form Designer Generated Code" region. Don't paste the class itself!
</p>
</li>
<li>Don't forget to add any imports your code needs; these can go just above the page directive.
<p>
</p>
<pre>
&lt;%@ Import Namespace="System.IO" %&gt;
&lt;%@ Import Namespace="System.Text" %&gt;
&lt;%@ Import Namespace="System.Text.RegularExpressions" %&gt;
&lt;%@ Import Namespace="System.Configuration" %&gt;
</pre>
<p>
</p>
</li>
<li>Delete the associated .vb code-behind file.
</li>
</ol>
<p>
That's it! You now have a single file webpage that dynamically compiles. Copy that single file to a target website and, assuming it doesn't have any other dependencies, it'll load right up.
</p>
<p>
<b>Unfortunately, Inline ASPX pages also remind me of some things I didn't miss from the bad old days of ASP programming</b>: spaghetti code, extremely limited intellisense, and crappy debugging. On the whole, I'll stick with code-behind, but I might vacation in Inlineville from time to time.
</p>
<p>
<a href="http://www.eggheadcafe.com/articles/20030518.asp">Inline code pages clearly have their place</a>; I use them mostly for utilities where ease of deployment into existing websites is the overriding concern. However, I do think you can also make a fairly compelling argument that <b>the current ASP.NET code-behind model is a bit too restrictive</b>; you end up with a humongous <i>web.dll</i> that has to be recompiled even if the tiniest bit of code in the most trivial web page in your solution changes. It'll be interesting to see what kind of <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnvs05/html/codecompilation.asp">improved, hybrid behind/inline model we get in VS.NET 2005</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/code-behind-vs-inline-code/</guid>
</item>
</channel>
</rss>
