<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Shipping Isn't Enough</title>
<link>https://blog.codinghorror.com/shipping-isnt-enough/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Part of <a href="http://www.removingalldoubt.com/PermaLink.aspx/a32977e2-cb7d-42ea-9d25-5e539423affd">Chuck Jazdzewski's fatherly advice to new programmers</a> is this nugget:
</p>
<p>
</p>
<blockquote>
Programming is fun. It is the joy of discovery. It is the joy of creation. It is the joy of accomplishment. It is the joy of learning. It is fun to see your handiwork displaying on the screen. It is fun to have your co-workers marvel at your code. It is fun to have people use your work. It is fun have your product lauded in public, used by neighbors, and discussed in the press. Programming should be fun and if it isn't, figure out what is making it not fun and fix it. However, shipping isn't fun. I often have said that shipping a product feels good, like when someone stops hitting you. Your job is completing the product, fixing the bugs, and shipping. If bugs need fixing, fix them. If documentation needs writing, write it. If code needs testing, test it. All of this is part of shipping. <b>You don't get paid to program, you get paid to ship. Be good at your job.</b>
</blockquote>
<p>
It's true. One key measure of success for any programmer is how much code you've shipped. <b>But merely shipping is not enough.</b> A more meaningful measure of success is to ask yourself how much code you've shipped to <i>living, breathing, real-world users</i>. But then <a href="http://www.codinghorror.com/blog/archives/000664.html">total users doesn't equal total usage</a>, either.
</p>
<p>
<b>How many users actually <i>use</i> your application</b>? Now <i>that's</i> the ultimate metric of success.
</p>
<p>
But it's a little scary when you start doing the math. Rich Skrenta <a href="http://www.skrenta.com/2007/01/market_engineering.html">explains</a>:
</p>
<p>
</p>
<blockquote>
I was just an engineer in this group, but the reality of what was happening in the market to our product line started to seep in. Here I was putting all of this effort into stuff that never would be used by anyone. It was still intellectually challenging...like doing crossword puzzles or something. But it had no utility to the world.
<p>
I started to look around and I saw many other examples of groups working on stuff that no one would ever use or care about. Mobile IP initiatives, endless work around standards that nobody cared about, research from the labs that would never be applied or even cited.
</p>
<p>
Yikes.
</p>
<p>
I had written stuff that people actually used, before. It felt good. I had written a usenet newsreader that was used by hundreds of thousands of people. I was running an online game, as a commercial hobby on the side, which had several hundred paying customers. Sheesh, I thought. <i>My side projects have more customers than my day job.</i>
</p>
<p>
<b>So I made a simple resolution. I wanted to work on stuff that people would actually use. </b>
</p>
<p>
This sounds simple. But if you walk the halls of Sun, AOL, HP, IBM, AOL, Cisco, Siebel, Oracle, any university, many startups, and even Google and Yahoo, you'll find people working on stuff that isn't going to ship. Or that if it does ship, it won't be noticed, or won't move the needle. That's tragic. It's like writing a blog that nobody reads. People make fun of bloggers who are writing "only for their mother". But what about the legion of programmers writing code paths that will never be traversed?
</p>
</blockquote>
<p>
It's for precisely this reason that <a href="http://www.codinghorror.com/blog/archives/000710.html">I've often wondered if writing code is really the most effective way for software developers to spend their time</a>. A software developer that doesn't write code-- sacrilege, right?
</p>
<p>
But wait a minute. A <i>smart</i> software developer knows that there's no point in writing code if it's code that nobody will see, code that nobody will use, code that nobody will ultimately benefit from. Why build a permanently vacant house?
</p>
<p>
A smart software developer realizes that their job is far more than writing code and shipping it; <b>their job is to build software that people will actually want to use</b>. That encompasses coding, sure, but it also includes a whole host of holistic, non-coding activities that are critical to the overall success of the software. Things like <a href="http://www.codinghorror.com/blog/archives/000668.html">documentation</a>, <a href="http://www.codinghorror.com/blog/archives/000325.html">interaction design</a>, <a href="http://www.codinghorror.com/blog/archives/000706.html">cultivating user community</a>, all the way up to the <a href="http://www.codinghorror.com/blog/archives/000351.html">product vision</a> itself. If you get that stuff wrong, it won't matter what kind of code you've written.
</p>
<p>
If, like Rich Skrenta, you want to work on software that people want to use, realize that it's part of your job to make that software <i>worth using</i>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-01-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/shipping-isnt-enough/</guid>
</item>
</channel>
</rss>
