<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Markov and You</title>
<link>https://blog.codinghorror.com/markov-and-you/</link>
<content>
                <!--kg-card-begin: markdown--><p>In <a href="http://www.codinghorror.com/blog/archives/001130.html">Finally, a Definition of Programming I Can Actually Understand</a> I marvelled at particularly strange and wonderful comment left on this blog. Some commenters wondered if that comment was generated through <a href="http://en.wikipedia.org/wiki/Markov_chain">Markov chains</a>. I considered that, but I had a hard time imagining a text corpus input that could possibly produce output so profoundly weird.</p>
<p>So <strong>what are these Markov chains</strong> we're talking about?</p>
<p>One example of Markov chains in action is <a href="http://joshmillard.com/garkov/">Garkov</a>, where the long running <a href="http://en.wikipedia.org/wiki/Garfield">Garfield</a> cartoon strip meets Markov chains.  I present below, for your mild amusement, two representative strips I found on the <a href="http://joshmillard.com/garkov/famehall.cgi">Garkov hall of fame</a>:</p>
<p><img class="at-xid-6a0120a85dcdae970b0120a86dce54970b" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dce54970b-pi.png" border="0" alt="garkov-sample-1.png" width="606" height="211"></p>
<p><img class="at-xid-6a0120a85dcdae970b0120a86dce82970b" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dce82970b-pi.png" border="0" alt="garkov-sample-2.png" width="606" height="211"></p>
<p>Garfield's an easy target, though:</p>
<ul>
<li>
<a href="http://garfieldminusgarfield.net/">Garfield Minus Garfield</a>. What it says on the tin. Surprisingly cathartic. </li>
<li>
<a href="http://www.lasagnacat.com/">Lasagna Cat</a>. Almost indescribably strange live action recreations of Garfield strips. If you only click one link in this post, make it this one. Sanity optional. </li>
<li>
<a href="http://www.garfieldvariations.com/">Garfield Variations</a>. Hand-drawn versions of Garfield in underground "comix" style, usually on paper napkins. </li>
<li>
<a href="http://www.thereverend.com/barfield/index.html">Barfield</a>. Garfield strips subtly modified to include amusing bodily functions. </li>
<li>
<a href="http://permanent-monday.blogspot.com/">Permanent Monday</a>. Literary commentary on selected strips. </li>
<li>
<a href="http://www.tailsteak.com/arbuckle/">Arbuckle</a>. Strips faithfully redrawn by random internet "artists", with one dramatic twist: Jon can't actually <em>hear</em> Garfield, because he is, after all, a cat. </li>
<li>
<a href="http://www.dougshaw.com/garfield.html">Garfield Randomizer</a>. Sadly defunct – combined random panels to form "new" Garfield strips. </li>
</ul>
<p>So let's proceed to the "kov" part of Garkov. The best description of Markov chains I've ever read is in <a href="http://www.cs.bell-labs.com/cm/cs/pearls/strings.html">chapter 15</a> of <a href="http://www.amazon.com/exec/obidos/ASIN/0201657880/codihorr-20">Programming Pearls</a>:</p>
<blockquote>A generator can make more interesting text by making each letter a random function of its predecessor. We could, therefore, read a sample text and count how many times every letter follows an A, how many times they follow a B, and so on for each letter of the alphabet. When we write the random text, we produce the next letter as a random function of the current letter. The Order-1 text was made by exactly this scheme:
<blockquote><strong>t I amy, vin. id wht omanly heay atuss n macon aresethe hired boutwhe t, tl, ad torurest t plur I wit hengamind tarer-plarody thishand.</strong></blockquote>
<p>We can extend this idea to longer sequences of letters. The order-2 text was made by generating each letter as a function of the two letters preceding it (a letter pair is often called a digram). The digram TH, for instance, is often followed in English by the vowels A, E, I, O, U and Y, less frequently by R and W, and rarely by other letters.</p>
<blockquote><strong>Ther I the heingoind of-pleat, blur it dwere wing waske hat trooss. Yout lar on wassing, an sit." "Yould," "I that vide was nots ther.</strong></blockquote>
<p>The order-3 text is built by choosing the next letter as a function of the three previous letters (a trigram).</p>
<blockquote><strong>I has them the saw the secorrow. And wintails on my my ent, thinks, fore voyager lanated the been elsed helder was of him a very free bottlemarkable,</strong></blockquote>
<p>By the time we get to the order-4 text, most words are English, and you might not be surprised to learn that it was generated from a Sherlock Holmes story ( <a href="http://sherlock-holmes.classic-literature.co.uk/the-adventure-of-the-abbey-grange/">"The Adventure of Abbey Grange''</a>).</p>
<blockquote><strong>His heard." "Exactly he very glad trouble, and by Hopkins! That it on of the who difficentralia. He rushed likely?" "Blood night that.</strong></blockquote>
</blockquote>
<p>So the text in Garkov strips is generated in exactly this way, but using words instead of letters. The input corpus is, as you'd expect, the text of many old Garfield strips.</p>
<p>What's amazing to me about Markov chains is how unbelievably <em>simple</em> they are. A Markov chain has no memory of previous states: the next state (word, in our case) is chosen based on a random dice roll and a lookup into a table of the states that tend to historically follow the current state in the input corpus. Given an adequate input corpus, they work almost uncannily well, a testament to the broad power of rudimentary statistical inference. Garfield's been around since 1978, and still going str.. well, going, so there's no shortage of material to work with.</p>
<p>Now let's try it ourselves. I fed the text of the last twelve <a href="http://www.paulgraham.com/articles.html">Paul Graham essays</a> to <a href="http://www.beetleinabox.com/mkv_input.html">this online Markov generator</a>, using two word groupings – what Bentley refers to as "Order-2". Here's what I got back:</p>
<blockquote>You can feel the need to take advantage of increased cheapness, however. You're not all playing a zero-sum game. There's not some fixed number of startups; we fund startups we fund to work on matters of passing importance. But I'm uncomfortably aware that this is part of any illusions about the problem of overeating by stopping eating. I couldn't simply avoid the Internet had become, because the company is the new trend of worrying obsessively about what it meant for someone, usually an outsider, who deliberately stirred up fights in a startup than just start it. You know how the A List is selected. And even that is more work.</blockquote>
<p>But Markov chains aren't just useful for automatically generating Paul Graham essay parodies. They're also <a href="http://en.wikipedia.org/wiki/Markov_chain#Applications">quite practical</a>. You might even say Markov chains are a large part of what powers today's internet. Most remarkably, to me at least, Markov chains underly <a href="http://en.wikipedia.org/wiki/PageRank">Google's trillion dollar PageRank formula</a>:</p>
<blockquote>The [PageRank] formula uses a model of a random surfer who gets bored after several clicks and switches to a random page. The PageRank value of a page reflects the chance that the random surfer will land on that page by clicking on a link. <strong>[PageRank] can be understood as a Markov chain in which the states are pages, and the transitions are all equally probable and are the links between pages.</strong>
<p>As a result of Markov theory, it can be shown that the PageRank of a page is the probability of being at that page after lots of clicks. This happens to equal t<sup>-1</sup> where t is the expectation of the number of clicks (or random jumps) required to get from the page back to itself.</p>
</blockquote>
<p>Incidentally, if you haven't read the original 1998 PageRank paper, titled <a href="http://citeseer.ist.psu.edu/cache/papers/cs/7144/http:zSzzSzwww-db.stanford.eduzSz~backrubzSzpageranksub.pdf/page98pagerank.pdf">The PageRank Citation Ranking: Bringing Order to the Web</a> (pdf), you really should. It's remarkable how, ten years on, so many of the predictions in this paper have come to pass. It's filled with interesting stuff; the list of the top 15 PageRank sites circa 1996 in Table 1 is an eye-opening reminder of how far we've come. Plus, there are references to pornographic sites, too!</p>
<p>Markovian models – specifically, hidden Markov Models – are also <a href="http://www.codinghorror.com/blog/archives/000423.html">related to our old friend, Bayesian spam filtering</a>. They're <em>even better!</em> The most notable example is the <a href="http://crm114.sourceforge.net/">CRM114 Discriminator</a>, as outlined in this <a href="http://crm114.sourceforge.net/docs/Plateau99.pdf">excellent presentation</a> (pdf).</p>
<p><img class="at-xid-6a0120a85dcdae970b0120a86dcec3970b" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dcec3970b-pi.png" border="0" alt="How to Turn a Bayesian into a Markovian" width="600" height="371"></p>
<p>If you play with the <a href="http://www.beetleinabox.com/mkv_input.html">Markov text synthesizer</a>, you'll quickly find that Markov methods are only as good as their input corpus. Input a bunch of the same words, or random gibberish, and that's what you'll get back.</p>
<p>But it's sure tough to imagine a more ideal input corpus for Markovian techniques than the unimaginable vastness of web and email, isn't it?</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-06-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/markov-and-you/</guid>
</item>
</channel>
</rss>
