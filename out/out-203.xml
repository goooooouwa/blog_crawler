<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Testing With "The Force"</title>
<link>https://blog.codinghorror.com/testing-with-the-force/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Markdown was one of the <a href="http://www.codinghorror.com/blog/archives/001116.html">humane markup languages</a> that we evaluated and adopted for Stack Overflow. I've been pretty happy with it, overall. So much so that I wanted to implement a tiny, lightweight subset of Markdown for comments as well.
</p>
<p>
I settled on these three commonly used elements:
</p>
<p>
</p>
<pre>
*italic* or _italic_
**bold** or __bold__
`code`
</pre>
<p>
I <a href="http://www.codinghorror.com/blog/archives/001016.html">loves me some regular expressions</a> and this is exactly the stuff regex was born to do! It doesn't <i>look</i> very tough. So I dusted off <a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood">my copy of RegexBuddy</a> and began.
</p>
<p>
I typed some test data in the test window, and whipped up a little regex in no time at all. This isn't my first time at the disco.
</p>
<p>
<a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood"><img alt="regexbuddy-naive-regex.png" border="0" class="at-xid-6a0120a85dcdae970b0128777090ff970c" height="339" src="https://blog.codinghorror.com/content/images/uploads/2009/07/6a0120a85dcdae970b0128777090ff970c-pi.png" width="478"></a>
</p>
<p>
Bam! Yes! Done and <i>done!</i> By gum, <a href="http://code.google.com/events/io/sessions/MythGeniusProgrammer.html">I must be a genius programmer!</a>
</p>
<p>
Despite my obvious genius, I began to have some small, nagging doubts. Is the test phrase...
</p>
<pre>
I would like this to be *italic* please.
</pre>
<p>
... <i>really</i> enough testing?
</p>
<p>
Sure it is! I can feel in my bones that this thing freakin' works! It's almost like I'm being pulled toward shipping this code by some inexorable, dark, testing ... force. It's so <i>seductively easy!</i>
</p>
<p>
<img alt="come-to-the-dark-side-vader.jpg" class="at-xid-6a0120a85dcdae970b012877709131970c" height="331" src="https://blog.codinghorror.com/content/images/uploads/2009/07/6a0120a85dcdae970b012877709131970c-pi.jpg" width="327">
</p>
<p>
But wait. <b>I have this whole database of real world comments</b> that people have entered on Stack Overflow. shouldn't I perhaps try my awesome regular expression on that corpus of data to see what happens? Oh, fine. If we must. Just to humor you, nagging doubt. Let's run a query and see.
</p>
<p>
</p>
<pre>
select Text from PostComments
where dbo.RegexIsMatch(Text, '*(.*?)*') = 1
</pre>
<p>
Which produced this list of matches, among others:
</p>
<p>
</p>
<blockquote>
Interesting fact about math: x <font color="red">* 7 == x + (x *</font> 2) + (x * 4), or x + x &gt;&gt; 1 + x &gt;&gt; 2.  Integer addition is usually pretty cheap.
<p>
Thanks.  What I needed was to turn on Singleline mode too, and use .<font color="red">*? instead of .*</font>.
</p>
<p>
yeah, see my edit - change select <font color="red">* to select RESULT.*</font>  one row - are sure you have more than one row item with the same InstanceGUID?
</p>
<p>
Not your main problem, but you are mix and matching wchar_t and TCHAR.  mbstowcs() converts from char <font color="red">* to wchar_t *</font>.
</p>
<p>
aawwwww.... Brainf<font color="red">**</font>k is not valid. :/
</p>
</blockquote>
<p>
Thank goodness I listened to my midichlorians and let <b>the light side of the testing force</b> prevail here!
</p>
<p>
<img alt="come-to-the-light-side-skywalker.jpg" class="at-xid-6a0120a85dcdae970b012877709161970c" height="325" src="https://blog.codinghorror.com/content/images/uploads/2009/07/6a0120a85dcdae970b012877709161970c-pi.jpg" width="325">
</p>
<p>
So how do we fix this regex? We use the light side of the force -- brute force, that is, against a ton of test cases! My job here is relatively easy because I have over 20,000 test cases sitting in a database. You may not have that luxury. Maybe you'll need to go out and find a bunch of test data on the internet somewhere. Or write a function that generates random strings to feed to the routine, also known as <a href="http://en.wikipedia.org/wiki/Fuzz_testing">fuzz testing</a>.
</p>
<p>
I wanted to leave the rest of this regular expression as an exercise for the reader, as I'm a sick guy who finds that sort of thing entertaining. If you don't -- well, what the heck is wrong with <i>you</i>, man? But I digress. I've been criticized for not providing, you know, "the answer" in my blog posts. Let's walk through some improvements to our italic regex pattern.
</p>
<p>
First, let's make sure we have <b>at least one non-whitespace character inside the asterisks</b>. And more than one character in total so we don't match the ** case. We'll use <a href="http://www.regular-expressions.info/lookaround.html">positive lookahead and lookbehind</a> to do that.
</p>
<p>
</p>
<pre>
*<font color="red">(?=S)</font>(.+?)<font color="red">(?&lt;=S)</font>*
</pre>
<p>
That helps a lot, but we can test against our data to discover some other problems. We get into trouble when there are unexpected characters in front of or behind the asterisks, like, say, <code>p*q*r</code>. So let's specify that <b>we only want certain characters outside the asterisks</b>.
</p>
<p>
</p>
<pre>
<font color="red">(?&lt;=[s^,(])</font>*(?=S)(.+?)(?&lt;=S)*<font color="red">(?=[s$,.?!])</font>
</pre>
<p>
Run this third version against the data corpus, and wow, that's starting to look pretty darn good! There are undoubtedly some edge conditions, particularly since we're unlucky enough to be talking about code in a lot of our comments, which has wacky asterisk use.
</p>
<p>
This regex doesn't have to be (and probably <i>cannot</i> be, given the huge possible number of human inputs) perfect, but running it against a large set of input test data gives me reasonable confidence that I'm not totally screwing up.
</p>
<p>
So by all means, test your code with the force -- brute force! It's good stuff! Just <b>be careful not to get sloppy, and let the dark side of the testing force prevail</b>. If you think one or two simple test cases covers it, that's taking the easy (and most likely, buggy and incorrect) way out.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-07-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/testing-with-the-force/</guid>
</item>
</channel>
</rss>
