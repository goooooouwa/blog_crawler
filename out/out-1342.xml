<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Why Your Code Sucks... and Mine Doesn't</title>
<link>https://blog.codinghorror.com/why-your-code-sucks-and-mine-doesnt/</link>
<content>
                <!--kg-card-begin: markdown--><p>
OK, the title is just <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=71730">Why Your Code Sucks</a>, but you know you were thinking it. The article may not be as gramatically (sp) correct as I would like, but it's got some solid advice. My favorite is rejection of dogma:
</p>
<blockquote>
<b>Your code sucks if it dogmatically conforms to a trendy framework at the cost of following good design and implementation practices.</b>
<p>
For example, Bob Martin recently raised the issue of dogmatically using private fields and getters/setters for a simple data structure (e.g. a DTO). If a field is transparently readable and writable why not simply make the field public? In most languages you can do that. Granted, in some you can't. For example, traditionally in Smalltalk all fields are private and all methods are public.
</p>
<p>
In general it's a good thing whenever you can throw out, or avoid writing, some code. Using a heavy framework generally requires that you must write a significant amount of code that has no business value. There are a variety of lightweight frameworks for Java that are a response to the heavyweight frameworks (e.g. EJB) that have become matters of dogma lately. O'Reilly has a new book out on this topic, coauthored by Bruce Tate.
</p>
<p>
When making framework decisions, consider if a lighter framework will do the required job. Using something like Hibernate, Prevayler, Spring, PicoContainer, NakedObjects, etc. can be a real win in many situations. Never blindly adopt a heavy framework just because it's the current bandwagon. Likewise, don't blindly adopt a lightweight framework in defiance. Always give due consideration to your choices.
</p>
</blockquote>
<p>
Of course, the <i>real</i> problem with software development is the users. It's unbelievable. They've caused problems with every program I've ever written.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-09-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-your-code-sucks-and-mine-doesnt/</guid>
</item>
</channel>
</rss>
