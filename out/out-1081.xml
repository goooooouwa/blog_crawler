<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Are All Programming Languages The Same?</title>
<link>https://blog.codinghorror.com/are-all-programming-languages-the-same/</link>
<content>
                <!--kg-card-begin: markdown--><p>
There's a chart in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a> that compares the productivity of working in different languages:
</p>
<p>
</p>
<blockquote>
Programmers working with high-level languages achieve better productivity and quality than those working with lower-level languages. Languages such as C++, Java, Smalltalk, and Visual Basic have been credited with improving productivity, reliability, and comprehensibility by factors of 5 to 15 over low-level languages such asassembly and C (Brooks 1987, Jones 1998, Boehm 2000). You save time when you don't need to have an awards ceremony every time a C statement does what it's supposed to do. Moreover, higher-level languages are more expressive than lower-level languages. Each line of code says more. The [following table] shows typical ratios of source statements in several high-level languages to the equivalent code in C. A higher ratio means that each line of code in the language listed accomplishes more than does each line of code in C.
</blockquote>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td><b>Language</b></td>
<td>
<b>Level Relative to C</b>
</td>
</tr>
<tr>
<td>C</td>
<td>1
</td>
</tr>
<tr>
<td>C++</td>
<td>2.5
</td>
</tr>
<tr>
<td>Fortran</td>
<td>2
</td>
</tr>
<tr>
<td>Java</td>
<td>2.5
</td>
</tr>
<tr>
<td>Perl</td>
<td>6
</td>
</tr>
<tr>
<td>Python</td>
<td>6
</td>
</tr>
<tr>
<td>Smalltalk</td>
<td>6
</td>
</tr>
<tr>
<td>MS Visual Basic</td>
<td>4.5
</td>
</tr>
</table>
<p>
Fair enough. Des Traynor wondered if this table was valid, so he <a href="http://www.minds.may.ie/~dez/serendipity/index.php?/archives/25-All-programming-languages-are-the-same....html">performed a simple test</a>: he provides examples of a tiny "read a file and print it to the console" app in Java, Perl, Python, and Ruby. I'll reprint the smallest version here, which happens to be the Python implementation:
</p>
<p>
</p>
<pre>
filename = "readAFile.py"
try:
for line in open(filename, 'r').readlines(): print line
except: print "Problem with %s" % filename
</pre>
<p>
For comparison, here's the VB.NET 2005 version:
</p>
<p>
</p>
<pre language="vb.net">
Module Module1
Sub Main()
Dim filename As String = "readAFile.vb"
Try
For Each line As String In System.IO.File.ReadAllLines(filename)
Console.WriteLine(line)
Next
Catch
Console.WriteLine("Error reading file, or file not found.")
End Try
End Sub
End Module
</pre>
<p>
And the C# 2005 version:
</p>
<p>
</p>
<pre language="C#">
class Module1 {
static void Main(string[] args)	{
string filename = @"readAFile.cs";
try {
foreach (string line in System.IO.File.ReadAllLines(filename)) {
System.Console.WriteLine(line);
}
}
catch {
System.Console.WriteLine("File not found or error reading file.");
}
}
}
</pre>
<p>
I had to edit the C# sample quite a bit to get rid of things that would have made the line count ridiculously large. Most notably, I removed the <a href="http://www.codinghorror.com/blog/archives/000188.html">stupid always-on namespace declaration</a> (don't get me started), added the System prefix to avoid the using, and folded leading curlies into the same line.
</p>
<p>
Anyway. Including the examples provided on <a href="http://www.minds.may.ie/~dez/serendipity/index.php?/archives/25-All-programming-languages-are-the-same....html">Des' page</a>, that gives us a final line count tally of:
</p>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td><b>Language</b></td>
<td>
<b>Lines of code</b>
</td>
</tr>
<tr>
<td>Java</td>
<td>15
</td>
</tr>
<tr>
<td>C# 2005</td>
<td>8
</td>
</tr>
<tr>
<td>VB.NET 2005</td>
<td>8
</td>
</tr>
<tr>
<td>Ruby</td>
<td>6
</td>
</tr>
<tr>
<td>Perl</td>
<td>5
</td>
</tr>
<tr>
<td>Python</td>
<td>4
</td>
</tr>
</table>
<p>
So, even with this trivial little example, there is a wide gap between "scripting" and "non-scripting" languages when it comes to lines of code. There's plenty of existing research to support the claim that scripting languages offer higher productivity, such as the 2000 IEEE paper <a href="http://doi.ieeecomputersociety.org/10.1109/2.876288">An Empirical Comparison of Seven Programming Languages</a> (<a href="http://page.mi.fu-berlin.de/~prechelt/Biblio/jccpprt_computer2000.pdf">free draft PDF</a>):
</p>
<p>
</p>
<blockquote>
Despite these caveats, directly comparing different programming languages can provide meaningful insights. For example, I conclude from the study that Java's memory overhead is still huge compared to C or C++, but its runtime efficiency has become quite acceptable. The scripting languages, however, offer reasonable alternatives to C and C++, even for tasks that must handle fair amounts of computation and data. Their relative runtime and memory-consumption overhead will often be acceptable, and they may offer significant advantages with respect to programmer productivity, at least for small programs like the phonecode problem.
</blockquote>
<p>
That was written in 2000. Five years later, I am wondering if this distinction between "scripting" and "non-scripting" languages is as meaningful in a .NET world. If you examine the code samples above, you'll notice that <b>most of the overhead in the "non-scripting" languages comes from the cruft associated with classes, functions, and object orientation</b>. The main work loop, if considered alone, is almost identical in every language!
</p>
<p>
So then, if language isn't the real difference, what is? That very same language comparison paper offers this insight:
</p>
<p>
</p>
<blockquote>
For all program aspects investigated, the performance variability that derives from differences among programmers of the same language -- as described by the bad-to-good ratios -- is on average <b>as large or larger than the variability found among the different languages.</b>
</blockquote>
<p>
It's currently all the rage to propose that <a href="http://www.37signals.com/svn/archives/000592.php">Ruby is changing the face of software development</a>. I can definitely respect the passion behind this statement, but the actual data doesn't support a magic bullet language effect. Given ..
</p>
<ol>
<li>the abandonment of C++ and C for mainstream programming
</li>
<li>the huge influence of individual programmer skill
</li>
<li>the slow but steady adoption of scripting/dynamic language conventions in Java and .NET
</li>
</ol>
.. maybe all modern programming languages really <i>are</i> the same.
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-08-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-all-programming-languages-the-same/</guid>
</item>
</channel>
</rss>
