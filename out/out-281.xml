<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Are You Creating Micromanagement Zombies?</title>
<link>https://blog.codinghorror.com/are-you-creating-micromanagement-zombies/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Do you manage other programmers, in any capacity? Then take <a href="http://headrush.typepad.com/creating_passionate_users/2005/12/braindeath_by_m.html">Kathy Sierra's quiz</a>:
</p>
<p>
</p>
<ol>
<li>Do you pride yourself on being "on top of" the projects or your direct reports? Do you have a solid grasp of the details of every project?<br><br>
</li>
<li>Do you believe that you could perform most of the tasks of your direct reports, and potentially do a better job?<br><br>
</li>
<li>Do you pride yourself on frequent communication with your employees? Does that communication include asking them for detailed status reports and updates?<br><br>
</li>
<li>Do you believe that being a manager means that you have more knowledge and skills than your employees, and thus are better equipped to make decisions?<br><br>
</li>
<li>Do you believe that you care about things (quality, deadlines, etc.) more than your employees?
</li>
</ol>
<p>
A "yes" to any of these -- even a half-hearted "maybe" -- means <b>you might be creating Micromanagement Zombies</b>.
</p>
<p>
<a href="http://www.imdb.com/title/tt0063350/"><img alt="still from Night of the Living Dead" border="0" class="at-xid-6a0120a85dcdae970b01287770839a970c" height="374" src="https://blog.codinghorror.com/content/images/uploads/2009/01/6a0120a85dcdae970b01287770839a970c-pi.jpg" width="500"></a>
</p>
<p>
That's right, Zombies. Mindless automatons who can barely do anything except exactly what they are ordered to do, and even then, only when someone is strictly monitoring <i>what</i> they're doing and <i>how</i> they're doing it. Micromanaging the people you work with is arguably the exact opposite of what a competent team leader or manager should be spending their time doing. So if you're micromanaging at all, even the teeny tiniest little bit, step back and take a long, hard look. It's a sign of deeper problems.
</p>
<p>
Beyond that, <b>who the heck wants to work with zombies anyway?</b> Shouldn't you endeavor to work with the type of people who are good enough at their jobs that they can make sensible decisions about what they're doing? And they're not constantly <i>trying to eat your brain?</i> Well, figuratively speaking.
</p>
<p>
<img alt="want ad: Zombies Seeking Brains" border="0" class="at-xid-6a0120a85dcdae970b0128777083b6970c" height="405" src="https://blog.codinghorror.com/content/images/uploads/2009/01/6a0120a85dcdae970b0128777083b6970c-pi.png" width="450">
</p>
<p>
Building teams is like building software. It's easier to <a href="http://www.codinghorror.com/blog/archives/000889.html">describe what <i>not</i> to do</a> than it is to identify the intangibles that make good software development teams jell. But it's pretty clear that micromanagement is one of the biggest risks. In <a href="http://www.amazon.com/exec/obidos/ASIN/0932633439/codihorr-20">Peopleware</a>, DeMarco and Lister establish seven anti-patterns they dubbed <b>Teamicide</b>:
</p>
<p>
</p>
<ol>
<li>Defensive Management
</li>
<li>Bureaucracy
</li>
<li>Physical Separation
</li>
<li>Fragmentation of People's Time
</li>
<li>Quality Reduction of the Product
</li>
<li>Phony Deadlines
</li>
<li>Clique Control
</li>
</ol>
<p>
Wondering what number one encompasses? You guessed it: micromanagement.
</p>
<p>
</p>
<blockquote>
If you're the manager, of course you're going to feel that your judgment is better than that of people under you. You have more experience and perhaps a higher standard of excellence than they have; that's how you got to be the manager. At any point in the project where you don't interpose your own judgment, your people are more likely to make a mistake. So what? Let them make some mistakes. That doesn't mean you can't override a decision (very occasionally) or give specific direction to the project. But if the staff comes to believe it's not allowed to make any errors of its own, the message that you don't trust them comes through loud and clear. <b>There is no message you can send that will better inhibit team formation.</b>
<p>
Most managers give themselves excellent grades on knowing when to trust their people and when not to. But in our experience, too many managers err on the side of mistrust. They follow the basic premise that their people may operate completely autonomously, as long as they operate correctly. This amounts to no autonomy at all. The only freedom that has any meaning is the
freedom to proceed differently from the way your manager would have proceeded. This is true in a broader sense, too: The right to be right (in your manager's eyes or in your government's eyes) is irrelevant; it's only the right to be wrong that makes you free.
</p>
<p>
The most obvious defensive management ploys are <a href="http://www.codinghorror.com/blog/archives/000203.html">prescriptive Methodologies</a> ("My people are too dumb to build systems without them") and technical interference by the manager. Both are doomed to fail in the long run. In addition, they make for efficient teamicide. <b>People who feel untrusted have little inclination to bond together into a cooperative team.</b>
</p>
</blockquote>
<p>
In the end, isn't <b>trust</b> what this is about? If you don't trust the people you work with -- and most importantly, actively <i>demonstrate</i> that trust through your actions -- should you really be working with them at all?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-01-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-you-creating-micromanagement-zombies/</guid>
</item>
</channel>
</rss>
