<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Showstopper!</title>
<link>https://blog.codinghorror.com/showstopper/</link>
<content>
                <!--kg-card-begin: markdown--><p>
A friend of mine recently returned the book <a href="http://www.amazon.com/exec/obidos/ASIN/0029356717/codihorr-20">Showstopper!</a> after an extended loan. If you haven't heard of this book, allow me to quote the Amazon.com editorial summary:
</p>
<p>
</p>
<blockquote>
Showstopper! is a vivid account of the creation of Microsoft Windows NT, perhaps the most complex software project ever undertaken. It is also a portrait of David Cutler, NT's brilliant and, at times, brutally aggressive chief architect.
<p>
Cutler surely ranks as one of the most impressive software engineers the field has ever produced. After leading the team that created the VMS operating system for Digital's VAX computer line--an accomplishment that most would regard as a lifetime achievement--he went on to conceive and lead the grueling multi-year project that ultimately produced Windows NT. Both admired and feared by his team, Cutler would let nothing stand in the way of realizing his design and often clashed with his programmers, senior Microsoft management, and even Gates himself.
</p>
</blockquote>
<p>
I hadn't looked at this book since I originally read it in 1996, and I found myself casually skimming through it, eventually re-reading the entire thing. It's a critical part of Microsoft's history. Think about where Microsoft would be if the NT project, which began way back in 1988, had failed. Can you imagine running some variant of Windows 95 today?
</p>
<p>
It's also interesting to note that <b>nobody is writing new operating systems any more</b>. The world has devolved into UNIX and NT camps exclusively. Without NT, I think we'd all be running UNIX at this point, for better or worse. It certainly happened to Apple; their next-generation <a href="http://en.wikipedia.org/wiki/Copland">Copland OS</a> never even got off the ground. And now they're using <a href="http://en.wikipedia.org/wiki/Mac_OS_X">OS X</a> which is based on Unix. There are some uncanny observations in the book that foreshadow this divide:
</p>
<blockquote>
Besides, NT would still meet the goals closest to Cutler's heart: portability, reliability, and the ability to provide an alternative to Unix, the splintered high-end operating program.
<p>
The last goal was crucial to Cutler. "Unix is like Cutler's lifelong foe," said one team member who'd worked with Cutler for nearly two decades. "It's like his Moriarty [Sherlock Holmes's nemesis]. He thinks Unix is a junk operating system designed by a committee of Ph.D.s. There's never been one mind behind the whole thing, and it shows, so he's always been out to get Unix. But this is the first time he's had the chance.
</p>
</blockquote>
<p>
In many ways, the story of Windows NT is the story of <a href="http://en.wikipedia.org/wiki/Dave_Cutler">Dave Cutler</a>: he comes across as the <b>Ted Nugent anti-hero of software architects</b>. There are some very amusing anecdotes in the book about his gonzo management style:
</p>
<blockquote>
In truth, nobody worried about Rashid's etiquette. Of all people, Cutler <i>deserved</i> indelicate treatment. Other Microsoft leaders viewed him as a bully. One senior executive usually responded to a Cutler complaint with the succint statement, "Fuck Dave." When asked why, the executive excused his boorishnes with the reply, "Cutler tells me to fuck off all the time."
</blockquote>
<p>
Cutler keeps an incredibly low profile today, which is strange for an architect of his stature. You won't find many <a href="http://www.microsoft.com/windows2000/server/evaluation/news/fromms/kanoarchitect.asp&amp;e=7620">interviews</a> or articles about him. In fact, he still works at Microsoft today, and he was a key reason the 64-bit version of Windows XP even exists in the face of lackluster Intel support for 64-bit x86 extensions.
</p>
<p>
There are some interesting themes in the book that emerged after a second reading:
</p>
<ul>
<li>
<b>Eating your own dogfood.</b> I've long been a proponent of this technique. <a href="http://www.codinghorror.com/blog/archives/000287.html">Dogfooding keeps you honest</a>. NT development was perhaps the ultimate dogfood scenario: developing a new OS using the current build of that OS.
<p>
</p>
</li>
<li>
<b>The importance of R&amp;D</b>. By the time NT was truly viable on the desktop (Windows 2000), it was ten years after the initial 1989 design spec. This speaks volumes about strategic direction and R&amp;D: if large corporations aren't actively planning ten years out, they're probably not going to last very long. Nathan Myrhvold presents a document to Bill Gates on page 31 that outlines the risk of Unix, portable code, and RISC-- all "DOS killers"-- that was absolutely prophetic in hindsight.
<p>
</p>
</li>
<li>
<b>Process vs. People</b>. It's shocking how little formal process was involved in the development of NT. Microsoft didn't really manage much at all: they just chose to build the company with the smartest people they could find and let them figure it out. This may sound surprising, but it clearly worked for NT, a project of almost unimaginable complexity. More supporting data on this can be found in McConnell's <a href="http://www.stevemcconnell.com/ieeesoftware/eic14.htm">Quantifying Soft Factors</a> editorial.
<p>
</p>
</li>
<li>
<b>The importance of senior architectural oversight</b>. Cutler goes to great lengths to prevent people from optimizing for x86 in the early development of NT, despite the intense pressure to do so for performance reasons. He intuitively knew that sacrificing portability this early would cripple the future design of the OS. Although, ironically, there's nothing left but x86-- the Alpha, Mips, PPC versions of NT were all discontinued due to lack of market demand-- the NT kernel has evolved and survived, and now lives on the desktops of millions of everyday users, not just "power users".
<p>
</p>
</li>
<li>
<b>If it sounds like a bad idea, it probably is</b>.  eg, <a href="http://www.winnetmag.com/Windows/Article/ArticleID/48/48.html">Cairo</a>. This was supposed to be Jim Allchin's "vision" for next version of NT, what ultimately became NT 4.0. What the hell was Microsoft thinking? If you can't explain what you plan to do in practical, meaningful terms-- you're probably full of crap. I can certainly empathize with Dave's skepticism about Cairo, and in retrospect, he was correct. Cairo never went anywhere.
</li>
</ul>
One of the last things Dave Cutler mentions in the book resonated with me:
<blockquote>
The end of a project was always a difficult time for him. He always pushed to outdo himself, never lingering for long over his achievements and eschewing any examination of his motives and psychology. "My motivation is I like to do this stuff. I just like to do this stuff," he said. "I like to get [my code] done and see it work." Rather than monumental, his concept was Sisyphean. He dared not speculate about the benefit of his labors for society. Nor did he concern himself with his place in the history of technology. He only looked forward, abolishing the past as he went on. "This isn't the end," he said. <b>"Ten years from now we'll be designing another system, and everyone will be sitting around bemoaning that it will have to be compatible with NT. That will happen."</b>
</blockquote>
<p>
I am not so sure. Unix is 30 years old and would unquestionably rule today's desktop if not for the existence of NT. Is it unreasonable to expect the NT kernel to last as long? In fact, I think it's possible we may not see another "from the ground up" OS developed in our lifetimes.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-08-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/showstopper/</guid>
</item>
</channel>
</rss>
