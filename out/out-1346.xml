<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Why Objects Suck, Revisited</title>
<link>https://blog.codinghorror.com/why-objects-suck-revisited/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I recently blogged about how <a href="http://www.codinghorror.com/blog/archives/000033.html">pure object oriented programming is oversold</a>. Well, evidently <a href="http://www.paulgraham.com/noop.html">Paul Graham agrees with me</a>:
</p>
<blockquote>
Object-oriented programming generates a lot of what looks like work. Back in the days of fanfold, there was a type of programmer who would only put five or ten lines of code on a page, preceded by twenty lines of elaborately formatted comments. Object-oriented programming is like crack for these people: it lets you incorporate all this scaffolding right into your source code. Something that a Lisp hacker might handle by pushing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself, or someone else, that you are doing a lot of work.
</blockquote>
I've found that <b>a little object orientation goes a long way</b>. Pushing too far into "everything must be an object" territory leads to, well, exactly what Paul describes above-- giant masses of repetitive code that someone is going to have to maintain. I like to err on the side of simplicity, and that typically means the approach that produces the least volume of source code.
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-09-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-objects-suck-revisited/</guid>
</item>
</channel>
</rss>
