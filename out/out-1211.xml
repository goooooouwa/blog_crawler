<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>To Compile or Not To Compile</title>
<link>https://blog.codinghorror.com/to-compile-or-not-to-compile/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I am currently in the middle of a way-overdue refactoring of <a href="http://www.codeproject.com/vb/net/MhtBuilder.asp">MhtBuilder</a>, which uses <a href="http://www.codinghorror.com/blog/archives/000027.html">regular expressions</a> extensively. I noticed that I had sort of mindlessly added <code>RegexOptions.Compiled</code> all over the place. It says "compiled" so it must be faster, right? Well, like so many other things, <a href="http://blogs.msdn.com/bclteam/archive/2004/11/12/256783.aspx">that depends</a>:
</p>
<p>
</p>
<blockquote><i>
In [the case of RegexOptions.Compiled], we first do the work to parse into opcodes.  Then we also do more work to turn those opcodes into actual IL using Reflection.Emit. As you can imagine, this mode trades increased startup time for quicker runtime: in practice, <b>compilation takes about an order of magnitude longer to startup, but yields 30% better runtime performance.</b>  There are even more costs for compilation that should mentioned, however.  Emitting IL with Reflection.Emit loads a lot of code and uses a lot of memory, and that's not memory that you'll ever get back.  In addition. in v1.0 and v1.1, we couldn't ever free the IL we generated, meaning you leaked memory by using this mode.  We've fixed that problem in Whidbey.  But the bottom line is that <b>you should only use this mode for a finite set of expressions which you know will be used repeatedly. </b>
</i></blockquote>
<p>
In other words, this is something you <i>don't</i> want to do casually, as I was. And 30% faster isn't a very compelling performance gain to balance against those serious tradeoffs. Unless you're in a giant loop, or processing humongous strings, it's almost never worth it. The <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconcompilationreuse.asp">MSDN documentation</a> also has this interesting tidbit:
</p>
<p>
</p>
<blockquote><i>
To improve performance, <b>the regular expression engine caches all regular expressions in memory.</b> This avoids the need to reparse an expression into high-level byte code each time it is used.
</i></blockquote>
<p>
The second time you build your non-compiled regex, no additional interpreting overhead is incurred. And you get that for free. Even though it sounds faster and all, you probably don't want to use <code>RegexOptions.Compiled</code>. But what about <code>Regex.CompileToAssembly</code>?
</p>
<p>
This avoid the pitfalls associated with dynamic compilation by turning your regular expressions into a compiled DLL. There aren't many articles describing how to do this, but <a href="http://sqljunkies.com/WebLog/ktegels/archive/2004/03/03/1412.aspx">Kent Tegels</a> dug up a few Regex articles with sample code showing how to take advantage of <code>Regex.CompileToAssembly</code>:
</p>
<ul>
<li>
<a href="http://www.informit.com/articles/article.asp?p=27313&amp;seqNum=6">Programming with Regular Expressions in C#</a>
</li>
<li>
<a href="http://www.ondotnet.com/pub/a/dotnet/2002/03/11/regex2.html">C# Regular Expressions, Revisited</a>
</li>
</ul>
<p>
It seems ideal-- all the advantages of compilation with none of the disadvantages-- but it adds one disadvantage of its own: your regular expressions are now <b>written in stone</b>. You can't change them at runtime, and you have to know what you're going to do entirely up front. This might be a worthwhile tradeoff at the end of a large project that uses regular expressions extensively, but still.. <i>only 30% faster?</i> I'd want some actual benchmark numbers from my application before I could justify the loss of flexibility and the additional file dependency.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-03-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/to-compile-or-not-to-compile/</guid>
</item>
</channel>
</rss>
