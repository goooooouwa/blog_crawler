<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Better Image Resizing</title>
<link>https://blog.codinghorror.com/better-image-resizing/</link>
<content>
                <!--kg-card-begin: markdown--><p>In a previous post, I <a href="http://www.codinghorror.com/blog/archives/000367.html">examined the difference between bilinear and bicubic image resizing techniques</a>. Those are the two options available in most graphics programs for resizing an image.</p>
<p><img class="at-xid-6a0120a85dcdae970b0120a86d9786970b" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b0120a86d9786970b-pi.png" border="0" alt="image resizing options" width="334" height="164"></p>
<p>After some experimentation, I came up with these rules of thumb:</p>
<ul>
<li>When making an image <strong>smaller, use bicubic</strong>, which has a natural <em>sharpening</em> effect. You want to emphasize the data that remains in the new, smaller image after discarding all that extra detail from the original image. </li>
<li>When making an image <strong>larger, use bilinear</strong>, which has a natural <em>smoothing</em> effect. You want to blend over the interpolated fake detail in the new, larger image that never existed in the original image. </li>
</ul>
<p>Of course, there are plenty of conditions that might make you want to choose one method over the other, but I think these are reasonable guidelines to start with.</p>
<p>What I didn't realize when I wrote the original article is that <strong>there are other, more advanced resizing algorithms available</strong>.  Some are specific to particular kinds of images, such as the <a href="http://en.wikipedia.org/wiki/2xSaI">2xSAI</a> algorithm which works on pixel art. Compare this shot of <a href="http://www.codinghorror.com/blog/images/mario_wario_pixel.gif">Mario vs. Wario using pixel resizing</a>, and <a href="http://www.codinghorror.com/blog/images/mario_wario_2xsal.png">the same shot using 2xSAI resizing</a>. It's a dramatic difference, especially since traditional bilinear and bicubic upsizing methods degenerate into a giant blur on pixel art.</p>
<p>Supposedly, one of the best image resizing algorithms on the market is <a href="http://www.ononesoftware.com/detail.php?prodLine_id=2">Genuine Fractals</a>. The web site boasts that you can use its <strong>fractal-based resizing algorithm</strong> to <em>"enlarge your images over 1000% with no loss in image quality"</em>. It's probably pure marketing hyperbole, but I was still intrigued. Bilinear and Bicubic are decent, but there has to be room for improvement in there somewhere. I downloaded a trial version of the tool (which requires Photoshop Elements, or Photoshop CS) and gave it a shot.</p>
<p>I took the <a href="http://en.wikipedia.org/wiki/Lenna">the reference Lena image</a> and blew it up 500%.</p>
<p>Here's a closeup of the results using <strong>Bicubic Sharper</strong>:</p>
<p><img class="at-xid-6a0120a85dcdae970b0120a86d97b3970b" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b0120a86d97b3970b-pi.jpg" border="0" alt="Lena 512 color reference image, bicubic sharp 5x resize" width="683" height="373"></p>
<p>Here's the same closeup using <strong>Genuine Fractals</strong>:</p>
<p><img class="at-xid-6a0120a85dcdae970b0120a86d97f0970b" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b0120a86d97f0970b-pi.jpg" border="0" alt="Lena 512 color reference image, fractal 5x resize" width="694" height="377"></p>
<p>Bicubic wouldn't normally be my choice here, but I chose it because it's technically the most advanced method, and it produces the results closest to the effect that the fractal resizing delivers. Still, <strong>the fractal algorithm comes out way ahead</strong>; you can't see any pixel resize artifacts in the enlarged image, and the edges are sharp and well defined. It does start to bear an unfortunate resemblance to a watercolor drawing filter, but arbitrarily resizing images to 5 times their original size will always involve tradeoffs of some kind.</p>
<p>Bicubic and bilinear are well understood image resizing algorithms, and they're "good enough" for most image resizing chores. That's why they are provided out of the box in almost all graphics applications and graphics libraries. There's an <a href="http://www.codeproject.com/csharp/imgresizoutperfgdiplus.asp">outstanding article on CodeProject</a> which digs into advanced image resizing algorithms with actual C# code for some spline and fractal resizing algorithms. But before you begin resizing images, consider whether you <em>need</em> those advanced algorithms.</p>
<p><strong>Reducing images</strong> is a completely safe and rational operation. You're simply reducing precision and resolution by discarding information. Make the image as small as you want, and you have complete fidelity-- within the bounds of the number of pixels you've allowed. You'll get good results no matter which algorithm you pick. (Well, unless you pick the naive Pixel Resize or Nearest Neighbor algorithms.)</p>
<p><strong>Enlarging images</strong> is risky. Beyond a certain point, enlarging images is a fool's errand; you can't magically synthesize an infinite number of new pixels out of thin air. And interpolated pixels are never as good as real pixels. That's why it's more than a little artificial to upsize the 512x512 Lena image by 500%. It'd be smarter to find a higher resolution scan or picture of whatever you need* than it would be to upsize it in software.</p>
<p>But <strong>when you can't avoid enlarging an image</strong>, that's when it pays to know the tradeoffs between bicubic, bilinear, and more advanced resizing algorithms. At least arm yourself with enough knowledge to pick the best of the bad options you have.</p>
<p>* e.g., if I really needed the Lena image that large, I'm better off hunting down old copies of Playboy and scanning them myself. Or at least that's what I tell my wife...</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-07-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/better-image-resizing/</guid>
</item>
</channel>
</rss>
