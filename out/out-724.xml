<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>CPU vs. GPU</title>
<link>https://blog.codinghorror.com/cpu-vs-gpu/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Intel's latest quad-core CPU, the <a href="http://www.anandtech.com/cpuchipsets/showdoc.aspx?i=2866">Core 2 Extreme QX6700</a>, consists of <b>582 million transistors</b>. That's a lot. But it pales in comparison to the <b>680 million transistors</b> of nVidia's latest video card, the <a href="http://www.anandtech.com/video/showdoc.aspx?i=2870&amp;p=1">8800 GTX</a>. Here's a small chart of transistor counts for recent <a href="http://en.wikipedia.org/wiki/Central_processing_unit">CPUs</a> and <a href="http://en.wikipedia.org/wiki/Graphics_processing_unit">GPUs</a>:
</p>
<p>
</p>
<table width="400">
<tr>
<td>AMD Athlon 64 X2</td>
<td>CPU</td>
<td>154 m
</td>
</tr>
<tr>
<td>Intel Core 2 Duo</td>
<td>CPU</td>
<td>291 m
</td>
</tr>
<tr>
<td>Intel Pentium D 900</td>
<td>CPU</td>
<td>376 m
</td>
</tr>
<tr>
<td>ATI X1950 XTX</td>
<td><font color="red">GPU</font></td>
<td>384 m
</td>
</tr>
<tr>
<td>Intel Core 2 Quad</td>
<td>CPU</td>
<td>582 m
</td>
</tr>
<tr>
<td>NVIDIA G8800 GTX</td>
<td><font color="red">GPU</font></td>
<td>680 m
</td>
</tr>
</table>
<p>
ATI won't release a new video card until next year. But their current <a href="http://www.anandtech.com/video/showdoc.aspx?i=2821">X1950 XTX</a> isn't exactly chopped liver: 384 million transistors is more than any current dual-core CPU.
</p>
<p>
Of course, comparing GPUs to CPUs isn't an apples-to-apples comparison. The clock rates are lower, the architectures are radically different, and the problems they're trying to solve are almost completely unrelated. But <b>GPUs now exceed the complexity of modern CPUs in terms of absolute transistor count.</b> And like CPUs, they're becoming programmable-- it's possible to harness all that graphics power to do something other than graphics.
</p>
<p>
There's a nice <a href="http://techreport.com/etc/2006q4/gpu-folding/index.x?pg=1">overview on AnandTech</a> which provides some background on this architectural sea change in video cards:
</p>
<p>
</p>
<blockquote>
So far, the only types of programs that have effectively tapped GPU power-- other than the obvious applications and games requiring 3D rendering-- have also been video related: video decoders, encoders, video effect processors, and so forth. But there are many non-video tasks that are floating-point intensive, and these programs have been unable to harness the power of the GPU.
<p>
Meanwhile, the academic world has designed and utilized custom-built floating-point research hardware for years. These devices are known as <b>stream processors</b>. Stream processors are extremely powerful floating-point processors able to process whole blocks of data at once, whereas CPUs carry out only a handful of numerical operations at a time. We've seen CPUs implement some stream processing with instruction sets like SSE and 3DNow!, but these efforts pale in comparison to what custom hardware has been able to do.
</p>
<p>
3D rendering is also a streaming task. Modern GPUs have evolved into stream processors, sharing much in common with the customized hardware of researchers. GPU designers have cut corners where they don't need certain functionality for 3D rendering, but they have ultimately developed extremely fast and flexible stream processors. Modern GPUs are just as fast as custom hardware, but due to economies of scale are many, many times cheaper than custom hardware.
</p>
</blockquote>
<p>
<b>Dedicated, task-specific hardware is orders of magnitude faster than what you can achieve with a general purpose CPU.</b> If you need proof of this, just look at the <a href="http://www.codinghorror.com/blog/archives/000701.html">chess benchmarks</a>. <a href="http://en.wikipedia.org/wiki/Deep_Blue">IBM's Deep Blue</a> was capable of evaluating 200 million chess moves per second in 1997. Ten years later, the fastest quad-core desktop system can only evaluate <a href="http://www.chessbase.com/newsdetail.asp?newsid=3504">8 million chess moves per second</a>. Ten year old custom hardware is still 25 times faster than the best general purpose CPUs. Amazing.
</p>
<p>
The most high profile application for all this GPU power at the moment is Stanford's <a href="http://folding.stanford.edu/">Folding@Home</a>. There's no shortage of <a href="http://ir.ati.com/phoenix.zhtml?c=105421&amp;p=irol-newsArticle&amp;ID=910520&amp;highlight=">exciting PR</a> on this topic:
</p>
<p>
</p>
<blockquote>
The processing power of just 5,000 ATI processors is also enough to rival that of the existing 200,000 computers currently involved in the Folding@home project; and it is estimated that if a mere 10,000 computers were to each use an ATI processor to conduct folding research, that the Folding@home program would effectively perform faster than the fastest supercomputer in existence today, surpassing the 1 petaFLOP level.
</blockquote>
<p>
Stanford recently introduced a <a href="http://folding.stanford.edu/FAQ-highperformance.html">high performance folding client</a> which runs on ATI's X1800 and X1900 series video cards. TechReport <a href="http://techreport.com/etc/2006q4/gpu-folding/index.x?pg=1">tested the new high performance folding client</a> and came away a little disappointed:
</p>
<p>
</p>
<blockquote>
Over five days, our Radeon X1900 XTX crunched eight work units for a total or 2,640 points. During the same period, our single Opteron 180 core chewed its way through six smaller work units for a score of 899 -- just about one third the point production of the Radeon. However, had we been running the CPU client on both of our system's cores, the point output should have been closer to 1800, putting the Radeon ahead by less than 50%.
</blockquote>
<p>
The GPU may be doing 20 to 40 times more work, but the scores are calibrated to a baseline system, not the absolute amount of work that's done. It's a little anticlimactic.
</p>
<p>
Stanford's advanced folding client exploits the <a href="http://graphics.stanford.edu/projects/brookgpu/lang.html">Brook Language</a>, an extension to ANSI C that allows them to compile C-like code that runs on the GPU. It leverages <a href="http://techreport.com/etc/2006q4/stream-computing/index.x?pg=1">ATI's Stream</a> API to communicate with the GPU. NVIDIA offers something similar to Brook in their <a href="http://developer.nvidia.com/object/cuda.html">CUDA technology</a>:
</p>
<p>
</p>
<blockquote>
GPU computing with CUDA technology is an innovative combination of computing features in next generation NVIDIA GPUs that are accessed through a standard C language.  Where previous generation GPUs were based on "streaming shader programs", CUDA programmers use C to create programs called threads that are similar to multi-threading programs on traditional CPUs.  In contrast to multi-core CPUs, where only a few threads execute at the same time, NVIDIA GPUs featuring CUDA technology process thousands of threads simultaneously enabling a higher capacity of information flow.
</blockquote>
<p>
Of course, CUDA only works on the latest G80 series of cards, just like the ATI's Stream technology is really only useful on their latest X1900 series. All this potential programmability is a very recent development.
</p>
<p>
I expect the relationship between CPU and GPU to largely be a symbiotic one: they're good at different things. <b>But I also expect quite a few computing problems to make the jump from CPU to GPU in the next 5 years</b>. The potential order-of-magnitude performance improvements are just too large to ignore.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-11-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/cpu-vs-gpu/</guid>
</item>
</channel>
</rss>
