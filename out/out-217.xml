<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Girl Who Proved P = NP</title>
<link>https://blog.codinghorror.com/the-girl-who-proved-p-np/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One of my all time favorite blog entries is a truly epic tale of dating gone wrong that culminates in <a href="http://www.joeydevilla.com/2003/04/07/what-happened-to-me-and-the-new-girl-or-the-girl-who-cried-webmaster/">the strangest reference to P=NP you'll probably ever encounter</a>.
</p>
<p>
</p>
<blockquote>
<b>Joey</b>: So you really did graduate from computer engineering?
<p>
<b>New Girl</b>: Yes I did, from UBC!
</p>
<p>
<b>Joey</b>: And you took the "Algorithms" course?
</p>
<p>
<b>New Girl</b>: Of course!
</p>
<p>
<b>Joey</b>: And you have all the papers you wrote?
</p>
<p>
<b>New Girl</b>: <i>Yes!</i> I kept them all, and I'll show them to you tomorrow!
</p>
<p>
<b>Joey</b>: I want to see the one we always called the "Hell Paper" at Queen's -- the mandatory fourth-year paper. You know the one, where we prove P = NP?
</p>
<p>
<b>New Girl</b>: <font color="maroon">I did that! I proved P = NP!</font> I placed near the top of the class, and the professor used my paper as an example!
</p>
<p>
<b>Joey</b>: You proved P = NP?
</p>
<p>
<b>New Girl</b>: Yes!
</p>
<p>
<b>Joey</b>: Gotcha.
</p>
</blockquote>
<p>
Poor Joey. Dating crazy people is one thing, but dating crazy people who <i>claim to have proved P=NP</i> is another matter entirely. I know, I know, <a href="http://www.codinghorror.com/blog/archives/001187.html">my track record with P=NP</a> is hardly any better. But at least you're not dating me, right?
</p>
<p>
NP completeness is <a href="http://www.claymath.org/millennium/P_vs_NP/">one of the great unsolved mysteries in computer science</a>; perhaps the best way to illustrate is through <a href="http://xkcd.com/287/">this xkcd cartoon</a>:
</p>
<p>
<img alt="np_complete.png" class="at-xid-6a0120a85dcdae970b012877709395970c" height="340" src="https://blog.codinghorror.com/content/images/uploads/2009/06/6a0120a85dcdae970b012877709395970c-pi.png" width="640">
</p>
<p>
The defining characteristic of an NP-complete problem is that optimal solutions, using math and logic as we currently understand them, are effectively impossible. Sure, you can <a href="http://www.codinghorror.com/blog/archives/001187.html">approximate a solution</a>, but an <i>optimal</i> solution requires so many calculations as to be infeasible, even with computers that operated at, say .. the speed of light.
</p>
<p>
</p>
<blockquote>
In fact, one of the outstanding problems in computer science is determining whether questions exist whose answer can be quickly checked, but which require an impossibly long time to solve by any direct procedure. Problems like the one listed above certainly seem to be of this kind, but so far no one has managed to prove that any of them really are so hard as they appear, <b>i.e., that there really is no feasible way to generate an answer with the help of a computer.</b>
</blockquote>
<p>
It's doubtful <a href="http://www.cs.umd.edu/~gasarch/papers/poll.pdf">whether anyone will ever prove that P=NP</a> (pdf), but in the meantime it's useful to <a href="http://max.cs.kzoo.edu/~kschultz/CS510/ClassPresentations/NPCartoons.html">recognize problems that are NP complete</a>:
</p>
<p>
</p>
<blockquote>
Unfortunately, proving inherent intractibility can be just as hard as finding efficient algorithms.
<p>
The theory of NP-completeness provides many straightforward techniques for proving that a given problem is "just as hard" as a large number of other problems that are widely recognize as being difficult and that have been confounding the experts for years. Armed with these techniques, you might be able to prove that the bandersnatch problem is NP-complete and march into your boss's office and announce:
</p>
<p>
<img alt="np-complete-cartoon.png" class="at-xid-6a0120a85dcdae970b0128777093b5970c" height="224" src="https://blog.codinghorror.com/content/images/uploads/2009/06/6a0120a85dcdae970b0128777093b5970c-pi.png" width="352">
</p>
<p>
<i>I can't find an efficient algorithm, but neither can all these famous people.</i>
</p>
<p>
At the very least, this would inform your boss that it would do no good to fire you and hire another expert on algorithms.
</p>
<p>
Now you can spend your time looking for efficient algorithms that solve various special cases of the general problem. You might look for algorithms that, though not guaranteed to run quickly, seem likely to do so most of the time. Or you might even relax the problem somewhat, looking for a fast algorithm that merely finds designs that meet most of the component specifications. Thus, the primary application of the theory of NP-completeness is to assist algorithm designers in directing their problem-solving efforts toward those approaches that have the greatest likelihood of leading to useful algorithms.
</p>
</blockquote>
<p>
As with so many things in programming, <b>the first step is learning enough to know when you're <i>really</i> screwed</b>.
</p>
<p>
Unfortunately for poor Joey, this sad corollary to NP-completeness apparently applies to dating, too.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-06-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-girl-who-proved-p-np/</guid>
</item>
</channel>
</rss>
