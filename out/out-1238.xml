<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The He-Man Pattern Haters Club</title>
<link>https://blog.codinghorror.com/the-he-man-pattern-haters-club/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Richard Mansfield has <a href="http://www.devx.com/opinion/Article/26776/0/page/1">a bone to pick with object oriented programming</a>:
</p>
<p>
</p>
<blockquote><i>
Certainly for the great majority of programmers -- amateurs working alone to create programs such as a quick sales tax utility for a small business or a geography quiz for Junior -- the machinery of OOP is almost always far more trouble than it's worth. <b>OOP introduces an unnecessary layer of complexity to procedure-oriented design</b>. That's why very few programming books I've read use OOP techniques in their code examples. The examples are written as functions, not as methods within objects. Programming books are trying to teach programming -- not the primarily clerical and taxonomic essence of OOP. Those few books that do superimpose the OOP mechanisms on their code are, not surprisingly, teaching about the mysteries of OOP itself.
</i></blockquote>
<p>
I am skeptical of <a href="http://www.codinghorror.com/blog/archives/000092.html">dogmatic adherence to OOP</a> myself, but even I did a double-take while reading this article. Is it a parody? I don't think so, considering he cites <a href="http://www.geocities.com/tablizer/oopbad.htm">an entire website</a> devoted to this subject.* But before (or at least until) you write Mr. Mansfield off as a kook, consider his background:
</p>
<p>
</p>
<blockquote><i>
Richard Mansfield has written 32 computer books since 1982, including bestsellers 'Machine Language for Beginners' (COMPUTE! Books) and 'The Second Book of Machine Language' (COMPUTE! Books). From 1981 through 1987, he was editor of COMPUTE! Magazine and from 1987 to 1991 he was editorial director and partner at Signal Research.
</i></blockquote>
<p>
This is a guy who has written a lot of code. While his opinion veers awfully close to religion, I wouldn't disregard it altogether. Too many people accept patterns as gospel, so I think a little counter-programming is healthy.
</p>
<p>
On the other hand, if you think the <a href="http://c2.com/cgi/wiki?GangOfFour">Gang of Four</a> is as cool as, well, the <a href="http://www.gillmusic.com/go4_history.html">Gang of Four</a>, then you may be interested in this <a href="http://www.devx.com/DevX/Article/26782">retrospective on Design Patterns</a>, with comments from a variety of developers.
</p>
<p>
</p>
<blockquote><i>
Ten years have passed since Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (aka the Gang of Four or GoF) wrote and published <a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/codihorr-20">Design Patterns: Elements of Reusable Object-Oriented Software</a>. And while most programming books that old are as pass as the technologies they covered or required second and third editions along the way, the GoF's seminal work still flies off bookshelves, despite being the same text that debuted in the fall of 1994 -- an eon ago in Internet time.
</i></blockquote>
<p>
One interesting fact: the most commonly cited patterns were <a href="http://c2.com/cgi/wiki?SingletonPattern">Singleton</a>, <a href="http://c2.com/cgi/wiki?AbstractFactoryPattern">Factory</a>, <a href="http://c2.com/cgi/wiki?ObserverPattern">Observer</a>, and <a href="http://c2.com/cgi/wiki?CommandPattern">Command</a>.
</p>
<p>
I'm currently reading <a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/codihorr-20">Head First Design Patterns</a>, which is basically Design Patterns for Dummies. It's a good read. But I still feel patterns are more useful as a common design vocabulary than as actual implementation models. It's kind of damning that <b>even the radically simplified pattern examples in the book are far more complicated than they need to be</b>. Would I really design a point of sale system that used the Decorator pattern to represent coffee pricing? I think I'd use a simple relational database table and some procedural code. If I needed to add a topping, I'd simply add a record to the table-- no complex objects or inheritance models required.
</p>
<p>
* As <a href="http://damienkatz.net/">Damien Katz</a> points out, this is the website of a "a megalomaniac nut named Bryce Jacobs", not the article's author.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-he-man-pattern-haters-club/</guid>
</item>
</channel>
</rss>
