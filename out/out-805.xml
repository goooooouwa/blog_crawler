<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>A Spec-tacular Failure</title>
<link>https://blog.codinghorror.com/a-spec-tacular-failure/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I've written before about <a href="http://www.codinghorror.com/blog/archives/000448.html">the dubious value of functional specifications</a>. If you want to experience the dubious value of specifications first hand, try writing a tool to read and write <a href="http://www.id3.org/">ID3 tags</a>.
</p>
<p>
ID3 tags describe the metadata for an MP3 file, such as Artist, Album, Track, and so forth. ID3 tags certainly don't <i>look</i> all that complicated. Newer versions appear at the beginning of the MP3 file, and are nearly human readable even in a hex editor:
</p>
<p>
<img alt="ID3 tag displayed in a hex editor" border="0" class="at-xid-6a0120a85dcdae970b0128776fdd03970c" height="291" src="https://blog.codinghorror.com/content/images/uploads/2006/08/6a0120a85dcdae970b0128776fdd03970c-pi.png" width="648">
</p>
<p>
There's a set of <a href="http://www.id3.org/develop.html">comprehensive ID3 specifications</a> to help us out. <b>Unfortunately the ID3 specs are, in a word, <i>bad</i></b>.
</p>
<p>
Even with a bad spec, you can write code to parse ID3 tags. There are a number of <a href="http://www.codeproject.com/info/search.asp?searchkw=id3">CodeProject articles that read and write ID3 tags</a> with varying levels of success. There's also a mature .NET ID3 library available, <a href="http://home.fuse.net/honnert/hundred/?UltraID3Lib">UltraID3Lib</a>, but unfortunately it's closed source. It also suffers a little from <a href="http://www.codinghorror.com/blog/archives/000380.html">explosion at the pattern factory</a> design.
</p>
<p>
One of the first big warning signs is <a href="http://home.fuse.net/honnert/hundred/?UltraID3Lib">this list of ID3 "offenders"</a> on the UltraID3Lib site. It reads like a who's who of music applications: iTunes, WinAmp, Windows Media Player. <b>If the applications that ship with the operating system can't get ID3 tags right, clearly something is wrong.</b>
</p>
<p>
And that something is <a href="http://www.id3.org/develop.html">the ID3 spec</a>. How does it suck? Let me count the ways:
</p>
<p>
</p>
<ul>
<li>
<b>The spec shows how but rarely explains why.</b> For example, frame sizes are stored as 4-byte "syncsafe integers" where the 8th bit of every byte is zeroed. Why would you store size in such an annoying, unintuitive format? Who knows; the spec doesn't explain. You just grit your teeth and do it.
<p>
</p>
</li>
<li>
<b>The vast majority of the things described in the spec do not appear in any MP3 files that I can find or create.</b> There are 70+ possible frame types, but I've only seen a dozen or so in practice. And what about encryption? Compression? CRC checks? Footers? Extended headers? Never seen 'em. And I probably never will. But I still have to parse through pages and pages of detailed text about these extremely rare features.
<p>
</p>
</li>
<li>
<b>The spec has ridiculous enumerations.</b> Check out <a href="http://lame.sourceforge.net/doc/html/id3.html">the 147 possible values of the music genre byte</a>. The existing 147 categories seem to be chosen completely at random. For example, "Negerpunk" (133), "Christian Rap" (61), and "Native US" (64). And evidently "Primus" (108) isn't just a band, they're a valid music genre, too. iTunes thankfully puts a stop to this madness by only displaying a fraction of these genres in its genre drop-down. And it isn't just the genre tag; one of the possible picture types for the attached picture tag  "APIC" is-- and I swear I'm not making this up-- "A bright coloured fish" ($11). At some point you feel like you're wasting your time by enumerating insanity.
<p>
</p>
</li>
<li>
<b>No examples are provided</b>. Consider the comment frame. This is a relatively complex frame; it supports multiple languages and different encodings. It also supports multiple comments per frame with descriptive labels for each one. And yet it only merits a paragraph in the <a href="http://www.id3.org/id3v2.4.0-frames.txt">frames specification</a>, with no examples of usage whatsoever. Would it kill them to provide a couple examples of how a comment should actually look?
<p>
</p>
</li>
<li>
<b>Related items are not together.</b> The comment frame has two lookups in its header: language and text encoding. There is absolutely no reference at all to these lookup tables in the comment frame description. You have to "just know" that the main ID3 spec defines all languages with three character ISO-639-2 language codes, and that there are four possible text encodings from 00 to 03, with different rules for null termination. It'd be awfully difficult to write a comment tag reader without this information, yet it's nowhere to be found in the description of the comment tag.
</li>
</ul>
<p>
The ID3 spec is doubly frustrating because it makes a simple topic difficult. <b>ID3 tags are just not that complicated</b>. The spec makes me feel like an idiot for not being able to get this stuff right. <i>What's the matter? Can't you read the spec?</i>
</p>
<p>
No. I can't. And evidently, neither could the developers of WinAmp, iTunes, or Windows Media Player.
</p>
<p>
Since the ID3 spec is so deficient, <b>I've been using the behavior of popular applications as a de-facto spec</b>. In other words, I test to see how WinAmp behaves when editing ID3 tags:
</p>
<p>
<img alt="WinAmp file info dialog" border="0" class="at-xid-6a0120a85dcdae970b0128776fdd21970c" height="423" src="https://blog.codinghorror.com/content/images/uploads/2006/08/6a0120a85dcdae970b0128776fdd21970c-pi.png" width="579">
</p>
<p>
WinAmp isn't a model ID3 tag citizen. It ignores all comments except for the first one, and it adds garbage text as the language string for comments.
</p>
<p>
I also test to see how iTunes behaves when editing ID3 tags:
</p>
<p>
<img alt="iTunes file info dialog" border="0" class="at-xid-6a0120a85dcdae970b0128776fdd41970c" height="434" src="https://blog.codinghorror.com/content/images/uploads/2006/08/6a0120a85dcdae970b0128776fdd41970c-pi.png" width="533">
</p>
<p>
Although iTunes reads all versions of ID3 tags, it <a href="http://the.taoofmac.com/space/blog/2003-09-02">still writes ancient v2.2 ID3 tags to MP3 files</a>, even in the latest version. So it's an especially poor role model for tagging.
</p>
<p>
Warts and all, <b>the practical implementations of ID3 tags in popular applications like WinAmp and iTunes trump anything that's written in the formal ID3 spec.</b> I finally understand what <a href="http://kerneltrap.org/node/5725">Linus Torvalds was complaining about</a>:
</p>
<p>
</p>
<blockquote>
A "spec" is close to useless. I have never seen a spec that was both big enough to be useful and accurate. And I have seen lots of total crap work that was based on specs. It's the single worst way to write software, because it by definition means that the software was written to match theory, not reality.
</blockquote>
<p>
Specs, if they're well-written, can be useful. But they probably won't be. <b>The best functional spec you'll ever have is the behavior of real applications.</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-08-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-spec-tacular-failure/</guid>
</item>
</channel>
</rss>
