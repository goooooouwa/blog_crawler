<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>What Can You Build in 600 Lines of Code?</title>
<link>https://blog.codinghorror.com/what-can-you-build-in-600-lines-of-code/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Joseph Cooney reminds us that, in January 2005, <a href="http://jcooney.net/archive/2007/08/16/54435.aspx">37signals went live with a product they built in 579 lines of code</a>:
</p>
<p>
</p>
<blockquote>
You read that right, not 60,000 or 600,000 but instead <b>a commercial project written in less than 600 lines of Ruby code</b>. When I first saw this number I was incredulous -- I've written stored procedures that are longer than that. My current project has more lines of configuration than that. I've even written console apps in notepad, and compiled from the command line with more lines than that, because I thought they were so small they didn't need a whole .sln and .proj file, and yet here is <a href="http://www.37signals.com/svn/archives/001021.php">37signals going live</a> with a <a href="http://www.tadalist.com/">product</a> that is just 579 lines of Ruby.
</blockquote>
<p>
As <a href="http://weblog.rubyonrails.com/2005/01/21/matz-takes-note-of-ta-da-and-rails/">noted in the Rails blog</a>, the original product launch was covered on Ruby language creator <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Matz'</a> blog in his native Japanese. Surprisingly, the relevant facts are still readable:
</p>
<p>
<a href="http://www.rubyist.net/~matz/20050120.html#c"><img alt="matz makes notes of ta-da list and Rails" border="0" class="at-xid-6a0120a85dcdae970b01287770337a970c" height="205" src="https://blog.codinghorror.com/content/images/uploads/2008/01/6a0120a85dcdae970b01287770337a970c-pi.png" width="467"></a>
</p>
<p>
Of course, a simple lines of code number isn't the entire story-- they actually built the entire Rails framework first to support building small apps like <a href="http://www.tadalist.com/">ta-da list</a>. None of the required Rails framework code, nor any of the the necessary stylesheets, JavaScript, HTML, and so forth, are included in that number. Still, I agree with Joseph: it's an impressive achievement, and it can lead to some interesting thought experiments:
</p>
<p>
</p>
<blockquote>
I have a few interesting product ideas from time to time. What is the absolute minimum amount of code I could write that would make those ideas work? If I'm prepared to operate within the constraints of the platform (whatever that is) how much effort would that save me? How many more "interesting ideas" could I turn into working products if I was prepared to follow these constraints? How many more cool/useful things could you build if you promised yourself that each one would only be 600 lines of code?
</blockquote>
<p>
<b>What can <i>you</i> build in 600 lines of code?</b> Think of it as an exercise in minimalism. Does your preferred language or environment allow you the freedom to create something interesting and useful with that constraint in place?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-01-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/what-can-you-build-in-600-lines-of-code/</guid>
</item>
</channel>
</rss>
