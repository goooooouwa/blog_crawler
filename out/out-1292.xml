<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Custom AssemblyInfo Attributes</title>
<link>https://blog.codinghorror.com/custom-assemblyinfo-attributes/</link>
<content>
                <!--kg-card-begin: markdown--><p>
To complement my previous post bemoaning the <a href="http://www.codinghorror.com/blog/archives/000141.html">lack of respect for AssemblyInfo</a>,  I wanted to illustrate just how easy it is to add a few <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconwritingcustomattributes.asp">custom attributes</a> to our AssemblyInfo file:
</p>
<p>
</p>
<pre language="vb" name="code">
Imports System
Imports System.Reflection
&lt;Assembly: AssemblyTitle("ASPUnhandledException")&gt;
&lt;Assembly: AssemblyDescription("ASP.NET unhandled exception handling library")&gt;
&lt;Assembly: AssemblyCompany("Atwood Heavy Industries")&gt;
<span style="color:red;">&lt;Assembly: AssemblyCompanyEmail("jatwood@atwoodheavyindustries.com")&gt;
&lt;Assembly: AssemblyCompanyUrl("http://www.atwoodheavyindustries.com")&gt;</span>
&lt;Assembly: AssemblyProduct("Exception Handling Framework")&gt;
&lt;Assembly: AssemblyCopyright(" 2004, Atwood Heavy Industries")&gt;
&lt;Assembly: AssemblyTrademark("All Rights Reserved")&gt;
&lt;Assembly: CLSCompliant(True)&gt;
&lt;Assembly: AssemblyVersion("2.1.*")&gt; </pre>
<p>
To get the custom attributes <b>AssemblyCompanyUrl</b> and <b>AssemblyCompanyEmail</b> working, just add these two classes to your solution:
</p>
<p>
</p>
<pre language="vb" name="code">
&lt;AttributeUsage(AttributeTargets.Assembly)&gt; _
Public Class <b>AssemblyCompanyEmailAttribute</b>
Inherits System.Attribute
Private _strCompanyEmail As String
Public Sub New(ByVal email As String)
_strCompanyEmail = email
End Sub
Public Overridable ReadOnly Property CompanyEmail() As String
Get
Return _strCompanyEmail
End Get
End Property
End Class
&lt;AttributeUsage(AttributeTargets.Assembly)&gt; _
Public Class <b>AssemblyCompanyUrlAttribute</b>
Inherits System.Attribute
Private _strCompanyUrl As String
Public Sub New(ByVal url As String)
_strCompanyUrl = url
End Sub
Public Overridable ReadOnly Property CompanyUrl() As String
Get
Return _strCompanyUrl
End Get
End Property
End Class</pre>
<p>
Once you've compiled your assembly, the obvious question is, how do we get these attributes (custom or standard) back out? I do it with a reflection loop into a NameValueCollection:
</p>
<p>
</p>
<pre language="vb" name="code">
Private Shared Function GetAssemblyAttribs(ByVal a As Reflection.Assembly) _
As Specialized.NameValueCollection
Dim attribs() As Object
Dim attrib As Object
Dim Name As String
Dim Value As String
Dim nvc As New Specialized.NameValueCollection
attribs = a.GetCustomAttributes(False)
For Each attrib In attribs
Name = attrib.GetType().ToString()
Value = ""
Select Case Name
Case "System.Reflection.AssemblyTrademarkAttribute"
Name = "Trademark"
Value = CType(attrib, AssemblyTrademarkAttribute).Trademark.ToString
Case "System.Reflection.AssemblyProductAttribute"
Name = "Product"
Value = CType(attrib, AssemblyProductAttribute).Product.ToString
Case "System.Reflection.AssemblyCopyrightAttribute"
Name = "Copyright"
Value = CType(attrib, AssemblyCopyrightAttribute).Copyright.ToString
Case "System.Reflection.AssemblyCompanyAttribute"
Name = "Company"
Value = CType(attrib, AssemblyCompanyAttribute).Company.ToString
Case "System.Reflection.AssemblyTitleAttribute"
Name = "Title"
Value = CType(attrib, AssemblyTitleAttribute).Title.ToString
Case "System.Reflection.AssemblyDescriptionAttribute"
Name = "Description"
Value = CType(attrib, AssemblyDescriptionAttribute).Description.ToString
Case Else
'Console.WriteLine(Name)
End Select
If Value &lt;&gt; "" Then
If nvc.Item(Name) = "" Then
nvc.Add(Name, Value)
End If
End If
Next
Return nvc
End Function
</pre>
<p>
But I am sure there are other ways.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-11-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/custom-assemblyinfo-attributes/</guid>
</item>
</channel>
</rss>
