<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Canonicalization: Not Just for Popes</title>
<link>https://blog.codinghorror.com/canonicalization-not-just-for-popes/</link>
<content>
                <!--kg-card-begin: markdown--><p>You may remember the <a href="http://support.microsoft.com/?kbid=887459">ASP.NET canonicalization vulnerability</a> from last year. And what exactly is canonicalization? From <a href="http://msdn.microsoft.com/en-us/library/ff648647.aspx">Microsoft's Design Guidelines for Secure Web Applications</a>:</p>
<blockquote>
<b>Data in canonical form is in its most standard or simplest form.</b> Canonicalization is the process of converting data to its canonical form. File paths and URLs are particularly prone to canonicalization issues and many well-known exploits are a direct result of canonicalization bugs. For example, consider the following string that contains a file and path in its canonical form.
<pre>c:\temp\somefile.dat</pre>
<p>The following strings could also represent the same file.</p>
<pre>somefile.dat
c:\temp\subdir\..\somefile.dat
c:\    temp\    somefile.dat\    ..somefile.dat
c%3A%5Ctemp%5Csubdir%5C%2E%2E%5Csomefile.dat</pre>
<p>In the last example, characters have been specified in hexadecimal form:</p>
<ul>
<li>%3A is the colon character.
</li>
<li>%5C is the backslash character.
</li>
<li>%2E is the dot character.
</li>
</ul>
<p>You should generally try to avoid designing applications that accept input file names from the user to avoid canonicalization issues. Consider alternative designs instead. For example, let the application determine the file name for the user. If you do need to accept input file names, make sure they are strictly formed before making security decisions such as granting or denying access to the specified file.</p>
</blockquote>
<p>Seems straightforward enough; there can be only one true representation of the data, just like there's only one Pope. <b>And popes don't canonicalize: they <a href="http://en.wikipedia.org/wiki/Canonize">canonize</a>.</b> Which means the words "canonicalize" and "canonicalization" are <i>artificially fabricated technical mumbo-jumbo</i>. As if we didn't have <a href="http://msdn.microsoft.com/en-us/magazine/cc163825.aspx">enough of that to go around already</a>:</p>
<blockquote>
<p>We are asking for your help in eradicating words that have been invented for no good reason. Sometimes, it's too late to do anything about them. Look at the word "canonicalize," for instance. It is used to mean "to create the canonical form" of something, like a URL (as in InternetCanonicalizeUrl from the WinINet API). It's not English; it was invented because someone didn't know that there was already a perfectly adequate word for this process: "canonize." However, once this non-word has been created, the rules of the language suddenly apply again, so the process of "canonicalizing" something is "canonicalization" instead of "canonization."</p>
<p>More recently, we've seen the word "performant" start its crawl into the everyday vocabulary of devspace. It is used to mean "highly performing." It's also not a word. When something provides information, it's informative. It's not "informant." The word "performant," if it existed, would be a noun  –  not an adjective. But it doesn't exist, so if you do see it in print, remember that it's not really there.</p>
<p>Any readers who have made it this far are probably rolling their eyes now, thinking to themselves, "Why are they being such sticklers here? Isn't the language a wonderful, evolving thing?" Yes, our language is evolving. As there is a need for new words, new words enter the language. But <b>making up new words is just as bad as using fancy words in place of short ones.</b> Why say "This project's goals are orthogonal to the company's needs"? Admit it  –  if you were at home, you'd just say "different from" or "at odds with."</p>
</blockquote>
<p>It's one thing to use technical jargon excessively, but the perpetuation of <em>new</em> jargon for jargon's sake is particularly Orwellian. Along those same lines, you may also be interested in Cyrus' <a href="http://blogs.msdn.com/cyrusn/archive/2005/04/24/411418.aspx">list of commitments</a>.</p>
<ol>
<li>reinvent value-added markets</li>
<li>brand e-business technologies</li>
<li>benchmark value-added content</li>
<li>optimize one-to-many infrastructures</li>
<li>enable innovative niches</li>
<li>integrate real-time mindshare</li>
<li>aggregate collaborative content</li>
<li>repurpose transparent platforms</li>
<li>reinvent visionary solutions</li>
<li>visualize end-to-end initiatives</li>
</ol>
<p>Is it clear? As an unmuddied lake, sir. As clear as an <a href="http://www.imdb.com/title/tt0066921/">azure sky of deepest summer</a>.</p>
<iframe width="640" height="360" src="//www.youtube.com/embed/arijbOzqM-E" frameborder="0" allowfullscreen></iframe>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-04-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/canonicalization-not-just-for-popes/</guid>
</item>
</channel>
</rss>
