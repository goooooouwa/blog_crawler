<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>You're Reading The World's Most Dangerous Programming Blog</title>
<link>https://blog.codinghorror.com/youre-reading-the-worlds-most-dangerous-programming-blog/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Have you ever noticed that <b>blogs are full of misinformation and lies?</b> In particular, I'm referring to <i>this</i> blog. The one you're reading right now. For example, <a href="http://www.codinghorror.com/blog/archives/001177.html">yesterday's post</a> was so bad that it is <a href="http://www.reddit.com/r/programming/comments/78vq3/jeff_atwood_finally_jumps_the_shark/">conclusive proof that I've jumped the shark</a>.
</p>
<p>
Again.
</p>
<p>
Apparently, according to one Reddit commenter, the information presented here is downright <i>dangerous</i>:
</p>
<p>
</p>
<blockquote>
<b>Jeff Atwood has always held the distinction of having the most dangerous programming blog</b>, in that some young or aspiring developers may actually listen to some of his "advice", but now he's somehow managed to snag the achievement of having the most inane programming blog as well.
<p>
To put it in more frank terms Jeff: What you've just written is one of the most insanely idiotic things I have ever heard. At no point in your rambling, incoherent response were you even close to anything that could be considered a rational thought. Everyone in this room is now dumber for having read this post. I award you no points, and may God have mercy on your soul.
</p>
</blockquote>
<p>
I enjoyed the <a href="http://www.imdb.com/title/tt0112508/">Billy Madison</a> quote, but I'm not sure my blog has earned that particular distinction yet. If <i>this</i> blog is the most dangerous content that young, inexperienced developers have ever read then, well, I'd have to seriously question whether or not they've ever actually used this thing we call the "world wide web".
</p>
<p>
Allow me to illustrate with an example.
</p>
<p>
Today I happened across <a href="http://blog.madskristensen.dk/post/Compression-and-performance-GZip-vs-Deflate.aspx">this blog entry from Mads Kristensen</a>. In it, Mads explains that <a href="http://en.wikipedia.org/wiki/DEFLATE">Deflate</a> is faster than <a href="http://en.wikipedia.org/wiki/Gzip">GZip</a>.
</p>
<p>
</p>
<blockquote>
First I tested the <code>GZipStream</code> and then the <code>DeflateStream</code>. I expected a minor difference because the two compression methods are different, but the result astonished me. <b>I measured the DeflateStream to be 41% faster than GZip</b>. That's a very big difference. With this knowledge, I'll have to change the HTTP compression module to choose Deflate over GZip.
</blockquote>
<p>
This was a surprising result to me, because the two compression algorithms are very closely related. On the other hand, we use GZip extensively and heavily to cache HTML fragment output strings on the Stack Overflow server, <a href="http://www.hanselman.com/blog/TheWeeklySourceCode35ZipCompressingASPNETSessionAndCacheState.aspx">as Scott Hanselman explains</a>. If Deflate really is that much faster, we need to switch to it!
</p>
<p>
But, like any veteran internet user, I never take what I read on a blog -- or any other site on the internet, for that matter -- as fact. Rather, it's a germ of an intriguing idea, a call to action. I fired up my IDE and built a small test harness to test for myself: <b>is <code>Deflate</code> faster than <code>GZip</code>?</b>
</p>
<p>
</p>
<pre>
public static class StopwatchExtensions
{
public static long Time(this Stopwatch sw, Action action, int iterations)
{
sw.Reset();
sw.Start();
for (int i = 0; i &lt; iterations; i++) { action(); }
sw.Stop();
return sw.ElapsedMilliseconds;
}
}
class Program
{
static void Main(string[] args)
{
string s = File.ReadAllText(@"c:test.html");
byte[] b;
var sw = new Stopwatch();
b = CompressGzip(s);
Console.WriteLine("gzip size: " + b.Length);
Console.WriteLine(sw.Time(() =&gt; CompressGzip(s), 1000));
Console.WriteLine(sw.Time(() =&gt; DecompressGzip(b), 1000));
b = CompressDeflate(s);
Console.WriteLine("deflate size: " + b.Length);
Console.WriteLine(sw.Time(() =&gt; CompressDeflate(s), 1000));
Console.WriteLine(sw.Time(() =&gt; DecompressDeflate(b), 1000));
}
}
</pre>
<p>
The results were surprising: on my box, <b>GZip is just as fast as Deflate.</b> For giant strings, for medium strings, for small strings. In every possible testing combination I can think of, Deflate is nowhere near 40% faster.
</p>
<p>
</p>
<pre>
gzip size: 3125
242
171
deflate size: 3107
225
149
</pre>
<p>
That's not exactly what Mads' blog entry tells me should happen. Do I think Mads is an idiot for posting this? Well, no. I don't.
</p>
<p>
</p>
<ul>
<li>The original blog entry was posted in late 2006; since then new versions of the .NET framework have shipped and hardware has gotten faster. Perhaps there was some significant change in either that produces this different outcome.
</li>
<li>My test is a bit different than Mads' testing. I use a random HTML file as the compression target; I can't tell exactly what he's compressing in his benchmark. I also tried with small, medium, and large strings. The tests are similar, but they're not the same.
</li>
</ul>
<p>
Is this the type of dangerous misinformation that blogs are vilified for? Should I be angry at Mads for posting this? Not at all. I learned a bit more about Deflate and GZip. It provided an opportunity for me to refactor my compression code some. I even <a href="http://stackoverflow.com/questions/232848/wrapping-stopwatch-timing-with-a-delegate-or-lambda">learned how to benchmark using lambda syntax</a>. If I hadn't read this post, if it hadn't provided that impetus of an idea for me to ponder, I wouldn't have bothered.
</p>
<p>
I am a better programmer for having read that blog post. Even though, near as I can tell, it's offering inaccurate advice.
</p>
<p>
<font color="red">Update</font>: I got a bit more curious about this, so I ran some more tests on different machines. Here are the results, in milliseconds, for a thousand runs each using the Google homepage HTML as the target (it's about 7 Kb):
</p>
<p>
<img alt="gzip vs. deflate graph" border="0" class="at-xid-6a0120a85dcdae970b0120a86df584970b" height="337" src="https://blog.codinghorror.com/content/images/uploads/2008/10/6a0120a85dcdae970b0120a86df584970b-pi.png" width="537">
</p>
<p>
How much faster <i>is</i> Deflate than GZip?
</p>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td></td>
<td>Core 2 Duo<br>3.5 Ghz</td>
<td>Core 2 Quad<br>1.86 Ghz</td>
<td>Athlon X2<br>2.1 Ghz</td>
</tr>
<tr>
<td>Compress</td>
<td>8% faster</td>
<td>8% faster</td>
<td>50% faster</td>
</tr>
<tr>
<td>Decompress</td>
<td>15% faster</td>
<td>17% faster</td>
<td>37% faster</td>
</tr>
</table>
<p>
There's the 40% Mads was talking about. That is a little shocking when you consider that GZip is simply Deflate plus a checksum and header/footer! (You can <a href="http://www.codinghorror.com/blog/files/deflate-vs-gzip-vs2008-solution.zip">download the source code</a> for this test and try it yourself.)
</p>
<p>
So my point -- and I do have one -- is this: <b>when you say that the information presented on a blog is "dangerous", you're implying the audience is too dumb or inept to read critically</b>.
</p>
<p>
I, for one, have too much respect for my audience to ever do that. I am continually humbled by the quality of the comments and discussion on the blog entries I post. In fact, I'd say that has been the single most surprising thing I've learned in my four plus years of blogging: <b>the best content always begins where the blog post ends.</b> My audience is far, far smarter than I will ever be.
</p>
<p>
On second thought, maybe what I promote on this blog <i>is</i> dangerous: <b>thinking for yourself</b>.
</p>
<p>
But I'm pretty confident you can handle that.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-10-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/youre-reading-the-worlds-most-dangerous-programming-blog/</guid>
</item>
</channel>
</rss>
