<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Antidote to ASP.NET Smart Navigation</title>
<link>https://blog.codinghorror.com/the-antidote-to-aspnet-smart-navigation/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One of the issues I have with ASP.NET is that it is <b>postback crazy</b>. Virtually nothing of significance can be done in pure browser client code with ASP.NET out of the box*. You have to Submit() the specially formed ASP.NET HTML form to the server, and all the event magic happens server side.
</p>
<p>
While this is nice from an abstraction standpoint, it's kind of a pain for the client. Having tons of postbacks in the middle of the form causes "flicker" and loss of page scroll position. It can also be a serious performance issue if you have tons of viewstate that gets submitted to the server over and over. I am definitely not a fan of doing a lot of stuff in JavaScript and DOM on the browser-- been there, done that-- but we almost have the opposite extreme in ASP.NET.
</p>
<p>
One of the tricks MS introduced to <b>combat the loss of page scroll position on postback</b> is something called <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebuipageclasssmartnavigationtopic.asp">SmartNavigation</a>. Unfortunately, it's <a href="http://weblogs.asp.net/ksamaschke/archive/2003/04/27/6085.aspx">horribly broken</a>. A friend recently referred me to <a href="http://www.aspnetpro.com/NewsletterArticle/2003/09/asp200309bm_l/asp200309bm_l.asp">an article by Brad McCabe</a> which outlines the most elegant workaround I've seen so far-- it lets you retain page position between postbacks in a very generic way. And not a single named anchor in sight!
</p>
<p>
Better workarounds are on the horizon with ASP.NET 2.0. I hear <a href="http://www.dotnetjunkies.com/Tutorial/E80EC96F-1C32-4855-85AE-9E30EECF13D7.dcik">we'll be able to use XMLHTTP requests to do "background" postbacks in some scenarios</a>. We've gone this route before, too. It works, but it's still painful, mostly because the browser is a hideous development platform. If ASP.NET 2.0 can abstract away the pain, and retain browser compatibility, then I'm for it.
</p>
<p>
* Now, there are some third party ASP.NET server controls which expose a lot of exotic client side behaviors. But none of the default controls do.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-10-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-antidote-to-aspnet-smart-navigation/</guid>
</item>
</channel>
</rss>
