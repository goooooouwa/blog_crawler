<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Your Session Has Timed Out</title>
<link>https://blog.codinghorror.com/your-session-has-timed-out/</link>
<content>
                <!--kg-card-begin: markdown--><p>
How many times have you returned to your web browser to be greeted by this unpleasant little notification:
</p>
<p>
</p>
<blockquote>
<font color="red">Your session has timed out. Please sign in again.</font>
</blockquote>
<p>
If you're anything like me, the answer is <i>lots</i>. What's worse is that you're usually kicked out of whatever page context you were working in. You have to manually log in again, remember what you were doing, then navigate back to where you were and resume your work.
</p>
<p>
Most programmers look at these sort of <b>browser session timeouts</b> as a necessary evil -- sometimes even as a security "feature". I know my bank website zealously logs me out of its web interface if I'm idle for more than five minutes. I'm not sure either one of these reasons are particularly justifiable.
</p>
<p>
<b>As a programmer, I understand why session expiration occurs.</b> The HTTP protocol that the web is built on is <i>stateless</i>. That means every individual request your browser sends to a web server is a newborn babe, cruelly born into a world that is utterly and completely oblivious to its existence. The way modern web applications get around this is by telling the browser to send a small, unique value back to the website with each request -- this is known as a <a href="http://en.wikipedia.org/wiki/HTTP_cookie">HTTP cookie</a>. It sounds a lot tastier than it looks:
</p>
<p>
</p>
<blockquote>
Content-type: text/html<br>
Cookie: <b>SessionId=5451297120</b>
</blockquote>
<p>
While there are <a href="http://www.google.com/search?q=cookies+privacy">privacy concerns with cookies</a>, it is a generally accepted practice today -- at least for the <a href="http://www.opentracker.net/en/articles/all-about-cookies-third-party.jsp">first-party cookie flavors</a>. While it is <i>possible</i> to maintain state without cookies, it's painful and awkward.
</p>
<p>
Every web request to that server will include its own cookie and associated session id until it expires, usually many months or even years hence. The browser definitely isn't the forgetful party here.
</p>
<p>
It's up to the <i>server</i> to correlate the unique session identifier sent by the browser with your individual identity, context, settings, and preferences. This is usually stored in a database of some kind, keyed by your session identifier. For performance reasons, some chunk of session information also ends up in the server's memory; there's no need to reach all the way out to the database the next twenty-six times you obsessively refresh your Facebook profile page.
</p>
<p>
Still, that doesn't explain why the web server mysteriously forgets about us. If anything, the server has all the information it needs to remember you, even if you walked away from your computer for a week. So why <i>does</i> the server choose to arbitrarily forget about you in an hour?
</p>
<p>
</p>
<ol>
<li>
<b>Performance.</b> Consider a highly trafficked web site. If the website tried to keep sessions alive for an entire month, that could cause the session table to grow to millions of records. It's even worse if you think about it in terms of user information cached in memory; a measly few kilobytes of memory state per user doesn't sound like much, but multiplied by a few million, it absolutely is. If this data wasn't expired and dumped on some schedule, it would quickly blow up the web server.
<p>
</p>
</li>
<li>
<b>Security.</b> The <a href="http://en.wikipedia.org/wiki/Magic_cookie">magic cookie</a> that stores your session can potentially be stolen. If that cookie never expires, you have an infinitely long vulnerability window to <a href="http://en.wikipedia.org/wiki/Session_hijacking">session hijacking</a>. This is serious stuff, and mitigation strategies are <a href="http://en.wikipedia.org/wiki/Session_hijacking#Prevention">limited</a>. The best option, short of encrypting the entire connection from end to end via HTTPS, is to keep a tight expiration window on the session cookie, and regenerate them frequently.
</li>
</ol>
<p>
That's the why of browser session timeouts from the programmer's perspective. But that doesn't make it right. Far from it.
</p>
<p>
<b>As a user, I can say pretty unequivocally that session expiration <i>sucks</i>.</b> Is it really so unreasonable to start doing something in your web browser, walk away for an hour -- maybe even for a few hours -- then come back and expect things to <i>just work?</i>
</p>
<p>
As programmers, I think we can do better. It is possible. I am inundated with session timeout messages every day from a variety of sources, but I've never <i>once</i> seen a session expiration message from gmail, for example. Here's what I suggest:
</p>
<p>
</p>
<ol>
<li>Create a background JavaScript process in the browser that <b>sends regular heartbeats to the server</b>. Regenerate a new cookie with timed expiration, say, every 5 or 10 minutes.
<p>
</p>
</li>
<li>If you're worried about session hijacking -- and <a href="http://news.bbc.co.uk/2/hi/technology/6929258.stm">you <i>really</i> should be</a> -- <b>use a HTTPS protected connection</b>. This is an absolute no-brainer for financial institutions of any kind.
</li>
</ol>
<p>
I wish more developers would <b>test their web applications for session timeout issues.</b> Despite all rumors to the contrary, your users will not be dedicating their entire lives to using your web application in a punctual and timely manner. They have phone calls to take, meetings to go to, other websites and applications to attend to.
</p>
<p>
Is it really fair to kick users all the way out of your web application, or worse, blindly reject data they've submitted -- just because they were <i>impudent</i> enough to wait a few hours since their last supplication to the web server gods? In most web apps, the penance is awfully severe for such a common sin.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-04-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/your-session-has-timed-out/</guid>
</item>
</channel>
</rss>
