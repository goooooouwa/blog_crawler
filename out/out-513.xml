<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Steve McConnell in the Doghouse</title>
<link>https://blog.codinghorror.com/steve-mcconnell-in-the-doghouse/</link>
<content>
                <!--kg-card-begin: markdown--><p>I often trot out <a href="http://stevemcconnell.com/articles/art03.htm">Steve McConnell's doghouse analogy</a> to illustrate how small projects aren't necessarily representative of <a href="http://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/">the problems</a> you'll encounter on larger projects.</p>
<blockquote>
People who have written a few small programs in college sometimes think that writing large, professional programs is the same kind of work -- only on a larger scale. It is not the same kind of work. <b>I can build a beautiful doghouse in my backyard in a few hours.</b> It might even take first prize at the county fair's doghouse competition. But that does not imply that I have the expertise to build a skyscraper. The skyscraper project requires an entirely more sophisticated kind of expertise.
</blockquote>
<p>There's a similar passage in <a href="http://www.amazon.com/exec/obidos/ASIN/1556159005/codihorr-20">Rapid Development</a>, which I cited in <a href="http://blog.codinghorror.com/following-the-instructions-on-the-paint-can/">Following the Instructions on the Paint Can</a>.</p>
<blockquote>
<p>What happens if you don't follow the instructions? If you're painting a doghouse on a hot Tuesday night after work, you might only have 2 hours to do the job, and Fido needs a place to sleep that night. You don't have time to follow the instructions. You might decide that you can skip steps 1 through 3 and apply a thick coat rather than a thin one in step 4. If the weather's right and Fido's house is made of wood and isn't too dirty, your approach will probably work fine.</p>
<img alt="an old doghouse" border="0" height="360" src="https://blog.codinghorror.com/content/images/uploads/2007/09/6a0120a85dcdae970b012877701d73970c-pi.jpg" width="480">
<p>Over the next few months the paint might crack from being too thick or it might flake off from the metal surfaces of the nails where you didn't prime them, and you might have to repaint it again next year, but it really doesn't matter.</p>
<p>What if, instead of a doghouse, you're painting a Boeing 747? In that case, you had better follow the instructions to the letter. If you don't strip off the previous coat, you'll incur significant fuel efficiency and safety penalties: a coat of paint on a 747 weighs 400 to 800 pounds. If you don't prepare the surface adequately, wind and rain attacking the paint at 600 miles per hour will take their toll much quicker than a gentle wind and rain will on Fido's doghouse.</p>
</blockquote>
<p>The underlying lesson is the same: what works for small projects may be a total disaster on a larger scale. <b>Being a competent software engineer means choosing appropriate strategies for the size of the project you're working on</b>. Are you working on a doghouse, a skyscraper, a jet airliner, or <a href="http://blog.codinghorror.com/were-building-the-space-shuttle/">the space shuttle</a>?</p>
<p>Perhaps that's why I was so entertained by <a href="http://web.archive.org/web/20070623170339/http://blogs.construx.com/blogs/stevemcc/archive/2007/09/23/building-a-fort-lessons-in-software-estimation.aspx">Steve's most recent blog post</a>. He documents building a fort for his kids. It's not <i>exactly</i> a doghouse, but it's close. Along the way, Steve applies his considerable software estimation and project planning skills to the project. (Remember, this is the guy who <a href="http://blog.codinghorror.com/recommended-reading-for-developers/">quite literally wrote the books</a> on these subjects.) It's a small project, too, so our odds of success are <a href="http://blog.codinghorror.com/diseconomies-of-scale-and-lines-of-code/">about as good as they're going to get</a>.</p>
<blockquote>
<p>Whenever I do a physical construction project like this I try to pay attention to which attributes of the project are similar to software projects and which are different. The comparisons are made more challenging by the fact that my construction projects are recreational, whereas I'm trying to draw comparisons to commercial software projects. For the first half of the project, no good similarities jumped at out me. But as the project started to take much longer than I expected, <b>I began to see more and more similarities between my estimates on the fort and problems people run into with software estimates.</b></p>
</blockquote>
<p>How did it go?</p>
<blockquote>
<p>Days 3-6 went about like Days 1 &amp; 2 had gone, which is to say there were lots of little tasks that turned out to be medium-sized tasks, there were little tasks that I just hadn't anticipated, and most things took longer than I had planned. By the end of Day 7 (my buffer day), I was done with the tasks I had planned for Day 3 and had a tiny start on Day 4, which is to say that I'd completed the decking, hadn't started on the railings or framing, and had one wall of the fort framed, but that was all.</p>
<p>My original plan had called for about a week full time and then another couple of weeks of finishing up loose ends like painting, installing trim, and so on. I finished the fort about 6 weeks after I started it, so I was about 100% over my planned schedule, and I ended up at 2-3x my originally planned effort.</p>
</blockquote>
<p>Steve got subsumed in the unpredictable details. This completely mirrors my software project experience. <b>Often, you can't even begin to accurately estimate how long something will take until you start doing it.</b> At least some of it. That's why so many teams turn to <a href="http://blog.codinghorror.com/anything-but-waterfall/">agile, iterative development techniques</a>; part of each iteration involves exploring all those unknowns and turning them into slightly-less-unknowns for the next iteration. <a href="http://blog.codinghorror.com/boyds-law-of-iteration/">The faster we iterate</a>, the closer we get to an accurate estimate, and the more work we get done along the way. We plan by doing.</p>
<p>This is easily my favorite post in <a href="http://web.archive.org/web/20070623170339/http://blogs.construx.com/blogs/stevemcc/default.aspx">Steve's blog</a> to date. Do <a href="http://web.archive.org/web/20070623170339/http://blogs.construx.com/blogs/stevemcc/archive/2007/09/23/building-a-fort-lessons-in-software-estimation.aspx">read the entire post</a> for all the gory details of how things went awry. It's a storybook example of how an <a href="http://blog.codinghorror.com/escaping-from-gilligans-island/">avalanche of little problems</a> can snowball into one huge project delay â€“ even if you're Steve McConnell. And even if you're only building a <s>doghouse</s> fort.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-09-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/steve-mcconnell-in-the-doghouse/</guid>
</item>
</channel>
</rss>
