<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Side by side issues</title>
<link>https://blog.codinghorror.com/side-by-side-issues/</link>
<content>
                <!--kg-card-begin: markdown--><p>
This is something of a dying art, since Microsoft is doing their level best to pretend that .NET 1.0 doesn't exist any more-- but here are a few key utilities you'll need when running .NET 1.0 and 1.1 side by side.
</p>
<p>
Each website on an IIS server must be bound to a specific .NET runtime; <a href="http://www.denisbauer.com/NETTools/ASPNETVersionSwitcher.aspx">this GUI utility</a> lets you quickly bind a website to the .NET version of your choices. Bear in mind that <b>as a developer you're very likely to be running the crippleware version of IIS</b> which only allows a single website, and at most 10 connections (<a href="http://www.eggheadcafe.com/articles/20031108.asp">40 with registry hack</a>) to that website. But on Server 2000 or Server 2k3, you can have as many websites as you like.
</p>
<p>
The language changes between .NET 1.0 and 1.1 are minimal, and in most cases you can actually load a VS.NET 2003 project in VS.NET 2002 without any problems, and vice versa. <a href="http://www.codeproject.com/macro/vsconvert.asp">This solution conversion utility</a> allows you to convert a VS.NET solution back and forth between 2002 and 2003 formats at will. You may want to check out the <a href="http://www.dacris.com/blog/">author's blog</a> as well; not many posts, but some are rather interesting:
</p>
<blockquote>
<p><strong>.NET - Blacklisted APIs - "The functions you were never meant to call"</strong></p>
<ol>
<li>Screen.GetWorkingArea() - Use instead, Screen.PrimaryScreen.WorkingArea (For some reason, GetWorkingArea takes 25 ms to complete)</li>
<li>Application.DoEvents() - The call of the devil.</li>
<li>Control.RecreateHandle() - There's no reason why you should ever need to use this.</li>
<li>Application.EnableVisualStyles() - Use a manifest. .NET 1.1 just doesn'timplement thisfunctionright.</li>
<li>NativeWindow.ReleaseHandle() - Contains some nasty bugs.</li>
</ol>
</blockquote>
I had no idea high school seniors were this smart. :)
<p>
Also, this won't affect many of you, but any .NET assemblies instantiated via an &lt;OBJECT&gt; tag in HTML <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondeployingcommonlanguageruntimeapplicationusingie55.asp">will always bind to the latest version of the .NET runtime on the machine</a>. There is no concept of side by side for assemblies loaded this way. Shocking, but true. I would strongly advise against building object tag "deployed" .NET apps for anything non-trivial.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-08-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/side-by-side-issues/</guid>
</item>
</channel>
</rss>
