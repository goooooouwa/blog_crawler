<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>If It Isn't Documented, It Doesn't Exist</title>
<link>https://blog.codinghorror.com/if-it-isnt-documented-it-doesnt-exist/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Nicholas Zakas enumerates <a href="http://www.amazon.com/gp/plog/post.html/ref=cm_blog_pl/104-9847257-2963905?ie=UTF8&amp;pt=personalBlog&amp;aid=PlogMyCustomersAgent&amp;ot=customer&amp;pd=1164175937.423&amp;pid=PMCA1J3TWE84RTHQXat1164175038&amp;iid=A1J3TWE84RTHQX">the number one reason why good JavaScript libraries fail</a>:
</p>
<p>
</p>
<blockquote>
<b>Lack of documentation.</b> No matter how wonderful your library is and how intelligent its design, if you're the only one who understands it, it doesn't do any good. Documentation means not just autogenerated API references, but also <i>annotated</i> examples and in-depth tutorials. You need all three to make sure your library can be easily adopted.
</blockquote>
<p>
James Bennett expresses a similar sentiment in <a href="http://www.b-list.org/weblog/2007/01/22/choosing-javascript-library">choosing a JavaScript library</a>:
</p>
<p>
</p>
<blockquote>
There's one other thing which can really make or break a JavaScript library, and it's surprising how often it's overlooked, because the same thing makes or breaks an awful lot of software in other fields: <b>documentation</b>. The greatest library in the world would fail if the only way to learn it was reading the code (and, in fact, it already has to a large extent). Some packages have managed to overcome this by way of lots of unofficial documentation  --  blog entries and the like  --  but there is absolutely no substitute for full, well-written documentation. The ideal, for me, consists of:
<p>
</p>
<ol>
<li>High-level overviews of each part of the library, touching on key objects and methods.
</li>
<li>Practical examples showing how to handle common use cases.
</li>
<li>Full API documentation for everything in the library. <a href="http://jsdoc.sourceforge.net/">JSDoc</a> is both good and bad for this: good because it makes API docs stupidly easy to generate, and bad because people assume that API docs are all you need. Javadoc, which inspired JSDoc, has wrought much ill on the Java world for largely the same reasons.
</li>
<li>Comments throughout the code itself.
</li>
</ol>
<p>
Pretty much everybody who's developing a JavaScript library has dropped the ball on this; very few libraries manage even one or two of those points, and out of the teeming multitude of JavaScript libraries floating around today I've seen exactly one which manages to hit all four points with any kind of success. <b>Maybe there are other splendidly-documented libraries out there, but I've yet to see them; most treat documentation like an afterthought.</b>
</p>
</blockquote>
<p>
Mike Pope, who writes documentation for a living, <a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=1680"> neatly summarizes both opinions with this zinger</a>:
</p>
<p>
</p>
<blockquote>
We've been known to tell a developer <b>"If it isn't documented, it doesn't exist."</b> Not only does it have to be doc'd, but it was to be explained and taught and demonstrated. Do that, and people will be excited -- not about your documentation, but about your <i>product</i>.
</blockquote>
<p>
Good documentation is hard to find. Particularly on open source projects. That's why I was so pleasantly surprised to see such excellent documentation for the open-source <a href="http://www.urlrewriting.net/en/Default.aspx">UrlRewriting.net project</a>, along with a support forum.
</p>
<p>
<a href="http://www.urlrewriting.net/en/Default.aspx"><img alt="urlrewritingnet-documentation-cover" border="0" class="at-xid-6a0120a85dcdae970b0128776fff0c970c" height="350" src="https://blog.codinghorror.com/content/images/uploads/2007/01/6a0120a85dcdae970b0128776fff0c970c-pi.png" width="247"></a>
</p>
<p>
The <a href="http://www.urlrewriting.net/download/UrlRewritingNet20.English.pdf">UrlRewriting documentation</a> (pdf) is a pleasure to read. Far from being an afterthought, documentation was a first-class citizen on this project, and it shows. The presence of good documentation makes the <i>code</i> a pleasure to use, too.
</p>
<p>
So how do you keep your documentation up to snuff on a rapidly moving project? Maybe it's possible to use agile documentation methods alongside agile coding practices. Mike Pope's recent post on the <a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=1688">"agile little" ASP.NET AJAX documentation set</a> is a hopeful sign that we, too, can generate better documentation, faster.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-01-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/if-it-isnt-documented-it-doesnt-exist/</guid>
</item>
</channel>
</rss>
