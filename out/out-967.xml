<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Anisotropic Filtering</title>
<link>https://blog.codinghorror.com/anisotropic-filtering/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I've talked about <a href="http://www.codinghorror.com/blog/archives/000367.html">Bilinear vs. Bicubic filtering</a> before in the context of 2D images, but bilinear filtering is a key ingredient in 3D graphics, too. When a texture is applied to a polygon, the texture may be scaled up or down to fit, depending on your screen resolution. This is done via bilinear filtering.
</p>
<p>
A full discussion of 3D graphics is way outside the scope of this post-- plus I don't want to bore you to death with concepts like <a href="http://www.gamasutra.com/features/19981211/flavell_01.htm">trilinear filtering and mip-mapping</a>. But I do want to highlight one particular peculiarity of bitmap scaling in 3D graphics. <b>As you rotate a texture-mapped polygon away from the viewer, simple bilinear filtering and mip-mapping cause the texture to lose detail as the angle increases:</b>
</p>
<p>
<img alt="Texture without anisotropic filtering" border="0" class="at-xid-6a0120a85dcdae970b0120a86d607e970b" height="187" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d607e970b-pi.jpg" width="412">
</p>
<p>
Now, <b>some detail loss with distance is intentional</b>. That's essentially what <a href="http://www.gamedev.net/reference/articles/article1233.asp">mip-mapping</a> is. if we didn't mip-map into the distance, the image would look extremely noisy:
</p>
<p>
</p>
<table>
<tr>
<td>No mip-mapping
</td>
<td>Mip-mapping
</td>
</tr>
<tr>
<td>
<img alt="texture without mip-mapping" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6094970b" height="167" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d6094970b-pi.png" width="320">
</td>
<td>
<img alt="texture with mip-mapping" border="0" class="at-xid-6a0120a85dcdae970b0120a86d60a5970b" height="167" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d60a5970b-pi.jpg" width="320">
</td>
</tr>
</table>
<p>
The problem with simple mip-mapping and bilinear filtering is that they're <i>too simple</i>. Much more detail should be retained into the distance. And <b>that's what anisotropic filtering does</b>:
</p>
<p>
<img alt="Texture with anisotropic filtering" border="0" class="at-xid-6a0120a85dcdae970b0120a86d60c4970b" height="187" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d60c4970b-pi.jpg" width="410">
</p>
<p>
Because you're typically viewing most of the polygons in the world at an angle at any given time, <b>anisotropic filtering has a profound impact on image quality</b>. Here are some screenshots I took from the <a href="http://www.flatoutgame.com/">PC game FlatOut</a> which illustrate the dramatic difference between standard filtering and anisotropic filtering:
</p>
<p>
</p>
<table>
<tr>
<td>Standard filtering
</td>
<td>16x Anisotropic filtering
</td>
</tr>
<tr>
<td>
<img alt="Flatout screenshot detail, standard filtering" border="0" class="at-xid-6a0120a85dcdae970b0120a86d60e4970b" height="292" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d60e4970b-pi.jpg" width="338">
</td>
<td>
<img alt="Flatout screenshot detail, 16x anisotropic filtering" border="0" class="at-xid-6a0120a85dcdae970b0120a86d610f970b" height="292" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d610f970b-pi.jpg" width="335">
</td>
</tr>
<tr>
<td>
<img alt="Flatout screenshot detail, standard filtering" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6122970b" height="183" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d6122970b-pi.jpg" width="396">
</td>
<td>
<img alt="Flatout screenshot detail, 16x anisotropic filtering" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6135970b" height="183" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d6135970b-pi.jpg" width="400">
</td>
</tr>
</table>
<p>
These are detail elements cropped from the full-size 1024x768 screenshots: <a href="http://www.codinghorror.com/blog/images/flatout-no-aniso-full.jpg">standard</a>, <a href="http://www.codinghorror.com/blog/images/flatout-aniso-full.jpg">anisotropic</a>.
</p>
<p>
Proper anisotropic filtering is <a href="http://www.xbitlabs.com/articles/video/display/gf3-anis-filtering.html">computationally expensive</a>, even on dedicated 3D hardware. And the performance penalty increases with resolution. ATI was the first 3d hardware vendor to introduce some <a href="http://www.3dcenter.org/artikel/2003/11-21_a_english.php">anisotropic filtering optimizations</a>-- some would say shortcuts-- in their cards which allowed much higher performance. There is one small caveat, however: at some angles, textures don't get fully filtered. ATI effectively optimized for common angles you'd see in 3D level geometry (floor, walls, ceiling) at the cost of the others.
</p>
<p>
For better or worse, these optimizations are now <a href="http://www.xbitlabs.com/articles/video/display/nv40_16.html">relatively standard now</a> even <a href="http://www.xbitlabs.com/articles/video/display/geforce6600g-games_3.html">on nVidia cards</a>. I think it's a reasonable tradeoff for the increased image quality and performance.
</p>
<p>
In my opinion, <b>anisotropic filtering is the most important single image quality setting available on today's 3D hardware</b>. It's like <a href="http://www.urbandictionary.com/define.php?term=Freedom+Rock&amp;defid=1564108">Freedom Rock</a>: make sure you've turned it up, man!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-01-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/anisotropic-filtering/</guid>
</item>
</channel>
</rss>
