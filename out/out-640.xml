<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Top 6 List of Programming Top 10 Lists</title>
<link>https://blog.codinghorror.com/top-6-list-of-programming-top-10-lists/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Presented, in no particular order, for your reading pleasure: my <b>top 6 list of programming top 10 lists</b>. To keep this entry concise, I've only quoted a brief summary of each item. If any of these sound interesting to you, I encourage you to click through and read the original author's thoughts in more detail.
</p>
<p>
<b>Jerry Weinberg: <a href="http://www.codinghorror.com/blog/archives/000584.html">The 10 Commandments of Egoless Programming</a></b>
</p>
<p>
</p>
<ol>
<li>Understand and accept that <a href="http://www.codinghorror.com/blog/archives/000300.html">you will make mistakes</a>.
</li>
<li>
<a href="http://www.codinghorror.com/blog/archives/000586.html">You are not your code</a>.
</li>
<li>No matter how much "karate" you know, <a href="http://www.codinghorror.com/blog/archives/000051.html">someone else will always know more</a>.
</li>
<li>Don't <a href="http://www.codinghorror.com/blog/archives/000684.html">rewrite code</a> without consultation.
</li>
<li>Treat people who know less than you with respect, deference, and patience.
</li>
<li>The only constant in the world is <a href="http://www.codinghorror.com/blog/archives/000545.html">change</a>.
</li>
<li>The only true authority stems from knowledge, not from position.
</li>
<li>
<a href="http://www.codinghorror.com/blog/archives/000752.html">Fight for what you believe</a>, but gracefully accept defeat.
</li>
<li>Don't be <a href="http://www.codinghorror.com/blog/archives/000080.html">"the guy in the room."</a>
</li>
<li>Critique code instead of people --  be kind to the coder, not to the code.
</li>
</ol>
<p>
<b>Dare Obasanjo: <a href="http://www.25hoursaday.com/weblog/PermaLink.aspx?guid=a76eab63-70f0-48b4-8b75-66c366a651cd">Top 10 Signs Your Software Project is Doomed</a></b>
</p>
<p>
</p>
<ol>
<li>Trying to do too much in the first version.
</li>
<li>Taking a major dependency on unproven technology.
</li>
<li>Competing with an existing internal project that is either a cash cow or has powerful backers.
</li>
<li>The team is understaffed.
</li>
<li>"Complex problems require complex solutions".
</li>
<li>
<a href="http://www.stickyminds.com/se/S7923.asp">Schedule Chicken</a>
</li>
<li>
<a href="http://www.projectperfect.com.au/info_scope_creep_mgmt.php">Scope Creep</a>
</li>
<li>
<a href="http://www.answers.com/topic/second-system-syndrome">Second System Syndrome</a>
</li>
<li>No Entrance Strategy.
</li>
<li>Tackling a problem you don't know how to solve.
</li>
</ol>
<p>
<b>Omar Shahine: <a href="http://www.shahine.com/omar/TipsForWorkingAtMS.aspx">Top 10 Tips for Working at Microsoft (or Anywhere Else)</a></b>
</p>
<p>
</p>
<ol>
<li>Process is no substitute for thinking.
</li>
<li>Get out of your office.
</li>
<li>Use your product (the one your customers will).
</li>
<li>Fix things that are broken rather than complain about them being broken. Actions speak better than your complaining.
</li>
<li>Make hard problem look easy. Don't make easy problems look hard.
</li>
<li>Use the right communication tool for the job.
</li>
<li>Learn to make mistakes.
</li>
<li>Keep things simple.
</li>
<li>Add value all the time.
</li>
<li>Use their product.
</li>
</ol>
<p>
<b>Michael McDonough: <a href="http://www.designobserver.com/archives/000121.html">The Top 10 Things They Never Taught Me in Design School</a></b>
</p>
<p>
</p>
<ol>
<li>Talent is one-third of the success equation.
</li>
<li>95 percent of any creative profession is shit work.
</li>
<li>If everything is equally important, then nothing is very important.
</li>
<li>Don't over-think a problem.
</li>
<li>Start with what you know; then remove the unknowns.
</li>
<li>Don't forget your goal.
</li>
<li>When you throw your weight around, you usually fall off balance.
</li>
<li>The road to hell is paved with good intentions; or, no good deed goes unpunished.
</li>
<li>It all comes down to output.
</li>
<li>The rest of the world counts.
</li>
</ol>
<p>
<b>Andres Taylor: <a href="http://www.taylor.se/blog/2007/03/22/top-ten-things-ten-years-of-professional-software-development-has-taught-me/">Top 10 Things Ten Years of Professional Software Development Has Taught Me</a></b>
</p>
<p>
</p>
<ol>
<li>Object orientation is much harder than you think.
</li>
<li>The difficult part of software development is communication.
</li>
<li>Learn to say no.
</li>
<li>If everything is equally important, then nothing is important.
</li>
<li>Don't over-think a problem.
</li>
<li>Dive really deep into something, but don't get hung up.
</li>
<li>Learn about the other parts of the software development machine.
</li>
<li>Your colleagues are your best teachers.
</li>
<li>It all comes down to working software.
</li>
<li>Some people are assholes.
</li>
</ol>
<p>
<b>Steve Yegge: <a href="http://steve.yegge.googlepages.com/ten-great-books">10 Great Books</a></b>
</p>
<p>
</p>
<ol>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/020161622X/codihorr-20">The Pragmatic Programmer:  From Journeyman to Master</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0201485672/codihorr-20">Refactoring: Improving the Design of Existing Code</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/codihorr-20">Design Patterns</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0201310090/codihorr-20">Concurrent Programming in Java(TM): Design Principles and Pattern (2nd Edition)</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0596528124/codihorr-20">Mastering Regular Expressions, 2nd Edition</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0387948600/codihorr-20">The Algorithm Design Manual</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0131103628/codihorr-20">The C Programming Language, Second Edition</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0262560992/codihorr-20">The Little Schemer</a>
</li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0201100886/codihorr-20">Compilers</a>
</li>
<li>
<a href="http://c2.com/cgi/wiki">WikiWikiWeb</a>
</li>
</ol>
<p>
You may wonder why I included a top 10 list from someone who is clearly a designer and not a programmer. I agree <a href="http://globalnerdy.com/?p=477">with Joey deVilla</a>:
</p>
<p>
</p>
<blockquote>
Software development is a kissing cousin of engineering (if not an engineering discipline itself), and blends creativity with math and science. That's why I find that a lot of advice to creative types is also applicable to software developers.
</blockquote>
<p>
You may also want to contrast and compare <a href="http://www.codinghorror.com/blog/archives/000020.html">my recommended reading list</a> with Steve Yegge's. And yes, there is a reason <i>Refactoring</i> and <i>Design Patterns</i> aren't on my list, just as I'm sure there's a reason <i>Code Complete</i> is not on Steve's list.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-03-22T13:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/top-6-list-of-programming-top-10-lists/</guid>
</item>
</channel>
</rss>
