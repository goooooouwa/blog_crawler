<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Please Give Us Your Email Password</title>
<link>https://blog.codinghorror.com/please-give-us-your-email-password/</link>
<content>
                <!--kg-card-begin: markdown--><p>
A number of people whose opinions I greatly respect have turned me on to <a href="http://www.yelp.com/">Yelp</a> over the last six months or so. Yelp is a community review site, and a great way to discover cool new places in whatever neighborhood you happen to be in.
</p>
<p>
I've enjoyed using Yelp, and I wanted to participate by submitting my first review, so I created a new account there. As part of the account creation process, I was presented with this.
</p>
<p>
<img alt="Yelp friends check" border="0" class="at-xid-6a0120a85dcdae970b0120a86ddfee970b" height="250" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86ddfee970b-pi.png" style="border: 1px solid silver;" width="690">
</p>
<p>
The idea is that I tell Yelp what email service I use, then provide my login and password information so Yelp can determine if any of my email contacts are Yelp members. How convenient!
</p>
<p>
Here's how I see that page.
</p>
<p>
<img alt="Yelp friends check: EPIC FAIL" border="0" class="at-xid-6a0120a85dcdae970b0120a86de008970b" height="250" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86de008970b-pi.png" style="border: 1px solid silver;" width="690">
</p>
<p>
I'm willing to give Yelp the benefit of the doubt here, but let's think about what it means to give out your email account and password to <i>anyone</i>, no matter how ostensibly trustworthy they may be:
</p>
<p>
</p>
<ol>
<li>Number one with a bullet: <b>your email account is a de-facto master password for your online identity</b>. Most -- if not all -- of your online accounts are secured through your email. Remember all those "forgot password" and "forgot account" links? Guess where they ultimately resolve to? If someone controls your email account, they have nearly unlimited access to every online identity you own across every website you visit.
<p>
</p>
</li>
<li>If you're anything like me, <b>your email is a treasure trove of highly sensitive financial and personal information</b>. Consider all the email notifications you get in today's highly interconnected web world. It's like a one-stop-shop for comprehensive and systematic identity theft. How do I know Yelp isn't going to dip into other areas of my email?
<p>
</p>
</li>
<li>Even if I trust Yelp absolutely, <b>how do I know they're not going to store my email password</b>, <a href="http://www.codinghorror.com/blog/archives/000953.html">perhaps insecurely</a>, in a place some disgruntled programmer or hacker can eventually get to it? Giving out your password puts the recipient in the highly unfortunate position of having to secure your password. Give that email password out enough, and you're now vulnerable in <i>dozens</i> of places spread across the face of the web. The odds start to look <a href="http://www.codinghorror.com/blog/archives/001072.html">pretty dire</a>.
<p>
</p>
</li>
</ol>
I'm sure Yelp means well. They just want to help me find my friends, doggone it! But the very nature of the request is <i>incredibly</i> offensive; <b>they have effectively asked for the keys to my house in order to riffle through my address book.</b>
<p>
I don't think so.
</p>
<p>
Frankly, it's irresponsible to even ask this question. Naive internet users may not understand why it is such a profoundly bad idea to give out their email credentials to random websites. Worse, they might eventually get the idea that giving out their email credentials is typical or normal.
</p>
<p>
It's not. This is outlined quite literally in most privacy policies:
</p>
<p>
</p>
<blockquote>
The security of your account also depends on keeping your account password confidential, and you should not share your account name or password with anyone. If you do share your account information with a third party, they will have access to your account and your personal information. -- <a href="https://checkout.google.com/files/privacy.html">Google Checkout</a>
<p>
If a password is used to help protect your accounts and personal information, it is your responsibility to keep your password confidential. Do not share this information with anyone. If you are sharing a computer with anyone you should always choose to log out before leaving a site or service to protect access to your information from subsequent users. -- <a href="http://privacy.microsoft.com/en-us/fullnotice.aspx">Microsoft Passport</a>
</p>
<p>
Your Yahoo! ID and password are confidential information. A Yahoo! employee will never ask you for your password in an unsolicited phone call or email. Do not respond to any message that asks for your password. -- <a href="http://security.yahoo.com/article.html?aid=2006102510">Yahoo</a>
</p>
</blockquote>
<p>
How did we end up in a world where it's even remotely acceptable to ask for someone's email credentials? What happened to all those years we spent establishing privacy policies to protect our users? What happened to the fundamental tenet of security common sense that says <b>giving out your password, under any circumstances, is a bad idea?</b>
</p>
<p>
I can understand the cutthroat desire to build monetizable "friend" networks by any means necessary. Even if it means encouraging your users to cough up their login credentials to competing websites. But how can I take your privacy policies seriously if you aren't willing to treat your competitors' login credentials with the very same respect that you treat your own? That's just lip service.
</p>
<p>
Email is the de-facto master password for a huge swath of your online identity. Tread carefully:
</p>
<p>
</p>
<ul>
<li>As a software developer, you should <i>never</i> ask a user for their email credentials.  It's unethical. It's irresponsible. It is wrong. If someone is asking you to code this, why? For what purpose?
</li>
<li>As a user, you should <i>never</i> provide your email credentials to anyone except your email service. Sites that ask you for this information are to be regarded with extreme suspicion if not outright distrust.
</li>
</ul>
<p>
Beyond those ethical guidelines, I do wonder why the technological solution to this problem has barely been addressed. If all Yelp wants is my address book, <b>why can't I grant them temporary access to my public email address book <i>without</i> giving out the keys to my email kingdom?</b>
</p>
<p>
If even a fraction of the coding effort that regularly goes into convincing people to cough up their email or website login credentials went into finding other, more reasonable solutions to this problem -- perhaps we could have arrived at a saner solution by now. And we can start by <b>taking obnoxious, utterly inappropriate credential requests completely off the table.</b>
</p>
<p>
<font color="red">UPDATE:</font> Several commenters brought to light some efforts underway to address this pernicious problem:
</p>
<p>
</p>
<ul>
<li>
<a href="http://code.google.com/apis/contacts/">Google Contacts API</a> (related <a href="http://code.google.com/apis/accounts/docs/AuthForWebApps.html">documentation</a>)
</li>
<li>
<a href="http://developer.yahoo.com/addressbook/">Yahoo! Contact API</a> (related <a href="http://developer.yahoo.com/auth/user.html">documentation</a>)
</li>
<li>
<a href="http://msdn.microsoft.com/en-us/library/bb463989.aspx">Windows Live Contact API</a> (as publicized in <a href="http://blogs.msdn.com/angus_logan/">Angus Logan's blog</a>)
</li>
</ul>
<p>
A more general solution may be <a href="http://oauth.net/">OAuth</a>, billed as an open standard for API access delegation. In other words, <a href="http://oauth.net/about/">a valet key for websites</a>:
</p>
<p>
</p>
<blockquote>
Many luxury cars today come with a valet key. It is a special key you give the parking attendant and unlike your regular key, will not allow the car to drive more than a mile or two. Some valet keys will not open the trunk, while others will block access to your onboard cell phone address book. Regardless of what restrictions the valet key imposes, the idea is very clever. You give someone limited access to your car with a special key, while using your regular key to unlock everything.
</blockquote>
<p>
Chris Messina of the OAuth project was kind enough to provide a number of related links in the comments and <a href="http://blog.oauth.net/2008/06/05/an-opportunity-for-oauth-jeff-codinghorror-atwood-highlights-the-password-anti-pattern/">a followup post on the OAuth blog as well</a>.
</p>
<p>
I was encouraged to learn about some of the recent progress we've made on this front. If you were looking for a way to be part of the solution, instead of the problem, read up on these solutions and participate!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-06-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/please-give-us-your-email-password/</guid>
</item>
</channel>
</rss>
