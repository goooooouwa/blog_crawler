<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Regular Expressions for Regular Programmers</title>
<link>https://blog.codinghorror.com/regular-expressions-for-regular-programmers/</link>
<content>
                <!--kg-card-begin: markdown--><p>
If you've followed my blog for any length of time, you know that <strong>I am a total regular expression fanboy</strong>. It's almost <a href="http://www.codinghorror.com/blog/archives/000245.html">embarrassing</a> how much I love the damn things. I'm pretty sure my teammates roll their eyes every time they see yet another class I've touched that has <code>using System.Text.RegularExpressions</code> at the top. You might as well rename it to <code>JeffHasBeenHere</code>.
</p>
<p>
I say that because I end up writing a lot of string handling code, even when people <a href="http://www.codinghorror.com/blog/archives/001172.html">tell me I shouldn't</a>. Now, I only advocate <a href="http://www.codinghorror.com/blog/archives/001016.html">responsible and judicious use of regular expressions</a> when you happen to be dealing with strings. In the wrong hands, regular expressions can be dangerous. You might end up wondering <a href="http://www.codinghorror.com/blog/archives/000214.html">if Q*Bert just vomited all over your source code</a>. Or you might be programming in Perl. Is there any difference? (<a href="http://www.instantrimshot.com/">instant rimshot</a>)
</p>
<p>
But I digress. Although I love regex, I've never been a fan of the classic regular expression reference book, Friedl's <a href="http://www.amazon.com/dp/0596528124/?tag=codihorr-20">Mastering Regular Expressions</a>. I found it dry, a bit academic, and lacking in practical real world examples. It just didn't speak to me as a working programmer in the way that regular expressions themselves did, and that was disappointing.
</p>
<p>
That's why I was so excited to discover that two of the gnarliest regex gurus I knew – <a href="http://www.just-great-software.com/aboutjg.html">Jan Goyvaerts</a> (author of <a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood">RegexBuddy</a> and <a href="http://www.regular-expressions.info/">regular-expressions.info</a>) and <a href="http://blog.stevenlevithan.com/">Steven Levithan</a> (author of <a href="http://blog.stevenlevithan.com/code">XRegExp</a> and <a href="http://regexpal.com/">RegexPal</a>) – were putting their heads together to create <strong>a regular expression reference for the rest of us</strong>. I <em>immediately</em> pre-ordered it sight unseen.
</p>
<p>
That book is <a href="http://www.amazon.com/dp/1449319432/?tag=codihorr-20">Regular Expressions Cookbook</a>. It arrived a few days ago, and although my expectations were high, I think this book has exceeded even the loftiest expectations I had. It is <em>outstanding</em>.
</p>
<p>
<a href="http://www.amazon.com/dp/1449319432/?tag=codihorr-20"><img class="at-xid-6a0120a85dcdae970b0120a86e21f3970b" src="https://blog.codinghorror.com/content/images/uploads/2009/06/6a0120a85dcdae970b0120a86e21f3970b-pi.png" border="0" alt="regular-expressions-cookbook.png" width="350" height="459"></a>
</p>
<p>
What I love about this book is <s>two</s>three things:
</p>
<ol>
<li>It's filled with <strong>practical, real world examples of RegEx use</strong>. At every step of the way, from beginner to master level, you're building regular expressions that are actually useful in the wild, and not just abstract, obtuse academic exercises in solving string matching puzzles.<br><br>
</li>
<li>It covers all the <strong>common gotchas</strong> that you inevitably run into when you start building non-trivial regular expressions. Things like the sometimes massive (and painful) differences between regex libraries in various languages, subtle regex flavor quirks, catastrophic backtracking, unicode support, and so forth. These are all presented in context of the solutions, exactly as you'd encounter them in real programming. I know because I have the scars to prove it.<br><br>
</li>
<li>It was <b>updated and revised in the second edition</b> to reflect current flavor differences with new recipes, plus a whole new chapter on source code and log files. It also covers <a href="https://github.com/slevithan/xregexp">XRegExp</a>, an emerging standard, fully-featured regex library for JavaScript.
</li>
</ol>
<p>
<a href="http://www.amazon.com/dp/1449319432/?tag=codihorr-20">Regular Expressions Cookbook </a> manages to be simultaneously accessible and almost <em>ridiculously</em> comprehensive. I consider myself a fairly advanced regex user and about 50 pages in I've already had three big "oh, wow, I didn't realize that" moments. In my mind, at least, this completely replaces the Friedl book as the go-to reference for programmers of any skill level or background who seek regular expression enlightenment.
</p>
<p>
Needless to say, <em>recommended</em>.
</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-06-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/regular-expressions-for-regular-programmers/</guid>
</item>
</channel>
</rss>
