<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Long, Dismal History of Software Project Failure</title>
<link>https://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/</link>
<content>
                <!--kg-card-begin: markdown--><p>
From the IEEE article <a href="http://www.spectrum.ieee.org/sep05/1685">Why Software Fails</a>:
</p>
<p>
</p>
<blockquote>
Last October, for instance, the giant British food retailer <a href="http://en.wikipedia.org/wiki/J_Sainsbury">J Sainsbury</a> had to write off its US $526 million investment in an automated supply-chain management system. Merchandise was stuck in the company's depots and warehouses and was not getting through to many of its stores. Sainsbury was forced to hire about 3000 additional clerks to stock its shelves manually.
<p>
This is only one of the latest in a long, dismal history of [software] projects gone awry. Most IT experts agree that such failures occur far more often than they should. What's more, the failures are universally unprejudiced: they happen in every country; to large companies and small; in commercial, nonprofit, and governmental organizations; and without regard to status or reputation. The business and societal costs of these failures -- in terms of wasted taxpayer and shareholder dollars as well as investments that can't be made -- are now well into the billions of dollars a year.
</p>
<p>
The problem only gets worse as IT grows ubiquitous. This year, organizations and governments will spend an estimated $1 trillion on IT hardware, software, and services worldwide. Of the IT projects that are initiated, from 5 to 15 percent will be abandoned before or shortly after delivery as hopelessly inadequate. Many others will arrive late and over budget or require massive reworking. Few IT projects, in other words, truly succeed.
</p>
</blockquote>
<p>
From <a href="http://www.amazon.com/exec/obidos/ASIN/1556159005/codihorr-20">Rapid Development</a>:
</p>
<p>
</p>
<blockquote>
If Las Vegas sounds too tame for you, software might just be the right gamble. Software projects include a glut of risks that would give Vegas oddsmakers nightmares. The odds of a large project finishing on time are close to zero. The odds of a large project being canceled are an even-money bet (Jones 1991).
<p>
In 1998, Peat Marwick found that about 35 percent of 600 firms surveyed had at least one runaway software project (Rothfeder 1988). The damage done by runaway software projects makes the Las Vegas prize fights look as tame as having high tea with the queen. Allstate set out in 1982 to automate all of its office operations. They set a 5-year timetable and an $8 million budget. Six years and $15 million later, Allstate set a new deadline and readjusted its sights on a new budget of $100 million. In 1988, Westpac Banking Corporation decided to redefine its information systems. It set out on a 5-year, $85 million project. Three years later, after spending $150 million with little to show for it, Westpac cut its losses, canceled the project, and eliminated 500 development jobs (Glass 1992). Even Vegas prize fights don't get this bloody.
</p>
</blockquote>
<p>
The history of software development is a tremendous success. Just look around you for evidence of that. But that success has a long, dark shadow that we don't talk about very much: it's littered with colossal failures. What's particularly disturbing is that the colossal failures keep recurring year after year. The names and dollar amounts may change, but the story is otherwise the same. Two recent examples are the <a href="http://www.cbc.ca/story/news/national/2004/02/13/gunregistry_rdi040213.html">Canadian gun registry</a> and the <a href="http://www.cnn.com/2005/US/02/03/fbi.computers/">FBI's Virtual Case File system</a>.
</p>
<p>
If you're looking for more examples of colossal software project failure, you don't have to look very far:
</p>
<p>
</p>
<ul>
<li>
<a href="http://spectrum.ieee.org/sep05/1685/failt1">Software Hall of Shame</a> (from IEEE article <a href="http://www.spectrum.ieee.org/sep05/1685">Why Software Fails</a>)
</li>
<li>
<a href="http://www.wired.com/news/technology/bugs/0,2924,69355,00.html">History's Worst Software Bugs</a> (Wired)
</li>
<li>
<a href="http://www.cs.tau.ac.il/~nachumd/horror.html">Software Horror Stories</a> (Nachum Deshowitz, Tel Aviv University)
</li>
<li>
<a href="http://catless.ncl.ac.uk/Risks">Forum on Computer Risks</a> (ACM moderated mailing list)
</li>
<li>
<a href="http://www.it-cortex.com/Stat_Failure_Rate.htm">Failure Rate</a> (collection of failure rate statistics from IT surveys)
</li>
</ul>
<p>
You'd think that the software development industry would have matured over the last ten years. And <a href="http://www.softwaremag.com/L.cfm?Doc=newsletter/2004-01-15/Standish">it has</a>:
</p>
<p>
</p>
<blockquote>
The 10th edition of the annual CHAOS report from The Standish Group, which researches the reasons for IT project failure in the United States, indicates that project success rates have increased to 34 percent of all projects. That's more than a 100-percent improvement from the success rate found in <a href="http://www.standishgroup.com/sample_research/chaos_1994_1.php">the first study in 1994</a>.
<p>
Asked for the chief reasons project success rates have improved, Standish Chairman Jim Johnson says, "The primary reason is the projects have gotten a lot smaller. Doing projects with iterative processing as opposed to the waterfall method, which called for all project requirements to be defined up front, is a major step forward."
</p>
<p>
The Standish Group has studied over 40,000 projects in 10 years to reach the findings.
</p>
<p>
Project failures have declined to 15 percent of all projects, a vast improvement over the 31-percent failure rate reported in 1994. Projects meeting the "challenged" description -- meaning that they are over time, over budget and/or lacking critical features and requirements --  total 51 percent of all projects in the current survey.
</p>
</blockquote>
<p>
Failing is OK. <a href="http://www.codinghorror.com/blog/archives/000576.html">Failing can even be desirable</a>. But you must <a href="http://www.codinghorror.com/blog/archives/000300.html">learn from your failures</a>, and that requires concerted <a href="http://www.codinghorror.com/blog/archives/000456.html">postmortem introspection and analysis</a>. I'd like to think that a large part of the statistical improvement cited above is attributable to sharp project managers and savvy developers who <b>studied the first CHAOS report</b>. Once you know what <a href="http://www.codinghorror.com/blog/archives/000017.html">the common pitfalls are</a>, it's easier to avoid them.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-05-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/</guid>
</item>
</channel>
</rss>
