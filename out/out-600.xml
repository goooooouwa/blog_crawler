<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Reducing User Interface Friction</title>
<link>https://blog.codinghorror.com/reducing-user-interface-friction/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Tantek elik recently wrote a great entry on <a href="http://tantek.com/log/2007/02.html#d19t1813">cognitive load in user interface</a>, comparing instant messaging and email:
</p>
<p>
</p>
<blockquote>
To instant message (IM) someone, you merely:
<p>
</p>
<ol>
<li>switch to your IM client
</li>
<li>double click their name
</li>
<li>type your message
</li>
<li>press return
</li>
</ol>
<p>
To email someone, you have to:
</p>
<p>
</p>
<ol>
<li>switch to your email client
</li>
<li>choose "New/Compose Message" from the interface
</li>
<li>type the recipient's name (autocomplete in most email programs typically helps to reduce this to 3-4 keystrokes)
</li>
<li>type tab or return to go to the next field (typically another to or cc field)
</li>
<li>type tab or return again to go to the subject field
</li>
<li>think up a subject (or ideally skip it)
</li>
<li>type a subject (or ideally skip it)
</li>
<li>type tab or return again to go to the message body field
</li>
<li>type in your message
</li>
<li>click send
</li>
</ol>
<p>
Ideally, assuming no subject (which is atypical), and only typing 3 letters to autocomplete the recipients name, that's ten steps-- more than 3x the interface overhead of IM.
</p>
</blockquote>
<p>
Jan Miksovsky covers similar ground when enumerating <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html">the hurdles at the entrance to a website</a>:
</p>
<p>
</p>
<blockquote>
<ol>
<li>Figure out what the service does, and whether it meets your needs.
</li>
<li>Find the entry point for signing up.
</li>
<li>Pick a user ID.
</li>
<li>If the user ID isn't an email address, enter their email address.
</li>
<li>Pick a password.
</li>
<li>Enter the password again to confirm it.
</li>
<li>Pick the password several more times to comply with arbitrary security requirements.
</li>
<li>Write down the password somewhere before you forget the new variation of your usual password that finally made it past the arbitrary security requirements.
</li>
<li>Enter personal data used to configure the service to your needs.
Comply with (or carefully turn down) requests for demographic data for marketing purposes. This may include opting out of requests to be added to email newsletters.
</li>
<li>Agree to terms of use and other legal agreements.
</li>
<li>Activate their account. The user might need to switch to a completely different application-- their email client-- and look for a message from the service.
</li>
<li>Download software. If the service entails client software or browser plug-ins, the user has an additional dozen hurdles to jump through: the browser's save dialog, progress dialog, "Are you sure you want to run this?" dialog, an elevate-to-administrator security dialog, and probably a firewall dialog-- not to mention the software's own overly long sequence of setup questions.
</li>
</ol>
</blockquote>
<p>
John Gruber offers another example <a href="http://daringfireball.net/2007/03/deal_with_it">comparing calendar entry overhead</a>:
</p>
<p>
</p>
<blockquote>
My typical usage [in <a href="http://www.apple.com/macosx/features/ical/">iCal</a>]:
<p>
</p>
<ol>
<li>Double-click on the date of the event in month view.
</li>
<li>Type the event name.
</li>
<li>Tab past Location.
</li>
<li>Tab past "all-day" checkbox.
</li>
<li>Tab past Month.
</li>
<li>Tab past Day.
</li>
<li>Tab past Year.
</li>
<li>Enter the hour.
</li>
<li>Enter the minutes.
</li>
<li>Swap the AM/PM.
</li>
</ol>
<p>
Compare and contrast to the event entry UI for the calendar feature in <a href="http://www.backpackit.com/">Backpack</a>:
</p>
<p>
</p>
<ol>
<li>Double-click on the date of the event in month view.
</li>
<li>Type the time and name of the event.
</li>
</ol>
</blockquote>
<p>
Whether you call it cognitive load, a sequence of hurdles, interface overhead, or just plain excise, it all adds up to the same thing: <b>interface friction for the user</b>. Sand in the gears of their mind. One more unnecessary thing they have to <a href="http://www.codinghorror.com/blog/archives/000377.html">think about</a> before using your application.
</p>
<p>
<b>How many steps does it take to do something in <i>your</i> application?</b> Have you counted? Have you thought about ways to reduce or eliminate those steps for your users? If not, you absolutely should be. Fire up your application and start counting as you click and type through the most common user scenarios. I think you'll be unpleasantly surprised.
</p>
<p>
Some interface friction is inevitable. But it is possible to reduce interface friction to an absolute minimum. One of the best "frictionless" sign-up user interfaces I've ever seen is at <a href="http://reddit.com">reddit</a>. If you click any element that requires login, you're presented with an overlay &lt;div&gt; that allows you to sign up in a single step and also complete the action you originally clicked on, in one fell swoop:
</p>
<p>
<img alt="Reddit login" border="0" class="at-xid-6a0120a85dcdae970b0120a86d96ee970b" height="371" src="https://blog.codinghorror.com/content/images/uploads/2007/05/6a0120a85dcdae970b0120a86d96ee970b-pi.png" width="641">
</p>
<p>
Reduced interface friction goes a long way toward explaining the popularity of services like <a href="http://www.twitter.com/">twitter</a> and <a href="http://www.tumblr.com/">tumbr</a>. What's the minimum amount of effort a user can expend to produce something? The answer could be a key competitive advantage.
</p>
<p>
That single input box on the Google homepage starts to look more and more like <a href="http://www.codinghorror.com/blog/archives/000595.html">an optimal user experience</a>. It might be unrealistic to reduce your application's UI to a single text box-- but you should <b>continually strive to reduce the friction of your user interface</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-05-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/reducing-user-interface-friction/</guid>
</item>
</channel>
</rss>
