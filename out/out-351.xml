<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Physics Based Games</title>
<link>https://blog.codinghorror.com/physics-based-games/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I've always been fascinated by physics-based gameplay. Even going back to the primeval days of classic arcade gaming, I found vector-based games, with their vastly simplified 2D approximations of physics and motion, more compelling than their raster brethren. I'm thinking of games like <a href="http://en.wikipedia.org/wiki/Asteroids_(computer_game)">Asteroids</a>, <a href="http://en.wikipedia.org/wiki/Battlezone_(1980_video_game)">Battlezone</a>, and <a href="http://en.wikipedia.org/wiki/Lunar_Lander_(arcade_game)">Lunar Lander</a>.
</p>
<p>
Accurately simulating the physics of the real world has been <a href="http://news.uchicago.edu/news.php?asset_id=1354">the domain of supercomputers</a> for decades. The <a href="http://gameplanets.blogspot.com/2007/06/physics-simulations.html">simulation of even "simple" physical phenomena like fire, smoke, and water</a> requires a staggering amount of math. Now that we almost have multicore supercomputers on every desktop, it's only natural that aspect of computing would trickle down to us.
</p>
<p>
This topic is particularly relevant in light of <a href="http://www.techreport.com/articles.x/14934/2">today's introduction of NVIDIA's newest video card, the GTX 280</a>, which contains <b>a whopping 1.4 <i>billion</i> transistors</b>. That's a lot. For context and scale, here's a shot of the 280 GPU next to a modern Intel dual-core CPU.
</p>
<p>
<img alt="gtx-280-vs-penryn.jpg" border="0" class="at-xid-6a0120a85dcdae970b0120a86dcfbe970b" height="365" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dcfbe970b-pi.jpg" width="360">
</p>
<p>
I've talked about this before in <a href="http://www.codinghorror.com/blog/archives/000732.html">CPU vs. GPU</a>, but it bears repeating: <b>some of the highest performing hardware in your PC lies on your video card</b>. At least for a certain <a href="http://www.tomshardware.co.uk/nvidia-gtx-280,review-30971-24.html">highly parallelizable set of tasks</a>.
</p>
<p>
</p>
<blockquote>
We were able to compress our test video (400 MB) in iPhone format (640*365) at maximum quality in 56.5 seconds on the 260 GTX and 49 seconds on the 280 GTX (15% faster). For comparison purposes, the iTunes H.264 encoder took eight minutes using the CPU (consuming more power overall but significantly less on peaks).
</blockquote>
<p>
While one of <a href="http://www.codinghorror.com/blog/archives/001110.html">the primary benefits of manycore CPUs is radically faster video encoding</a>, let's put this in context -- compared to the newest, speediest quad core CPU, you can encode video <b>ten times faster</b> using a modern video card GPU. It's my hope that <a href="http://www.nvidia.com/object/cuda_home.html">CUDA</a>, Microsoft's <a href="http://channel9.msdn.com/wiki/accelerator/homepage/">Accelerator</a>, and Apple's <a href="http://www.apple.com/pr/library/2008/06/09snowleopard.html">Grand Central</a>/<a href="http://en.wikipedia.org/wiki/OpenCL">OpenCL</a> will make this more accessible to a wide range of software developers.
</p>
<p>
All this physics horsepower, whether it's coming from yet another manycore x86 CPU, or a massively parallel GPU, is there for the taking. There are quite a few <a href="http://en.wikipedia.org/wiki/Physics_engine">physics engines</a> available to programmers:
</p>
<p>
</p>
<ul>
<li>
<a href="http://tryhavok.intel.com/">Havok</a>
</li>
<li>
<a href="http://www.newtondynamics.com/downloads.html">Newton</a>
</li>
<li>
<a href="http://www.ode.org/">Open Dynamics Engine</a>
</li>
<li>
<a href="http://www.cove.org/ape/index.htm">Actionscript Physics Engine</a>
</li>
<li>
<a href="http://www.codeplex.com/FarseerPhysics">Farseer Physics Engine</a>
</li>
<li>
<a href="http://developer.nvidia.com/object/physx.htm">NVIDIA PhysX</a>
</li>
<li>
<a href="http://bulletphysics.com/">Bullet Physics</a>
</li>
</ul>
<p>
There are no shortage of <a href="http://www.fun-motion.com/list-of-physics-games/">physics games</a> and sandboxes to play with this stuff, too. Here are a few of my favorites.
</p>
<p>
Perhaps the most archetypal physics based game is Chronic Logic's <a href="http://www.chroniclogic.com/index.htm?pontifex2.htm">Bridge Construction Set</a>, the original version of which dates way back to 1999. I'm showing a picture of their fancy NVIDIA branded version below, but it's hardly about the graphics. This is pure physics simulation at its most entertaining. Who knew civil engineering could be so much <i>fun?</i> Highly recommended.
</p>
<p>
<a href="http://www.chroniclogic.com/index.htm?bridgeit.htm"><img alt="Bridge It! screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86dd000970b" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dd000970b-pi.jpg" width="600"></a>
</p>
<p>
Oh, and small hint: after playing this game, you will learn to love the power and beauty of the simple triangle. You'll also marvel at the longer bridges you manage to drive across without plunging into the watery abyss underneath.
</p>
<p>
I've professed my love for <a href="http://www.codinghorror.com/blog/archives/000255.html">The Incredible Machine and other Rube Goldberg devices before</a>. The physics based game <a href="http://www.armadillorun.com/">Armadillo Run</a> is a modern iteration of same. Get the armadillo from point A to point B using whatever gizmos and gadgets you find in your sandbox -- rendered in glorious 3D with a full-blown 2D physics engine in the background.
</p>
<p>
<a href="http://www.armadillorun.com/"><img alt="armadillo run screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86dd041970b" height="533" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dd041970b-pi.jpg" width="535"></a>
</p>
<p>
The latest physics based game to <a href="http://www.rockpapershotgun.com/?p=1416">generate a lot of buzz</a> is <a href="http://www.redlynxtrials.com/index.jsp">Trials 2: Second Edition</a>. I haven't had a chance to try it yet, but the <a href="http://www.youtube.com/watch?v=25DbdzrU8R4">gameplay movie</a> is extremely impressive. Like Armadillo run, the action is all on a 2D plane, but the physics are impeccable.
</p>
<p>
<a href="http://www.redlynxtrials.com/index.jsp"><img alt="Trials 2: Second Edition screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86dd074970b" height="414" src="https://blog.codinghorror.com/content/images/uploads/2008/06/6a0120a85dcdae970b0120a86dd074970b-pi.jpg" width="600"></a>
</p>
<p>
I'm sure I've forgotten a few physics based games here; peruse <a href="http://www.fun-motion.com/list-of-physics-games/">this giant list of physics games</a> to see if your favorite is already included.
</p>
<p>
See, physics <i>can</i> be fun -- and <b>increasingly complex physics engines</b> are an outstanding way to harness the massive computational horsepower that lies dormant in most modern PCs.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-06-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/physics-based-games/</guid>
</item>
</channel>
</rss>
