<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>We Done Been ... Framed!</title>
<link>https://blog.codinghorror.com/we-done-been-framed/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In my previous post, <a href="http://www.codinghorror.com/blog/archives/001276.html">Url Shorteners: Destroying the Web Since 2002</a>, I mentioned that one of the "features" of the new generation of URL shortening services is to frame the target content.
</p>
<p>
Digg is one of the most popular sites to implement this strategy. Here's how it works. If you're logged in to <a href="http://digg.com/">Digg</a>, every target link you click from Digg is a shortened URL of their own creation. If I click through to a Stack Overflow article someone else has "Dugg", I'm sent to this link.
</p>
<p>
<a href="http://digg.com/d1tBya">http://digg.com/d1tBya</a>
</p>
<p>
<img alt="diggbar-stack-overflow-screenshot.png" class="at-xid-6a0120a85dcdae970b01287770968f970c" height="170" src="https://blog.codinghorror.com/content/images/uploads/2009/06/6a0120a85dcdae970b01287770968f970c-pi.png" width="720">
</p>
<p>
For logged in users, every outgoing Digg link is framed inside the <a href="http://digg.com/tools/diggbar">"DiggBar"</a>. It's a way of dragging the Digg experience with you wherever you go -- while you're reading the target article, you can vote it up, see related articles, share, and so forth. And if you share this shortened URL with other users, they'll get the same behavior, provided they also hold a Digg login cookie.
</p>
<p>
At this point you're probably expecting me to rant about how evil the DiggBar is, and how it, too, is destroying the web, etcetera, etcetera, so on, and so forth. But I can't muster the indignant rage. I can give you, at best, ambivalence. Here's why:
</p>
<p>
</p>
<ol>
<li>The DiggBar is not served to the vast majority of anonymous users, but only to users who have opted in to the Digg experience by signing up.
</li>
<li>The <a href="http://www.google.com/support/webmasters/bin/answer.py?hl=en&amp;answer=139394">new rel="canonical" directive</a> is used on target links so search engines can tell which links are the "real", authoritative links to the content. They won't be confused or have search engine juice diluted by Digg's shortened URLs. At least that's the theory, anyway.
</li>
<li>No Digg ads are served via the DiggBar, so the framed content is not "wrapped" in ads.
</li>
<li>I believe Digg users themselves can opt out of DiggBar via a preferences setting.
</li>
</ol>
Digg is trying to build a business, just like we are with Stack Overflow. I can't fault them for their desire to extend the Digg community outward a little bit, given the zillions of outgoing links they feed to the world. Particularly when they attempted to do so in a semi-ethical way, actively soliciting community feedback along the way.
<p>
In short, Digg isn't the problem. But even if they <i>were</i> -- if you don't want to be framed by the DiggBar, or any other website for that matter, you could <b>put so-called "frame-busting" JavaScript</b> in your pages.
</p>
<p>
</p>
<pre>
if (parent.frames.length &gt; 0) {
top.location.replace(document.location);
}
</pre>
<p>
Problem solved! This code (or the many frame-busting variants thereof) <i>does</i> work on the DiggBar. But not every framing site is as reputable as Digg. What happens when we put on our hypothetical black hats and start <a href="http://www.codinghorror.com/blog/archives/001123.html">designing for evil?</a>
</p>
<p>
I'll tell you what happens. <a href="http://coderrr.wordpress.com/2009/02/13/preventing-frame-busting-and-click-jacking-ui-redressing/">This happens</a>.
</p>
<p>
</p>
<blockquote>
<pre>
var prevent_bust = 0
window.onbeforeunload = function() { prevent_bust++ }
setInterval(function() {
if (prevent_bust &gt; 0) {
prevent_bust -= 2
window.top.location = 'http://server-which-responds-with-204.com'
}
}, 1)
</pre>
<p>
On most browsers a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">204 (No Content) HTTP response</a> will do nothing, meaning it will leave you on the current page. But the request attempt will override the previous frame busting attempt, rendering it useless. If the server responds quickly this will be almost invisible to the user.
</p>
</blockquote>
<p>
When life serves you lemons, make a lemon cannon. Produce frame-busting-<i>busting</i> JavaScript. This code does the following:
</p>
<p>
</p>
<ul>
<li>increments a counter every time the browser attempts to navigate away from the current page, via the <code>window.onbeforeonload</code> event handler
</li>
<li>sets up a timer that fires every millisecond via <code>setInterval()</code>, and if it sees the counter incremented, changes the current location to an URL of the attacker's control
</li>
<li>that URL serves up a page with HTTP status code 204, which does not cause the browser to navigate anywhere
</li>
</ul>
<p>
Net effect: frame-busting busted. Which might naturally lead you to wonder -- <b>hey buster, can you bust the frame-busting buster?</b> And, if so, <a href="http://www.youtube.com/watch?v=Iw3G80bplTg">where does it end?</a>
</p>
<p>
</p>
<blockquote>
In the 1998 movie, <a href="http://www.imdb.com/title/tt0120609/">The Big Hit</a>, the protagonists kidnap the daughter of an extremely wealthy Japanese businessman. When they call to deliver the ransom notice, they turn to Gump who employs a brand name Trace Buster to prevent police from tracing the call.
<p>
<a href="http://www.imdb.com/title/tt0120609/"><img alt="the-big-hit-cover.jpg" border="0" class="at-xid-6a0120a85dcdae970b0128777096c8970c" height="463" src="https://blog.codinghorror.com/content/images/uploads/2009/06/6a0120a85dcdae970b0128777096c8970c-pi.jpg" width="403"></a>
</p>
<p>
Unbeknownst to Gump, the father has a Trace-Buster-Buster at his disposal. This in turn triggers Gump to use his Trace-Buster-Buster-Buster in an ever escalating battle to evade detection.
</p>
</blockquote>
<p>
What's really scary is that <a href="http://stackoverflow.com/questions/958997/frame-buster-buster-buster-code-needed">near as I can tell</a>, <b>there is no solution</b>. Due to cross-domain JavaScript security restrictions, it is almost impossible for the framed site to block or interfere with the parent page's evil JavaScript that is intentionally and aggressively blocking the framebusting.
</p>
<p>
<b>If an evil website decides it's going to frame your website, you <i>will</i> be framed. Period.</b> Frame-busting is nothing more than a false sense of security; it doesn't work. This was a disturbing revelation to me, because framing is the first step on the road to <a href="http://en.wikipedia.org/wiki/Clickjacking">clickjacking</a>:
</p>
<p>
</p>
<blockquote>
A clickjacked page tricks a user into performing undesired actions by clicking on a concealed link. On a clickjacked page, the attackers show a set of dummy buttons, then load another page over it in a transparent layer. <b>The users think that they are clicking the visible buttons, while they are actually performing actions on the hidden page.</b> The hidden page may be an authentic page, and therefore the attackers can trick users into performing actions which the users never intended to do and there is no way of tracing such actions later, as the user was genuinely authenticated on the other page.
<p>
For example, a user might play a game in which they have to click on some buttons, but another authentic page like a web mail site from a popular service is loaded in a hidden iframe on top of the game. The iframe will load only if the user has saved the password for its respective site. The buttons in the game are placed such that their positions coincide exactly with the select all mail button and then the delete mail button. The consequence is that the user unknowingly deleted all the mail in their folder while playing a simple game. Other known exploits have been tricking users to enable their webcam and microphone through flash (which has since been corrected by Adobe), tricking users to make their social networking profile information public, making users follow someone on Twitter, etc.
</p>
</blockquote>
<p>
I've fallen prey to <a href="http://dsandler.org/wp/archives/2009/02/12/dontclick">a mild clickjacking exploit</a> on Twitter myself! It really does happen -- and it's not hard to do.
</p>
<p>
Yes, Digg frames ethically, so your frame-busting of the DiggBar will appear to work. But if the framing site is evil, good luck. When faced with a determined, skilled adversary that wants to frame your contnet, all bets are off. I don't think it's possible to escape. So consider this a wakeup call: you should build clickjacking countermeasures as if your website could be framed <i>at any time</i>.
</p>
<p>
I was a skeptic. I didn't want to believe it either. But once shown the exploits on our own site  -- fortunately, by a white hat security expert -- I lived to regret that. <b>Don't let frame-busting code lull you into a false sense of security, too.</b>
</p>
<p>
</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-06-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/we-done-been-framed/</guid>
</item>
</channel>
</rss>
