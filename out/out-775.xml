<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>A Visit from the Metrics Maid</title>
<link>https://blog.codinghorror.com/a-visit-from-the-metrics-maid/</link>
<content>
                <!--kg-card-begin: markdown--><p>
For the last few days, I've been surveying a software project. Landing on a planet populated entirely by an alien ecosystem of source code can be overwhelming. That's why the first first thing I do is bust out my <b>software tricorder</b> -- <a href="http://www.codinghorror.com/blog/archives/000381.html">static code analysis tools</a>.
</p>
<p>
The two most essential static code analysis tools, for .NET projects, are <a href="http://www.ndepend.com/">nDepend</a> and <a href="http://www.gotdotnet.com/team/FxCop/">FxCop</a>. Like real software tricorders, they produce reams and reams of data -- lots of <b>raw metrics on the source code</b>.
</p>
<p>
Even basic metrics can identify potential trouble spots and/or areas of interest in the code, such as..
</p>
<p>
</p>
<ul>
<li>Methods that are too large or too small.
</li>
<li>Classes that are too large or too small.
</li>
<li>Methods that are too complex (as measured by <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a>).
</li>
<li>Methods with too many parameters (more than <a href="http://www.codinghorror.com/blog/archives/000658.html">7 plus or minus 2</a>).
</li>
<li>Methods with too many local variables.
</li>
<li>Classes with an excessively deep inheritance structure.
</li>
<li>Types that are excessively large.
</li>
</ul>
<p>
These simple metrics are already quite valuable. You can imagine how valuable more advanced software metrics could be, such as <a href="http://software.ericsink.com/articles/Code_Coverage.html">code coverage</a>. Or how quickly you're finding and fixing bugs. And more advanced static analysis tools can offer literally <a href="http://msdn2.microsoft.com/en-us/library/ee1hzekz.aspx">hundreds of recommendations</a>, ranging from mundane to mission-critical.
</p>
<p>
Having more data about your software development project can never be bad. The real trick, of course, lies in interpreting all that data, and deciding how to act on it. There's <b>a huge temptation to become a metermaid-- to use the metrics as a reward or punishment system</b>.
</p>
<p>
<img alt="A metermaid" border="0" class="at-xid-6a0120a85dcdae970b0128776ff0d4970c" height="356" src="https://blog.codinghorror.com/content/images/uploads/2006/09/6a0120a85dcdae970b0128776ff0d4970c-pi.jpg" width="276">
</p>
<p>
If Joe wrote a method with a cyclomatic complexity of 52, then he better get slapped with a complexity ticket, right? No excess complexity in the simplicity zone, you idiot!
</p>
<p>
Not necessarily. <b>Responsible use of the metrics is just as important as collecting them in the first place.</b> <a href="http://www.eaipatterns.com/ramblings/41_metrics.html">Gregor Hohpe elaborates</a>:
</p>
<p>
</p>
<blockquote>
Some of the most hated people in San Francisco must be the meter maids, the DPT people who drive around in golf carts and hand out tickets to anyone who overslept street cleaning or did not have enough quarters for the meter. On some projects, the most hated people are the metric maids, the people who go around and try to sum up a developer's hard work and intellectual genius in a number between 1 and 10.
<p>
Many managers love metrics: "You can't manage it if you can't measure it". I am actually a big proponent of extracting and visualizing information from large code bases or running systems (see <a href="http://www.eaipatterns.com/ramblings/11_dependencies.html">Visualizing Dependencies</a>). But when one tries to boil the spectrum between good and evil down to a single number we have to be careful as to what this number actually expresses.
</p>
</blockquote>
<p>
Martin Woodward calls this <a href="http://www.woodwardweb.com/vsts/000284.html">the measurement dilemma</a>.
</p>
<p>
</p>
<blockquote>
The reporting aspects of <a href="http://msdn.microsoft.com/vstudio/teamsystem/team/default.aspx?pull=/library/en-us/dnvs05/html/teamfoundatwrk.asp">Team Foundation Server</a> are a new, more accurate instrument to take measurements inside your software development process. But you need to be wary about the things you measure.  The metrics need to mean something useful rather than just be interesting.  The effect of taking the metric should be carefully considered before taking it.  This is not a new problem. But because <a href="http://msdn.microsoft.com/vstudio/teamsystem/team/default.aspx?pull=/library/en-us/dnvs05/html/teamfoundatwrk.asp">Team Foundation Server</a> makes it so easy to get data out of the system, the temptations are greater.
</blockquote>
<p>
Martin also references the <a href="http://en.wikipedia.org/wiki/Uncertainty_principle">Heisenberg Uncertainty Principle</a>, which states that you can't measure something without changing it. I believe this is true for software development metrics <b>only if you are using that metric to reward or punish.</b>
</p>
<p>
Recording metrics on your project can be beneficial <i>even if you don't explicitly act on them</i>. Having a public "wall of metrics" might be a better idea. It can be a focal point for discussion about what the metrics mean to the team. This gives everyone on the project an opportunity to discuss and reflect, and act on the metrics as they deem appropriate. Maybe the team will even remove a few metrics that are of no value.
</p>
<p>
What metrics do you find helpful on <i>your</i> software projects? What metrics do you find not so helpful? And if you have no project metrics to talk about, well, what are you waiting for?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-09-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-visit-from-the-metrics-maid/</guid>
</item>
</channel>
</rss>
