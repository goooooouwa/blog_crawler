<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Why Can't Database Tables Index Themselves?</title>
<link>https://blog.codinghorror.com/why-cant-database-tables-index-themselves/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Here's a thought question for today: <b>why can't database tables index themselves?</b>
</p>
<p>
Obviously, indexes are a central concept to databases and database performance. But horror tales still abound of naive developers who "forget" to index their tables, and encounter massive performance and scalability problems down the road as their tables grow. I've run into it personally, and I've read plenty of other sad tales of woe from other developers who have, too. I've also forgotten to build indexes myself on non primary key columns many times. Why aren't databases smart enough to automatically protect themselves from this?
</p>
<p>
It always struck me as absurd that I had to go in and manually mark fields in a table to be indexed. Perhaps in the bad old file-based days of FoxPro, DBase, and Access, that might have been a necessary evil. But in a modern client-server database, the server should be aware of all the queries flowing through the system, and how much each of those queries cost. <b>Who better to decide what needs to be indexed than the database itself?</b>
</p>
<p>
Why can't you enable an automatic indexing mode on your database server that follows some basic rules, such as..
</p>
<p>
</p>
<ol>
<li>Does this query result in a table scan?
</li>
<li>If so, determine which field(s) could be indexed, for that particular query, to remove the need for a table scan.
</li>
<li>Store the potential index in a list. If the potential index already exists in the list, bump its priority.
</li>
<li>After (some configurable threshold), build the most commonly needed potential index on the target table.
</li>
</ol>
<p>
Of course, for database gurus who are uncomfortable with this, the feature could be disabled. And you could certainly add more rules to make it more robust. But for most database users, it should be enabled by default; <b>an auto-indexing feature would make most database installations almost completely self-tuning</b> with no work at all on their part.
</p>
<p>
I did some cursory web searches and I didn't see any features like this for any commercial database server. What am I missing here? Why does this seem so obvious, and yet it's not out there?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-07-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-cant-database-tables-index-themselves/</guid>
</item>
</channel>
</rss>
