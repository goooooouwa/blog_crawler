<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Wind, Angle, and Power</title>
<link>https://blog.codinghorror.com/wind-angle-and-power/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One of the oldest computer games is <a href="http://www.atariarchives.org/morebasicgames/showpage.php?page=2">Artillery</a>. It's all about going <i>mano a mano</i> with nothing but <a href="http://www.armchairarcade.com/aamain/content.php?article.51">wind, angle, and power</a> on your side:
</p>
<p>
</p>
<blockquote>
The origins of artillery games are unclear, but the first such games were probably played on mainframe computers in the 60s. The programmers of this era often saw no commercial potential in their games and distributed them freely and anonymously with other mainframe operators, who often added features of their own. Gameplay consisted of players taking turns entering angles and power parameters via punch cards, then checking the printer output to see if they overshot or undershot. It was a more sophisticated version of Milton Bradley's Battleship board game. Keep in mind that these were the days when games like <a href="http://www.codinghorror.com/blog/files/wumpus_origin.htm">Hunt the Wumpus</a> were considered groundbreaking.
</blockquote>
<p>
Because they were simple, fun, and used some real physics calculations,  <b>artillery games were often used as programming samples</b>. Every copy of MS-DOS 5.0 and higher bundled a <a href="http://en.wikipedia.org/wiki/QBasic">QBasic</a> sample game, <a href="http://en.wikipedia.org/wiki/Gorilla_%28computer_game%29">gorilla.bas</a>. It's artillery with.. explosive banana-chucking gorillas. Naturally.
</p>
<p>
<img alt="QBasic Gorilla program" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6423970b" height="136" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d6423970b-pi.png" width="249">
</p>
<p>
However, <a href="http://www.classicgaming.com/scorch/">Scorched Earth</a> was the pinnacle of the artillery genre under DOS.
</p>
<p>
<img alt="Scorched Earth for DOS" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6436970b" height="174" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d6436970b-pi.jpg" width="250">
</p>
<p>
I remember playing the hell out of Scorched Earth in college. There's nothing quite as satisfying as nailing your opponent with the laughably ineffective "Funky Bomb". Between this, Civilization, and Lemmings, it's a wonder we got anything done at all!
</p>
<p>
There's a great <a href="http://arstechnica.com/articles/culture/scorched.ars">interview with Wendell T. Hicken</a>, the author of Scorched Earth, that illustrates <b>just how deeply games and programming are intertwined for many developers</b>:
</p>
<p>
</p>
<blockquote>
While other kids were dumping quarters into arcades, I would visit the arcades with a notepad, and try to figure out what the games were doing  --  then I'd go home and implement them myself. We had a home-built computer, and you could write directly to the screen memory to do simple character-based animations. I had a really cool version of Defender, a not so cool version of Pac Man, and lots of other simple arcade clones. I even wrote a few on my own, including my favorite RoTMA (Revenge of the Mutated Androids), which involved breaking into an alien base, with simple shooting combat, and some weapons-based puzzles (throwing grenades into rooms).
<p>
As for advice, the key is to start and keep learning. Try something simple, and build from there. If you have a really simple program that at least does something, then this can keep you motivated to keep making it better.
</p>
</blockquote>
<p>
You can still <a href="http://www.dosgamesarchive.com/download/game/144">download</a> and run Scorched Earth just fine under Windows XP, but it's a pure DOS game at heart. Of course, there are a slew of SE clones available for every platform and programming language imaginable. One of the more notable clones is <a href="http://www.scorched3d.co.uk/">Scorched 3D</a>, up to version 39.1 at last count.
</p>
<p>
The best modern, commercial representation of the artillery genre is Team 17's long-running <a href="http://worms.team17.com/">Worms series</a>:
</p>
<p>
<img alt="Worms 2 screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6449970b" height="273" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d6449970b-pi.jpg" width="365">
</p>
<p>
Worms turns everything up to 11, with a heaping dose of Monty Python-esque humor. Where else can you attack with weapons like sheep, miniguns, bazookas, poison arrows, and banana bombs? There are even melee attacks including a dragon punch and baseball bat. Worms isn't exactly cornering the gaming market, but it's still a viable brand, with <a href="http://www.wormsmayhem.com/">Worms 4: Mayhem</a> set for release sometime this year.
</p>
<p>
It's amazing how far a simple gameplay mechanic like <b>wind, angle, and power</b> can take you.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-09-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/wind-angle-and-power/</guid>
</item>
</channel>
</rss>
