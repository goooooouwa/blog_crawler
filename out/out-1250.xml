<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Micro-Optimization and Meatballs</title>
<link>https://blog.codinghorror.com/micro-optimization-and-meatballs/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In my previous entry on <a href="http://www.codinghorror.com/blog/archives/000181.html">the real cost of performance</a>, there were some complaints that <a href="http://robgarrett.com/Blogs/software/archive/2005/01/12/443.aspx#FeedBack">my code's slow and it sucks</a>. If I had a nickel every time someone told me that, I could have retired years ago. Let's take a look at the specific complaint that <b>the s &lt;&gt; "" comparison is inefficient</b>, using low-level windows API timing in the Stopwatch class:
</p>
<p>
</p>
<pre language="vb">
Const iterations As Integer = 1000000
Dim s As String = "sample string"
Dim sw As New Stopwatch
Dim n As Integer
n = 0
sw.Start()
For i As Integer = 1 To iterations
If s.Length = 0 Then
n += 1
End If
Next
sw.Stop()
Console.WriteLine(sw.ElapsedMs)
n = 0
sw.Start()
For i As Integer = 1 To iterations
If s = String.Empty Then
n += 1
End If
Next
sw.Stop()
Console.WriteLine(sw.ElapsedMs)
n = 0
sw.Start()
For i As Integer = 1 To iterations
If s = "" Then
n += 1
End If
Next
sw.Stop()
Console.WriteLine(sw.ElapsedMs)
n = 0
sw.Start()
For i As Integer = 1 To iterations
If s.Equals(String.Empty) Then
n += 1
End If
Next
sw.Stop()
Console.WriteLine(sw.ElapsedMs)
</pre>
<p>
Here are the results:
</p>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td></td>
<td align="right">Athlon FX-53<br>2.4 GHz</td>
<td align="right">Pentium-M<br>1.2 GHz
</td>
</tr>
<tr>
<td><code>s.Length = 0</code></td>
<td align="right">2.6 ms</td>
<td align="right">10 ms
</td>
</tr>
<tr>
<td><code>s = String.Empty</code></td>
<td align="right">20 ms</td>
<td align="right">46 ms
</td>
</tr>
<tr>
<td><code>s =""</code></td>
<td align="right">20 ms</td>
<td align="right">43 ms
</td>
</tr>
<tr>
<td><code>s.Equals(String.Empty)</code></td>
<td align="right">13 ms</td>
<td align="right">26 ms
</td>
</tr>
</table>
<p>
So, yes, String.Length is five (or more) times faster. And yes, using String.Equals is twice as fast. However, neither of those will work when the string is Nothing, and <b>we're still talking about a difference of 30 milliseconds, on the slowest computer I own, over a MILLION string comparisons!</b> This brings to mind a Bill Murray quote from <a href="http://www.imdb.com/title/tt0079540/">Meatballs</a>: <i>It just doesn't matter! It just doesn't matter!</i>
</p>
<p>
<a href="http://www.imdb.com/title/tt0079540/"><img alt="Meatballs (1979)" border="0" class="at-xid-6a0120a85dcdae970b0120a86d45b9970b" height="538" src="https://blog.codinghorror.com/content/images/uploads/2005/01/6a0120a85dcdae970b0120a86d45b9970b-pi.jpg" width="350"></a>
</p>
<p>
Arguments about which method results in code that is easier to read and easier to maintain will be gladly entertained. Arguments about speed will not. Stop micro-optimizing and start macro-optimizing: per Lippert, <b>code that makes sense is code which can be analyzed and maintained, and that makes it performant.</b>
</p>
<p>
If you'd like to time this yourself, <a href="http://www.codinghorror.com/blog/archives/000460.html">here's a stopwatch class</a> which uses the high resolution API counters. Good luck-- you're gonna need it. The resolution, I mean.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/micro-optimization-and-meatballs/</guid>
</item>
</channel>
</rss>
