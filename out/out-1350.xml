<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>SquishySyntaxHighlighter and CRC32</title>
<link>https://blog.codinghorror.com/squishysyntaxhighlighter-and-crc32/</link>
<content>
                <!--kg-card-begin: markdown--><p>
For quick and dirty HTML syntax highlighting, have you tried the <a href="http://www.squishyweb.com/ware/products.asp?q=squishysyntax">Squishy Syntax Highlighter?</a> <s>By way of demo, here's a little CRC32 routine I scavenged last year.</s> Update 3/05: I am using <a href="http://www.codinghorror.com/blog/archives/000172.html">client-side javascript highlighting</a>.
</p>
<p>
I noticed that VS.NET automatically translates the IDE highlighting into the RtfTextBox I paste into. <b>I wonder if it might be easier to just convert the RTF to HTML</b>-- at least that way, I get my IDE highlighting settings instead of the hard coded Squishy settings. I do have a RTF to HTML library I wrote a while ago. Hmm.
</p>
<p>
</p>
<p>
</p>
<p>
</p>
<pre language="VB">
''' &lt;summary&gt;
''' calculates common 32-bit CRC for a bytestream or string
''' &lt;/summary&gt;
Public Class CRC32
Private DefaultEncoding As System.Text.Encoding = System.Text.Encoding.GetEncoding(1252)
Private crcLookup() As Integer = { _
&amp;H0, &amp;H77073096, &amp;HEE0E612C, &amp;H990951BA, _
&amp;H76DC419, &amp;H706AF48F, &amp;HE963A535, &amp;H9E6495A3, _
&amp;HEDB8832, &amp;H79DCB8A4, &amp;HE0D5E91E, &amp;H97D2D988, _
&amp;H9B64C2B, &amp;H7EB17CBD, &amp;HE7B82D07, &amp;H90BF1D91, _
&amp;H1DB71064, &amp;H6AB020F2, &amp;HF3B97148, &amp;H84BE41DE, _
&amp;H1ADAD47D, &amp;H6DDDE4EB, &amp;HF4D4B551, &amp;H83D385C7, _
&amp;H136C9856, &amp;H646BA8C0, &amp;HFD62F97A, &amp;H8A65C9EC, _
&amp;H14015C4F, &amp;H63066CD9, &amp;HFA0F3D63, &amp;H8D080DF5, _
&amp;H3B6E20C8, &amp;H4C69105E, &amp;HD56041E4, &amp;HA2677172, _
&amp;H3C03E4D1, &amp;H4B04D447, &amp;HD20D85FD, &amp;HA50AB56B, _
&amp;H35B5A8FA, &amp;H42B2986C, &amp;HDBBBC9D6, &amp;HACBCF940, _
&amp;H32D86CE3, &amp;H45DF5C75, &amp;HDCD60DCF, &amp;HABD13D59, _
&amp;H26D930AC, &amp;H51DE003A, &amp;HC8D75180, &amp;HBFD06116, _
&amp;H21B4F4B5, &amp;H56B3C423, &amp;HCFBA9599, &amp;HB8BDA50F, _
&amp;H2802B89E, &amp;H5F058808, &amp;HC60CD9B2, &amp;HB10BE924, _
&amp;H2F6F7C87, &amp;H58684C11, &amp;HC1611DAB, &amp;HB6662D3D, _
&amp;H76DC4190, &amp;H1DB7106, &amp;H98D220BC, &amp;HEFD5102A, _
&amp;H71B18589, &amp;H6B6B51F, &amp;H9FBFE4A5, &amp;HE8B8D433, _
&amp;H7807C9A2, &amp;HF00F934, &amp;H9609A88E, &amp;HE10E9818, _
&amp;H7F6A0DBB, &amp;H86D3D2D, &amp;H91646C97, &amp;HE6635C01, _
&amp;H6B6B51F4, &amp;H1C6C6162, &amp;H856530D8, &amp;HF262004E, _
&amp;H6C0695ED, &amp;H1B01A57B, &amp;H8208F4C1, &amp;HF50FC457, _
&amp;H65B0D9C6, &amp;H12B7E950, &amp;H8BBEB8EA, &amp;HFCB9887C, _
&amp;H62DD1DDF, &amp;H15DA2D49, &amp;H8CD37CF3, &amp;HFBD44C65, _
&amp;H4DB26158, &amp;H3AB551CE, &amp;HA3BC0074, &amp;HD4BB30E2, _
&amp;H4ADFA541, &amp;H3DD895D7, &amp;HA4D1C46D, &amp;HD3D6F4FB, _
&amp;H4369E96A, &amp;H346ED9FC, &amp;HAD678846, &amp;HDA60B8D0, _
&amp;H44042D73, &amp;H33031DE5, &amp;HAA0A4C5F, &amp;HDD0D7CC9, _
&amp;H5005713C, &amp;H270241AA, &amp;HBE0B1010, &amp;HC90C2086, _
&amp;H5768B525, &amp;H206F85B3, &amp;HB966D409, &amp;HCE61E49F, _
&amp;H5EDEF90E, &amp;H29D9C998, &amp;HB0D09822, &amp;HC7D7A8B4, _
&amp;H59B33D17, &amp;H2EB40D81, &amp;HB7BD5C3B, &amp;HC0BA6CAD, _
&amp;HEDB88320, &amp;H9ABFB3B6, &amp;H3B6E20C, &amp;H74B1D29A, _
&amp;HEAD54739, &amp;H9DD277AF, &amp;H4DB2615, &amp;H73DC1683, _
&amp;HE3630B12, &amp;H94643B84, &amp;HD6D6A3E, &amp;H7A6A5AA8, _
&amp;HE40ECF0B, &amp;H9309FF9D, &amp;HA00AE27, &amp;H7D079EB1, _
&amp;HF00F9344, &amp;H8708A3D2, &amp;H1E01F268, &amp;H6906C2FE, _
&amp;HF762575D, &amp;H806567CB, &amp;H196C3671, &amp;H6E6B06E7, _
&amp;HFED41B76, &amp;H89D32BE0, &amp;H10DA7A5A, &amp;H67DD4ACC, _
&amp;HF9B9DF6F, &amp;H8EBEEFF9, &amp;H17B7BE43, &amp;H60B08ED5, _
&amp;HD6D6A3E8, &amp;HA1D1937E, &amp;H38D8C2C4, &amp;H4FDFF252, _
&amp;HD1BB67F1, &amp;HA6BC5767, &amp;H3FB506DD, &amp;H48B2364B, _
&amp;HD80D2BDA, &amp;HAF0A1B4C, &amp;H36034AF6, &amp;H41047A60, _
&amp;HDF60EFC3, &amp;HA867DF55, &amp;H316E8EEF, &amp;H4669BE79, _
&amp;HCB61B38C, &amp;HBC66831A, &amp;H256FD2A0, &amp;H5268E236, _
&amp;HCC0C7795, &amp;HBB0B4703, &amp;H220216B9, &amp;H5505262F, _
&amp;HC5BA3BBE, &amp;HB2BD0B28, &amp;H2BB45A92, &amp;H5CB36A04, _
&amp;HC2D7FFA7, &amp;HB5D0CF31, &amp;H2CD99E8B, &amp;H5BDEAE1D, _
&amp;H9B64C2B0, &amp;HEC63F226, &amp;H756AA39C, &amp;H26D930A, _
&amp;H9C0906A9, &amp;HEB0E363F, &amp;H72076785, &amp;H5005713, _
&amp;H95BF4A82, &amp;HE2B87A14, &amp;H7BB12BAE, &amp;HCB61B38, _
&amp;H92D28E9B, &amp;HE5D5BE0D, &amp;H7CDCEFB7, &amp;HBDBDF21, _
&amp;H86D3D2D4, &amp;HF1D4E242, &amp;H68DDB3F8, &amp;H1FDA836E, _
&amp;H81BE16CD, &amp;HF6B9265B, &amp;H6FB077E1, &amp;H18B74777, _
&amp;H88085AE6, &amp;HFF0F6A70, &amp;H66063BCA, &amp;H11010B5C, _
&amp;H8F659EFF, &amp;HF862AE69, &amp;H616BFFD3, &amp;H166CCF45, _
&amp;HA00AE278, &amp;HD70DD2EE, &amp;H4E048354, &amp;H3903B3C2, _
&amp;HA7672661, &amp;HD06016F7, &amp;H4969474D, &amp;H3E6E77DB, _
&amp;HAED16A4A, &amp;HD9D65ADC, &amp;H40DF0B66, &amp;H37D83BF0, _
&amp;HA9BCAE53, &amp;HDEBB9EC5, &amp;H47B2CF7F, &amp;H30B5FFE9, _
&amp;HBDBDF21C, &amp;HCABAC28A, &amp;H53B39330, &amp;H24B4A3A6, _
&amp;HBAD03605, &amp;HCDD70693, &amp;H54DE5729, &amp;H23D967BF, _
&amp;HB3667A2E, &amp;HC4614AB8, &amp;H5D681B02, &amp;H2A6F2B94, _
&amp;HB40BBE37, &amp;HC30C8EA1, &amp;H5A05DF1B, &amp;H2D02EF8D}
''' &lt;summary&gt;
''' Calculate the 32-bit CRC for a stream, starting at an arbitrary position and length
''' &lt;/summary&gt;
Public Function Calculate(ByRef s As System.IO.Stream, ByVal begin As Long, ByVal length As Long) As Integer
Dim originalPos As Long = s.Position
Dim endPos As Long = begin + length
Dim b As Byte
Dim result As Integer = &amp;HFFFFFFFF
Dim lookup As Integer
s.Position = begin
Dim bs As New System.IO.BufferedStream(s)
For i As Long = begin To endPos - 1
b = Convert.ToByte(bs.ReadByte())
lookup = (result And &amp;HFF) Xor b
result = ((result And &amp;HFFFFFF00)  &amp;H100) And &amp;HFFFFFF
result = result Xor crcLookup(lookup)
Next
s.Position = originalPos
Return Not (result)
End Function
''' &lt;summary&gt;
''' Calculate the 32-bit CRC for an entire stream
''' &lt;/summary&gt;
Public Function Calculate(ByRef s As System.IO.Stream) As Integer
Return Calculate(s, 0, s.Length)
End Function
''' &lt;summary&gt;
''' Calculate the 32-bit CRC for a string; uses default Windows-1252 encoding
''' &lt;/summary&gt;
Public Function Calculate(ByVal s As String) As Integer
Return Calculate(s, DefaultEncoding)
End Function
''' &lt;summary&gt;
''' Calculate the 32-bit CRC for a string, using specified encoding
''' &lt;/summary&gt;
Public Function Calculate(ByVal s As String, ByVal e As System.Text.Encoding) As Integer
Dim buffer() As Byte = e.GetBytes(s)
Return Calculate(buffer)
End Function
''' &lt;summary&gt;
''' Calculate the 32-bit CRC for an array of bytes
''' &lt;/summary&gt;
Public Function Calculate(ByVal b() As Byte) As Integer
Dim result As Integer = &amp;HFFFFFFFF
Dim len As Integer = b.Length
Dim lookup As Integer
For i As Integer = 0 To len - 1
lookup = (result And &amp;HFF) Xor b(i)
result = ((result And &amp;HFFFFFF00)  &amp;H100) And &amp;HFFFFFF
result = result Xor crcLookup(lookup)
Next i
Return Not (result)
End Function
End Class</pre>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-09-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/squishysyntaxhighlighter-and-crc32/</guid>
</item>
</channel>
</rss>
