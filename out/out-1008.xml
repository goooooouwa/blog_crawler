<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Lost Art of Progressive HTML Rendering</title>
<link>https://blog.codinghorror.com/the-lost-art-of-progressive-html-rendering/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One thing I dislike about ASP.NET is that <b>it renders the entire web page in memory before sending one single byte of that page to the browser.</b> Consider an ASP.NET page with an embedded DataGrid that relies on ten complex database queries over 15 seconds. Why can't we serve up part of the page while we're waiting for those DataGrid queries-- so the user has something to look at? A blank page is a disappointing user experience.  The <a href="http://www.codinghorror.com/blog/archives/000276.html">strong psychological benefit of progressive rendering is well documented</a>.
</p>
<p>
What's even more galling is that HTML was originally designed to render progressively as content is received. Internet Explorer is perfectly capable of <a href="http://blogs.msdn.com/ie/archive/2005/02/10/370721.aspx">rendering partial HTML content</a>. Netscape offered progressive rendering <a href="http://www.boutell.com/newfaq/history/fbrowser.html">as far back as version 1.0</a>:
</p>
<p>
</p>
<blockquote><i>
Netscape is the browser that introduced most all of the remaining major features that define a web browser as we know it. The first version of Netscape appeared in October 1994 under the code name "Mozilla." <b>Netscape 1.0's early beta versions introduced the "progressive rendering" of pages and images, meaning that the page begins to appear and the text can be read even before all of the text and/or images have been completely downloaded.</b> Version 1.1, in March 1995, introduced HTML tables, which are now used in the vast majority of web pages to provide page layout.
</i></blockquote>
<p>
See progressive HTML rendering in action via <a href="http://msdn.microsoft.com/workshop/samples/author/dhtml/refs/tables3.htm">this MSDN sample</a>:
</p>
<p>
<img alt="progressive-rendering-normal.gif" border="0" class="at-xid-6a0120a85dcdae970b0128776fd74e970c" height="484" src="https://blog.codinghorror.com/content/images/uploads/2005/11/6a0120a85dcdae970b0128776fd74e970c-pi.gif" width="472">
Â 
<img alt="progressive-rendering-optimized.gif" border="0" class="at-xid-6a0120a85dcdae970b0128776fd769970c" height="484" src="https://blog.codinghorror.com/content/images/uploads/2005/11/6a0120a85dcdae970b0128776fd769970c-pi.gif" width="472">
</p>
<p>
This particular sample is a demonstration of IE's <a href="http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/properties/tablelayout.asp">table-layout attribute</a>, which isn't even necessary for Firefox to render the table progressively. But it really doesn't matter which browser you use; the same "show as much as you can as soon as you can" rendering rule should apply to any web page you design.
</p>
<p>
If the pictured table was rendered as a DataGrid, progressive rendering support is moot. The page model of ASP.NET precludes a single byte of data being sent to the client until the entire page is rendered on the server. <b>There's no opportunity for the browser to start displaying data to the user while the server is still chugging away on the data.</b> The user is stuck staring at a blank web page for the full 15 seconds until the operation completes on the server.
</p>
<p>
You can still write ASP.NET pages that properly stream data to the browser using <b>Response.Write</b> and <b>Response.Flush</b>. But you can't do it within the normal ASP.NET page lifecycle. Maybe this is a natural consequence of the ASP.NET abstraction layer.
</p>
<p>
Regardless, it still sucks for users.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-11-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-lost-art-of-progressive-html-rendering/</guid>
</item>
</channel>
</rss>
