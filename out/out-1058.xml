<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Positive Impact of Negative Thinking</title>
<link>https://blog.codinghorror.com/the-positive-impact-of-negative-thinking/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.amazon.com/exec/obidos/ASIN/0932633609/codihorr-20">Waltzing with Bears: Managing Risk on Software Projects</a>, DeMarco and Lister outline the dangers of penalizing negative thinking:
</p>
<p>
</p>
<blockquote>
<i>
Once you've identified and quantified these risks, they can be managed just like the others. But getting them out on the table can be a problem. <b>The culture of our organizations sometimes makes it impossible to talk about a really worrisome risk.</b> We are like a primitive tribe that tries to hold the devil at bay by refusing to say his name.
</i><p>
Why didn't [technicians present at the <a href="http://en.wikipedia.org/wiki/Space_Shuttle_Challenger">1986 Challenger launch</a>] speak up [about the known risks of launching the shuttle in subzero weather conditions]? Their reasons were the same ones that stop people from articulating risks at companies everywhere. They take the form of unwritten rules, built into the corporate culture:
</p>
<ol>
<li>Don't be a negative thinker.
</li>
<li>Don't raise a problem unless you have a solution for it.
</li>
<li>Don't say something is a problem unless you can prove it is.
</li>
<li>Don't be the spoiler.
</li>
<li>Don't articulate a problem unless you want its immediate solution to become your responsibility
</li>
</ol>
<p>
Healthy cultures attach great value to the concept of a team. Being judged a "team player" is enormously important, and not being one can be fatal to a career. <b>Articulating a risk shouldn't be seen as anti-team, but it often is.</b> These unwritten rules are not very discriminating; they don't make much distinction between speaking up responsibility and whining. And because they rules are never openly discussed, they never get adjusted for changing circumstances.
</p>
<p>
We are all enjoined to adopt a can-do mentality in our work. And there's the rub. Saying the risk is an exercise in can't-do. Risk discovery is profoundly at odds with this fundamental aspect of our organizations.
</p>
</blockquote>
<p>
Waltzing with Bears is very clear on this point: <b>the biggest risk on any software project is the risks you haven't considered</b>. You can't know the unknown, of course, but you'll do a lot better at risk management if you encourage a culture of responsible risk assessment instead of <a href="http://www.codinghorror.com/blog/archives/000284.html">mindless can-do heroics</a>.
</p>
<p>
Personally, I love it when developers come to me with potential problems in our applications. Far from being negative, this has all kinds of positive implications:
</p>
<ul>
<li>Deep knowledge of the application. The developer knows enough about the entire app to feel confident there's a problem.
</li>
<li>Concern for quality of workmanship. A less concerned developer would shrug this off as "not their problem". They get paid either way, right?
</li>
<li>Team player. If a developer is bringing up problems in a proactive way, that means they also (consciously or not) understand why it's important for the entire team to not fall prey to the <a href="http://www.codinghorror.com/blog/archives/000326.html">Broken Window</a> syndrome.
</li>
</ul>
<p>
The only way to truly manage risk on a software development project is to <b>solicit input from every team member on what could go wrong-- not only at the start of the project but also throughout its lifecycle</b>. If you do, you'll have a far more predictable development schedule. And a much better product.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-09-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-positive-impact-of-negative-thinking/</guid>
</item>
</channel>
</rss>
