<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Learn to Read the Source, Luke</title>
<link>https://blog.codinghorror.com/learn-to-read-the-source-luke/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In the calculus of communication, writing coherent paragraphs that your fellow human beings can comprehend and understand is <a href="http://www.codinghorror.com/blog/2006/06/is-writing-more-important-than-programming.html"><i>far</i> more difficult</a> than tapping out a few lines of software code that the interpreter or compiler won't barf on.
</p>
<p>
That's why, when it comes to code, <a href="http://www.codinghorror.com/blog/2007/01/if-it-isnt-documented-it-doesnt-exist.html">all the documentation probably sucks</a>. And because writing for people is way harder than writing for machines, the documentation will <i>continue</i> to suck for the forseeable future. There's very little you can do about it.</p>
<p>Except for one thing.</p>
<p>
<img alt="Read-the-source-luke" title="Read-the-source-luke" src="https://blog.codinghorror.com/content/images/uploads/2012/04/6a0120a85dcdae970b016765373659970b-800wi.jpg" border="0">
</p>
<p>
You can <b>learn to read the source, Luke</b>.
</p>
<p>
The <a href="http://www.codinghorror.com/blog/2006/08/the-power-of-view-source.html">transformative power of "source always included" in JavaScript</a> is a major reason why I coined – and continue to believe in – <a href="http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html">Atwood's Law</a>. Even if "view source" isn't built in (but it totally should be), you should demand access to the underlying source code for your stack. <b>No matter what the documentation says, the source code is the ultimate truth, the best and most definitive and up-to-date documentation you're likely to find.</b> This will be true <i>forever</i>, so the sooner you come to terms with this, the better off you'll be as a software developer.
</p>
<p>
I had a whole entry I was going to write about this, and then I discovered <a href="http://blog.brandonbloom.name/">Brandon Bloom's</a> brilliant <a href="http://news.ycombinator.com/item?id=3769446">post</a> on the topic at Hacker News. Read closely, because he explains the virtue of reading source, and in what context you <i>need</i> to read the source, far better than I could:
</p>
<p>
</p>
<blockquote>
<p>
I started working with Microsoft platforms professionally at age 15 or so. I worked for Microsoft as a software developer doing integration work on Visual Studio. More than ten years after I first wrote a line of Visual Basic, I wish I could never link against a closed library ever again.
</p>
<p>
Using software is different than building software. When you're using most software for its primary function, it's a well worn path. Others have encountered the problems and enough people have spoken up to prompt the core contributors to correct the issue. But when you're building software, you're doing something new. And there are so many ways to do it, you'll encounter unused bits, rusty corners, and unfinished experimental code paths. You'll encounter edge cases that have been known to be broken, but were worked around.
</p>
<p>
Sometimes, the documentation isn't complete. Sometimes, it's wrong. The source code never lies. For an experienced developer, reading the source can often be faster… especially if you're already familiar with the package's architecture.
I'm in a medium-sized co-working space with several startups. A lot of the other CTOs and engineers come to our team for guidance and advice on occasion. <b>When people report a problem with their stack, the first question I ask them is: "Well, did you read the source code?"</b>
</p>
<p>
I encourage developers to git clone anything and everything they depend on. Initially, they are all afraid. "That project is too big, I'll never find it!" or "I'm not smart enough to understand it" or "That code is so ugly! I can't stand to look at it". But you don't have to search the whole thing, you just need to follow the trail. And if you can't understand the platform below you, how can you understand your own software? And most of the time, what inexperienced developers consider beautiful is superficial, and what they consider ugly, is battle-hardened production-ready code from master hackers.
Now, a year or two later, I've had a couple of developers come up to me and thank me for forcing them to sink or swim in other people's code bases. They are better at their craft and they wonder how they ever got anything done without the source code in the past.
</p>
<p>
When you run a business, if your software has a bug, your customers don't care if it is your fault or Linus' or some random Rails developer's. They care that your software is bugged. Everyone's software becomes my software because all of their bugs are my bugs. When something goes wrong, you need to seek out what is broken, and you need to fix it. You fix it at the right spot in the stack to minimize risks, maintenance costs, and turnaround time. Sometimes, a quick workaround is best. Other times, you'll need to recompile your compiler. Often, you can ask someone else to fix it upstream, but just as often, you'll need to fix it yourself.
</p>
<ul>
<li>Closed-software shops have two choices: beg for generosity, or work around it.
</li>
<li>Open source shops with weaker developers tend to act the same as closed-software shops.
</li>
<li>Older shops tend to slowly build the muscles required to maintain their own forks and patches and whatnot.
</li>
</ul>
<p>
True hackers have come to terms with a simple fact: If it runs on my machine, it's my software. I'm responsible for it. I must understand it. Building from source is the rule and not an exception. I must control my environment and I must control my dependencies.
</p>
</blockquote>
<table>
<p>
Nobody reads other people's code for fun. Hell, <a href="http://www.codinghorror.com/blog/2009/07/nobody-hates-software-more-than-software-developers.html">I don't even like reading my own code</a>. The idea that you'd settle down in a deep leather chair with your smoking jacket and a snifter of brandy for a fine evening of reading through someone else's code is absurd.
</p>
<p>
But we need access to the source code. We <i>must</i> read other people's code <a href="http://www.codinghorror.com/blog/2006/09/when-understanding-means-rewriting.html">because we have to understand it to get things done</a>. So don't be afraid to <b>read the source, Luke</b> – and follow it wherever it takes you, no matter how scary looking that code is.
</p>
<tr><td class="welovecodinghorror">
[advertisement] <a href="http://careers.stackoverflow.com/" rel="nofollow">Stack Overflow Careers</a> matches the best developers (you!) with the best employers. You can search our <a href="http://careers.stackoverflow.com/jobs" rel="nofollow">job listings</a> or <a href="http://careers.stackoverflow.com/cv" rel="nofollow">create a profile</a> and even let employers find you.
</td></tr>
</table>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2012-04-16T12:09:02.000Z</pubDate>
<guid>https://blog.codinghorror.com/learn-to-read-the-source-luke/</guid>
</item>
</channel>
</rss>
