<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Problem With Configurability</title>
<link>https://blog.codinghorror.com/the-problem-with-configurability/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I've recently been experimenting with a <a href="http://www.hanselman.com/blog/ScottHanselmans2005UltimateDeveloperAndPowerUsersToolList.aspx">few hand-picked desktop utilities</a>, but I am rapidly reaching the point of diminishing returns: the effort required to run and maintain all these utilities is greater than the productivity benefit.
</p>
<p>
Furthermore, if I learn to rely on a highly custom desktop, <b>I've crippled my ability to work on a stock Windows XP or Win2k3 box</b>. I can certainly bring my favorite apps with me <a href="http://www.codinghorror.com/blog/archives/000251.html">on a USB key</a>, but I also have to spend time setting them up on each box I touch. Is it worth it?
</p>
<p>
Configurability is mixed blessing, even for developers. You can completely customize your VS.NET 2003 environment, including setting all the keymappings to a compatibility mode. But have you ever tried to work on someone else's "customized" Visual Studio? I do this occasionally when we're hashing out quick solutions to problems, and if VS.NET is highly customized on that developer's machine, I can't get any work done. None of the <a href="http://www.codinghorror.com/blog/archives/000315.html">standard shortcuts</a> do anything recognizable. We can't work on the problem together at all. At least not on that machine.
</p>
<p>
Joel explored a similar topic in chapter 3 of <a href="http://www.amazon.com/exec/obidos/ASIN/1893115941/codihorr-20">his UI book</a> when he asked: <a href="http://www.joelonsoftware.com/uibook/chapters/fog0000000059.html">is customization worth it?</a>
</p>
<p>
</p>
<blockquote>
The trouble was, I don't use one computer. I use all kinds of computers. I use other people's computers. I use three computers fairly regularly at home and three at work. I use computers in the test lab at work. The trouble with customizing your environment is that it just doesn't propagate, so it's not even worth the trouble.
<p>
Most advanced users use several computers regularly; they upgrade their computer every couple of years, they reinstall their operating system every three weeks. It's true that the first time they realized you could completely remap the keyboard in Word, they changed everything around to be more to their liking, but as soon as they upgraded to Windows 95 those settings got lost, and they weren't the same at work, and eventually they just stopped reconfiguring things. <b>I've asked a lot of my "power user" friends about this; hardly any of them do any customization other than the bare minimum necessary to make their system behave reasonably.</b>
</p>
</blockquote>
<p>
If customization is a mixed bag for advanced users like us, that can't bode well for average users:
</p>
<p>
</p>
<blockquote>
Every time you provide an option, you're asking the user to make a decision. That means they will have to think about something and decide about it. It's not necessarily a bad thing, but, in general, you should always try to minimize the number of decisions that people have to make.
</blockquote>
<p>
In other words, <a href="http://www.codinghorror.com/blog/archives/000377.html">don't make users think</a>. Or at least <b>don't make them think about anything outside the narrow focus of their immediate goal</b>. Furthermore, making everything configurable really means <a href="http://usability.typepad.com/confusability/2004/09/the_problems_wi.html">the designer isn't doing his job</a>. This is something Jakob Nielsen points out in his introduction to the book <a href="http://www.amazon.com/exec/obidos/ASIN/0133033899/codihorr-20%0A">Designing Visual Interfaces</a>:
</p>
<p>
</p>
<blockquote>
In the bedroom wall example, people might buy the house anyway and then paint over the wall with a more agreeable color. This example leads me to consider an excuse some developers have for not providing a satisfactory visual interface to their products: "the user can just customize the design to his or her individual taste!" <b>Leaving the design to the users is the ultimate abdication of the designer's responsibility to provide a quality product</b>, and many studies have shown that users are in fact very poor designers and often customize their interface in ways that are detrimental to their productivity (eg, by using <a href="http://www.codinghorror.com/blog/archives/000340.html">color combinations that are known to cause reduced readability of screen text</a>). Even though there are often reasons to allow users to customize some aspects of their environment, <b>it is absolutely essential for the designer to give the users a carefully thought out set of defaults to start with.</b> Also, users will be much more likely to end up with appropriate customized design if they are given some pre-specified (and well-designed) options to choose from as done, for example, in the <a href="http://www.smartcomputing.com/editorial/dictionary/detail.asp?searchtype=2&amp;DicID=18470&amp;RefType=Encyclopedia&amp;guid=">Pantone ColorUp</a> set of recommended color combinations for presentation slides.
</blockquote>
<p>
There's an interesting extension of this philosophy in <a href="http://www.onlamp.com/pub/a/onlamp/2005/01/20/rails.html">Ruby on Rails</a> called <b>convention over configuration</b>:
</p>
<p>
</p>
<blockquote>
Convention over configuration means an end to verbose XML configuration files--there aren't any in Rails! Instead of configuration files, a Rails application uses a few simple programming conventions that allow it to figure out everything through reflection and discovery. Your application code and your running database already contain everything that Rails needs to know!
</blockquote>
<p>
You might come out ahead by <b>intentionally choosing to make things not configurable</b>:
</p>
<ol>
<li>It forces you to carefully select good default values
</li>
<li>It forces you to pick a strategy and run with it rather than hedging your bets and trying to satisfy everyone
</li>
<li>It's one less thing for the user to think about when using your software
</li>
</ol>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-09-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-problem-with-configurability/</guid>
</item>
</channel>
</rss>
