<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Only Truly Failed Project</title>
<link>https://blog.codinghorror.com/the-only-truly-failed-project/</link>
<content>
                <!--kg-card-begin: markdown--><p>Do you remember <a href="http://en.wikipedia.org/wiki/Microsoft_Bob">Microsoft Bob</a>? If you do, you probably remember it as an intensely marketed but laughable failure – what some call <a href="http://www.microsoft-watch.com/content/operating_systems/bill_gates_legacy_microsofts_top_10_flops.html">the "number one flop" at Microsoft</a>.</p>
<p><img src="https://blog.codinghorror.com/content/images/2016/11/6a0120a85dcdae970b0128777024e1970c-pi.png" alt=""> <img src="https://blog.codinghorror.com/content/images/2016/11/6a0120a85dcdae970b0128777024e9970c-pi.png" alt=""></p>
<p>There's no <em>question</em> that Microsoft Bob was nothing short of an unmitigated disaster. But that's the funny thing about failures – <strong>they often lead to later successes</strong>. Take it from someone who <a href="http://www.techflash.com/microsoft/Innovation_The_lessons_of_Bob_53605837.html">lived and breathed the Bob project</a>:</p>
<blockquote>
<p>I was the one who sent Bill Gates email at the height of the positive Bob-mania that said we were likely to face a horrible backlash. Tech influentials had started telling me that they were going to bury Bob. They not only didn't like it, they were somehow angry that it had even been developed. It was personal.</p>
<p>And that's exactly what happened. Bob got killed. But first, it was ridiculed and stomped.</p>
<p>For Microsoft, it was a costly mistake. For the people who worked on it, Bob taught many lessons. Lessons that came into play for subsequent products that made a big impact, both at Microsoft and beyond.</p>
<p>How many people know that the lead developer for Bob 2.0 was also the <a href="http://en.wikipedia.org/wiki/Gabe_Newell">co-founder of Valve</a> and the development lead for Half-Life, which became an industry phenomenon, winning more than 50 Game of the Year awards and selling more than 10 million copies?</p>
<p>Or that Darrin Massena - development lead for Bob 1.0, most recently named Technical Innovator of the Year here in Washington State - and Valve co-founder <a href="http://en.wikipedia.org/wiki/Mike_Harrington">Mike Harrington</a> are the co-founders and partners behind <a href="http://en.wikipedia.org/wiki/Picnik">Picnik</a> - which is now the world's leading online photo editor, attracting almost 40 million visits a month and a million unique users a day.</p>
</blockquote>
<p>And then, of course, I'd be remiss if I didn't mention that Melinda French – Bill Gates' <a href="http://en.wikipedia.org/wiki/Melinda_Gates">future wife</a> – managed the Microsoft Bob project at one point. Bob was the first Microsoft consumer project that <a href="http://www.post-gazette.com/businessnews/19990523bob6.asp">Bill Gates personally had a hand in launching</a>. Well, at least he got a wife out of it.</p>
<p>Yes, Bob was an obvious, undisputed and epic failure. We can point and laugh at Bob. But to me, <strong>Bob is less of a comic figure than a tragic one</strong>.</p>
<p>Unless you're an exceptionally lucky software developer, you've probably worked on more projects that failed than projects that succeeded. Failure is <a href="http://www.codinghorror.com/blog/archives/000588.html">de rigeur in our industry</a>. Odds are, you're working on a project that will fail <em>right now</em>. Oh sure, it may not seem like a failure yet. Maybe it'll fail in some completely unanticipated way. Heck, maybe your project will buck the odds and even succeed.</p>
<p>But I doubt it.</p>
<p>I <a href="http://www.codinghorror.com/blog/archives/000770.html">own a boxed copy of Microsoft Bob</a>. I keep it on my shelf to remind me that these kinds of relentless, inevitable failures aren't the crushing setbacks they often appear from the outside. On the contrary; I believe it's <a href="http://www.codinghorror.com/blog/archives/000300.html">impossible to succeed without failing</a>.</p>
<blockquote>
<p>Charles Bosk, a sociologist at the University of Pennsylvania, once conducted a set of interviews with young doctors who had either resigned or been fired from neurosurgery-training programs, in an effort to figure out what separated the unsuccessful surgeons from their successful counterparts.</p>
<p>He concluded that, far more than technical skills or intelligence, <strong>what was necessary for success was the sort of attitude that Quest has – a practical-minded obsession with the possibility and the consequences of failure</strong>. "When I interviewed the surgeons who were fired, I used to leave the interview shaking," Bosk said. "I would hear these horrible stories about what they did wrong, but the thing was that they didn't know that what they did was wrong. In my interviewing, I began to develop what I thought was an indicator of whether someone was going to be a good surgeon or not. It was a couple of simple questions: Have you ever made a mistake? And, if so, what was your worst mistake? The people who said, 'Gee, I haven't really had one,' or, 'I've had a couple of bad outcomes but they were due to things outside my control' – invariably those were the worst candidates. And the residents who said, 'I make mistakes all the time. There was this horrible thing that happened just yesterday and here's what it was.' They were the best. They had the ability to rethink everything that they'd done and imagine how they might have done it differently."</p>
</blockquote>
<p>I recently watched the documentary <a href="http://www.amazon.com/dp/B000OV967S/?tag=codihorr-20">Tilt: The Battle to Save Pinball</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/JIolBJwH9p0" frameborder="0" allowfullscreen></iframe>
<p>It's a gripping story of a pinball industry in crisis. In order to save it, the engineers at Williams – the only remaining manufacturer of pinball machines in the United States – were given a herculean task: invent a new form of pinball <em>so compelling</em> that it makes all previous pinball machines seem obsolete. I don't want to spoil the whole documentary, so I'll gloss over exactly how that happened, but astoundingly enough – they succeeded.</p>
<p>And then were promptly laid off en masse, as Williams shut down its pinball operations.</p>
<p>Unlike Microsoft Bob, the Williams engineers built an almost revolutionary product that was both critically acclaimed and sold well – but <strong>none of that mattered</strong>. It's sobering to watch the end reel of Tilt, as the engineers involved mournfully discuss the termination of their bold and seemingly successful project.</p>
<blockquote>
<p>Everyone was in awe. They couldn't understand why it happened. Here we'd just done this thing that from all we could tell was a total success. Why would they do that?</p>
<p>We succeeded. Management gave us an impossible goal, and we sat there and we actually did what they thought we couldn't do.</p>
<p>You know, we didn't really win... we lost. I gave it everything I had. I think that those fifty guys that worked on it, they also passionately did everything that they could.</p>
</blockquote>
<p>Sometimes, <strong>even when your project succeeds, you've failed</strong>. Due to forces entirely beyond your control. It's depressing, but it's reality.</p>
<p>The trailout isn't all doom and gloom. It also documents the ways in which these talented pinball engineers went on to practice their craft after being laid off. Most of them still work in the video game or pinball industry. Some freelance. Others formed their own companies. A few went on to work at Stern Pinball, which figured out how to make a small number of pinball machines and still turn a profit.</p>
<p>These two stories, these two projects – the abject failure of Microsoft Bob, and the aborted success of Pinball 2000 – have something in common beyond mere failure. All the engineers involved <strong>not only survived these failures, but often went on to greater success afterwards</strong>. Possibly as a direct result of their work on these "failures".</p>
<p>Failure is a wonderful teacher. But there's no need to seek out failure. It will find you. Whatever project you're working on, consider it an opportunity to learn and practice your craft. <a href="http://www.codinghorror.com/blog/archives/001207.html">It's worth doing because, well, it's worth doing</a>. The journey of the project should be its own reward, regardless of whatever happens to lie at the end of that journey.</p>
<p>The only truly <em>failed</em> project is <strong>the one where you didn't learn anything along the way</strong>.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-08-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-only-truly-failed-project/</guid>
</item>
</channel>
</rss>
