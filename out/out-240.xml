<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Eight Levels of Programmers</title>
<link>https://blog.codinghorror.com/the-eight-levels-of-programmers/</link>
<content>
                <!--kg-card-begin: markdown--><p>Have you ever gotten that classic job interview question, <strong>"where do you see yourself in five years?"</strong> When asked, I'm always mentally transported back to <a href="http://www.youtube.com/watch?v=SRwrg0db_zY#t=1m13">a certain Twisted Sister video from 1984</a>.</p>
<blockquote>I want you to tell me – no, better yet, stand up and <em>tell the class</em> –
<p><a href="http://www.youtube.com/watch?v=SRwrg0db_zY#t=1m13"><img class="at-xid-6a0120a85dcdae970b01287770a0c4970c" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b01287770a0c4970c-pi.jpg" border="0" alt="twisted-sister-i-wanna-rock-video-still-frame.jpg" width="380" height="284"></a></p>
<p><strong>what do you wanna do with your life?</strong></p>
</blockquote>
<p>You want to rock, naturally! Or at least be a <a href="http://www.codinghorror.com/blog/archives/000552.html">rockstar programmer</a>. It's not a question that typically gets a serious answer – sort of like that other old groan-inducing interview chestnut, "what's your greatest weakness?" It's that you sometimes rock <em>too hard</em>, right? Innocent bystanders could get hurt.</p>
<p>But I think this is a different and more serious class of question, one that deserves real consideration. Not for the interviewer's benefit, but for your <em>own</em> benefit.</p>
<p>The "where do you see yourself in five years" question is sort of glib, and most people have a pat answer they give to interviewers. But it does raise some deeper concerns: what <em>is</em> the potential career path for a software developer? Sure, <a href="http://www.codinghorror.com/blog/archives/001202.html">we do this stuff because we love it</a>, and we're <a href="http://www.codinghorror.com/blog/archives/000979.html">very fortunate in that regard</a>. But will you be sitting in front of your computer programming when you're 50? When you're 60? What is the best possible career outcome for a programmer who aspires to be.. well, a programmer?</p>
<p>What if I told you, with <a href="http://www.kenrockwell.com/tech/7art.htm">tongue firmly planted in cheek</a>, that there were <strong>Eight Levels of Programmers?</strong></p>
<ol>
<li>
<strong>Dead Programmer</strong>
<p>This is the highest level. Your code has survived and transcended your death. You are a part of the permanent historical record of computing. Other programmers study your work and writing. You may have won a Turing Award, or written influential papers, or invented one or more pieces of fundamental technology that have affected the course of programming as we know it. You don't just have a wikipedia entry – there are entire websites dedicated to studying your life and work.</p>
<p>Very few programmers ever achieve this level in their own lifetimes.</p>
<p>Examples: <a href="http://en.wikipedia.org/wiki/Edsger_W._Dijkstra">Dijkstra</a>, <a href="http://en.wikipedia.org/wiki/Donald_Knuth">Knuth</a>, <a href="http://en.wikipedia.org/wiki/Alan_Kay">Kay</a></p>
</li>
<li>
<strong>Successful Programmer</strong>
<p>Programmers who are both well known and have created entire businesses – perhaps even whole industries – around their code. These programmers have given themselves <a href="http://e-texteditor.com/blog/2009/opencompany">the real freedom zero</a>: the freedom to decide for themselves what they want to work on. And to share that freedom with their fellow programmers.</p>
<p>This is the level to which most programmers should aspire. Getting to this level often depends more on business skills than programming.</p>
<p>Examples: <a href="http://en.wikipedia.org/wiki/Bill_Gates">Gates</a>, <a href="http://en.wikipedia.org/wiki/John_D._Carmack">Carmack</a>, <a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">DHH</a></p>
</li>
<li>
<strong>Famous Programmer</strong>
<p>This is also a good place to be, but not unless you also have a day job.</p>
<p>You're famous in programming circles. But being famous doesn't necessarily mean you can turn a profit and support yourself. Famous is good, but <em>successful</em> is better. You probably work for a large, well known technology company, an influential small company, or you're a part of a modest startup team. Either way, other programmers have heard of you, and you're having a positive impact on the field.</p>
</li>
<li>
<strong>Working Programmer</strong>
<p>You have a successful career as a software developer. Your skills are always in demand and you never have to look very long or hard to find a great job. Your peers respect you. Every company you work with is improved and enriched in some way by your presence.</p>
<p>But where do you go from there?</p>
</li>
<li>
<strong>Average Programmer</strong>
<p>At this level you are a good enough programmer to realize that you're not a <em>great</em> programmer. And you might never be.</p>
<p>Talent often has little do do with success. You can be very successful if you have business and people skills. If you are an average programmer but manage to make a living at it then you <em>are</em> talented, just not necessarily at coding.</p>
<p>Don't knock the value of self-awareness. It's more rare than you realize. There's nothing wrong with lacking talent. Be bold. Figure out what you're good at, and pursue it. Aggressively.</p>
</li>
<li>
<strong>Amateur Programmer</strong>
<p>An amateur programmer loves to code, and it shows: they might be a promising student or intern, or perhaps they're contributing to open source projects, or building interesting "just for fun" applications or websites in their spare time. Their code and ideas show promise and enthusiasm.</p>
<p>Being an amateur is a good thing; from this level one can rapidly rise to become a working programmer.</p>
</li>
<li>
<strong>Unknown Programmer</strong>
<p>The proverbial typical programmer. Joe Coder. Competent (usually) but unremarkable. Probably works for a large, anonymous MegaCorp. It's just a job, not their entire life. Nothing wrong with that, either.</p>
</li>
<li>
<strong>Bad Programmer</strong>
<p>People who somehow fell into the programmer role without an iota of skill or ability. Everything they touch <a href="http://www.codinghorror.com/blog/archives/000824.html">turns into pain and suffering</a> for their fellow programmers – with the possible exception of <em>other</em> Bad Programmers, who lack even the rudimentary skill required to tell that they're working with another Bad Programmer.</p>
<p>Which is, perhaps, the hallmark of all Bad Programmers. These people have no business writing code of any kind – but they do, anyway.</p>
</li>
</ol>
<p>These levels aren't entirely serious. Not every programmer aspires to the same things in their career. But it's illuminating to consider what a programmer <em>could</em> accomplish in ten years, twenty years, or thirty years – perhaps even a lifetime. Which <a href="http://en.wikipedia.org/wiki/List_of_programmers">notable programmers</a> do you admire the most? What did they accomplish to earn your admiration?</p>
<p>In short, <strong>what do you wanna do with your life?</strong></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-04-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-eight-levels-of-programmers/</guid>
</item>
</channel>
</rss>
