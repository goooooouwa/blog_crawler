<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Process.Start and Impersonation</title>
<link>https://blog.codinghorror.com/processstart-and-impersonation/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Did you know that <b>Process.Start always uses the security context of the parent ASP.NET process?</b> I just found this out the hard way; Using Process.Start on "whoami.exe" always returns the ASPNET worker process no matter what I do. Some searching turned up <a href="http://odetocode.com/Blogs/scott/archive/2004/10/28/602.aspx">this entry in Scott's blog</a>:
</p>
<p>
</p>
<blockquote>
<i>
I wantedto run these processes with the identity of the client, but this poses a problem. The Process class in System.Diagnostics canstart a new process, but the process always inherits the security context of the parent process. Even if the ASP.NETthread invoking the Start method is impersonating a client, the Process still starts with the ASP.NET worker process credentials.
</i><p>
Enter .NET 2.0, which includes the User, Domain, and Password properties on the ProcessStartInfo type. In .NET 2.0 you can start a process under a different set of credentials.
</p>
</blockquote>
<p>
Way to rub salt in my wounds, Whidbey. This is a very unfortunate limitation of .NET 1.1, as it severely limits what I can do with Process.Start in a web app. Scott helpfully provides a bit of sample C# code that calls the Win32 APIs to simulate a stripped down version of the Whidbey behavior today.
</p>
<p>
If you <i>aren't</i> calling Process.Start, you may be able to impersonate to get the behavior you want. The MSKB article <a href="http://support.microsoft.com/?id=306158">How to implement impersonation in an ASP.NET application</a> provides some nice, relatively painless workarounds:
</p>
<p>
</p>
<blockquote>
<i>
If you want to impersonate a user on a thread in ASP.NET, you can use one of the following methods, based on your requirements:
<ul>
<li>
<a href="http://support.microsoft.com/?id=306158#1">Impersonate the IIS authenticated account or user</a>
</li>
<li>
<a href="http://support.microsoft.com/?id=306158#2">Impersonate a specific user for all the requests of an ASP.NET application</a>
</li>
<li>
<a href="http://support.microsoft.com/?id=306158#3">Impersonate the authenticating user in code</a>
</li>
<li>
<a href="http://support.microsoft.com/?id=306158#4">Impersonate a specific user in code</a>
</li>
</ul>
Note: You can use the following code to determine what user the thread is executing as:
</i><p>
<code>System.Security.Principal.WindowsIdentity.GetCurrent().Name</code>
</p>
</blockquote>
<p>
The last method is the most interesting to me-- it lets you impersonate an arbitrary user on the fly, execute a specific set of code as that user, then revert back to the ASP.NET credentials. Bear in mind that <b>impersonation is a very expensive operation; it's not something you want to do often</b>.
</p>
<p>
Scott's code assumes we want to impersonate the current user and that we don't have the password. I want to Process.Start as an arbitrary function account using plaintext account and password information. That requires a more masochistic workaround-- calling the newer Win32 API method <b>CreateProcessWithLogonW()</b> directly. The only good sample code I could find was for VB6: <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;285879">How To Start a Process as Another User from Visual Basic</a>. However, I couldn't get this to work in VB.NET.
</p>
<p>
Even if I could get that API call to work, I still wouldn't have the amenities of the Process class that I need. I want to redirect the standard output and standard error output, then capture them into strings, so I can echo the result of my command line operation to the web page. There's a good <a href="http://www.codeproject.com/csharp/LaunchProcess.asp">example of command line capture behavior</a> on CodeProject. That's for WinForms, but the process is similar for ASP.NET. Well, except for that pesky Process.Start credentials problem.. <a href="http://blogs.msdn.com/shawnfa/archive/2004/06/02/146915.aspx">another reason to look forward to .NET 2.0</a>, I guess.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-11-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/processstart-and-impersonation/</guid>
</item>
</channel>
</rss>
