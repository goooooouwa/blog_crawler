<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Rubber Duck Problem Solving</title>
<link>https://blog.codinghorror.com/rubber-duck-problem-solving/</link>
<content>
                <!--kg-card-begin: markdown--><p>At <a href="http://stackexchange.com">Stack Exchange</a>, <b>we insist that people who ask questions <i>put some effort into their question</i>, and we're kind of jerks about it</b>. That is, when you set out to ask a question, you should …</p>
<ul>
<li>Describe what's happening in sufficient detail that we can follow along. Provide the necessary background for us to understand what's going on, even if we aren't experts in your particular area.</li>
<li>Tell us why you <i>need</i> to know the answer. What led you here? Is it idle curiosity or is this somehow blocking you on a project? We don't need your whole life story, just give us some context here.</li>
<li>Share your research on your problem; what have you found so far? Why didn't it work? And if you didn't do any research … should you even be asking? If you're inviting us to spend our valuable time helping you, it's only fair that you put in a reasonable amount of your valuable time into crafting a decent question. Help us help you!</li>
</ul>
<p>We have a great <a href="http://superuser.com/questions/how-to-ask">How to Ask page</a> that explains all of this, which is linked generously throughout the network. (And on Stack Overflow, due to massive question volume, we actually <i>force</i> new users to click through that page before asking their first question. You can see this yourself by asking a question as a new user.)</p>
<p>What we're trying to prevent, most of all, is the unanswerable drive-by question. Those help nobody, and left unchecked they can ruin a Q&amp;A site, turning it into a virtual ghost town. On Stack Exchange, questions that are so devoid of information and context that they can't reasonably be answered will be actively closed, and if they aren't improved, eventually deleted.</p>
<p>Like I said, we're kinda jerks about this. But for good reason: we're not-so-subtly trying to <b>help you help yourself</b>, by teaching you <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging">Rubber Duck problem solving</a>. And boy does it ever work. I've gotten tons of feedback over the years about how people, in the process of writing up their <i>thorough, detailed</i> question for Stack Overflow or another Stack Exchange site, figured out the answer to their own problem.</p>
<img alt="Rubber-duckies" title="Rubber-duckies" src="https://blog.codinghorror.com/content/images/uploads/2012/03/6a0120a85dcdae970b016302cc18d5970d-800wi.jpg" border="0">
<p>It's quite common. See for yourself:</p>
<blockquote>
<p><a href="http://meta.stackoverflow.com/questions/74891/how-can-i-thank-the-community-when-i-solve-my-own-problems-rubber-duck">How can I thank the community when I solve my own problems?</a></p>
<p>I've only posted one question so far, and almost posted another. In both cases, I answered my own questions at least partially while writing it out. I credit the community and the process itself for making me think about the answer. There's nothing explicit in what I'm writing that states quite obviously the answer I needed, but something about writing it down makes me think along extra lines of thought.</p>
<p><a href="http://meta.stackoverflow.com/questions/20016/why-is-it-that-properly-formulating-your-question-for-stackoverflow-often-yiel">Why is it that properly formulating your question often yields you your answer?</a></p>
<p>I don't know how many times this has happened:</p>
<ul>
<li>I have a problem</li>
<li>I decide to bring it to stack overflow</li>
<li>I awkwardly write down my question</li>
<li>I realize that the question doesn't make any sense</li>
<li>I take 15 minutes to rethink how to ask my question</li>
<li>I realize that I'm attacking the problem from a wrong direction entirely.</li>
<li>I start from scratch and find my solution quickly.</li>
</ul>
<p>Does this happen to you? Sometimes asking the right question seems like half the problem.</p>
<p><a href="http://meta.stackoverflow.com/questions/68719/beginning-to-ask-a-question-on-stackoverflow-acually-helps-me-debug-my-problem-m">Beginning to ask a question actually helps me debug my problem myself</a></p>
<p>Beginning to ask a question actually helps me debug my problem myself, especially while trying to formulate a coherent and detailed enough question body in order to get decent answers. Has this happened to anybody else before?</p>
</blockquote>
<p>It's not a new concept, and every community seems to figure it out on their own given enough time, but "Ask the Duck" is <a href="http://hwrnmnbsol.livejournal.com/148664.html">a very powerful problem solving technique</a>.</p>
<blockquote>
<p>Bob pointed into a corner of the office. "Over there," he said, "is a duck. I want you to ask that duck your question."</p>
<p>I looked at the duck. It was, in fact, stuffed, and very dead. Even if it had not been dead, it probably would not have been a good source of design information. I looked at Bob. Bob was dead serious. He was also my superior, and I wanted to keep my job.</p>
<p>I awkwardly went to stand next to the duck and bent my head, as if in prayer, to commune with this duck. "What," Bob demanded, "are you doing?"</p>
<p>"I'm asking my question of the duck," I said.</p>
<p>One of Bob's superintendants was in his office. He was grinning like a bastard around his toothpick. "Andy," he said, "I don't want you to pray to the duck. I want you to <i>ask the duck your question</i>."</p>
<p>I licked my lips. "Out loud?" I said.</p>
<p>"Out loud," Bob said firmly.</p>
<p>I cleared my throat. "Duck," I began.</p>
<p>"Its name is Bob Junior," Bob's superintendant supplied. I shot him a dirty look.</p>
<p>"Duck," I continued, "I want to know, when you use a clevis hanger, what keeps the sprinkler pipe from jumping out of the clevis when the head discharges, causing the pipe to..."</p>
<p>In the middle of asking the duck my question, the answer hit me. The clevis hanger is suspended from the structure above by a length of all-thread rod. If the pipe-fitter cuts the all-thread rod such that it butts up against the top of the pipe, it essentially will hold the pipe in the hanger and keep it from bucking.</p>
<p>I turned to look at Bob. Bob was nodding. "You know, don't you," he said.</p>
<p>"You run the all-thread rod to the top of the pipe," I said.</p>
<p>"That's right," said Bob. "Next time you have a question, I want you to come in here and ask the duck, not me. Ask it out loud. If you still don't know the answer, then you can ask me."</p>
<p>"Okay," I said, and got back to work.</p>
</blockquote>
<p>I love this particular story because it makes it crystal clear how <b>the critical part of rubber duck problem solving is to <i>totally commit</i> to asking a thorough, detailed question of this imaginary person or inanimate object</b>. Yes, even if you end up throwing the question away because you eventually realize that you made some dumb mistake. The effort of walking an imaginary someone through your problem, step by step and in some detail, is what will often lead you to your answer. If you aren't willing to put the effort into fully explaining the problem and how you've attacked it, you can't reap the benefits of thinking deeply about your own problem before you ask others to.</p>
<p>If you don't have a <a href="http://www.codinghorror.com/blog/2009/02/whos-your-coding-buddy.html">coding buddy (but you totally should)</a>, you can leverage the Rubber Duck problem solving technique to figure out problems all by yourself, or with the benefit of the greater Internet community. Even if you don't get the answer you wanted, forcing yourself to fully explain your problem – <a href="http://www.codinghorror.com/blog/2011/07/nobodys-going-to-help-you-and-thats-awesome.html">ideally in writing</a> – will frequently lead to new insights and discoveries.</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] What's your next career move? <a href="http://careers.stackoverflow.com/" rel="nofollow">Stack Overflow Careers</a> has the best job listings from great companies, whether you're looking for opportunities at a startup or Fortune 500. You can search our <a href="http://careers.stackoverflow.com/jobs" rel="nofollow">job listings</a> or <a href="http://careers.stackoverflow.com/cv" rel="nofollow">create a profile</a> and let employers find you.
</td></tr>
</table>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2012-03-13T13:18:35.000Z</pubDate>
<guid>https://blog.codinghorror.com/rubber-duck-problem-solving/</guid>
</item>
</channel>
</rss>
