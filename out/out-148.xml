<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Breaking the Web's Cookie Jar</title>
<link>https://blog.codinghorror.com/breaking-the-webs-cookie-jar/</link>
<content>
                <!--kg-card-begin: markdown--><p>
The Firefox add-in <a href="http://codebutler.com/firesheep">Firesheep</a> caused quite an uproar a few weeks ago, and justifiably so. Here's how it works:
</p>
<p>
</p>
<ul>
<li>Connect to a public, <i>unencrypted</i> WiFi network. In other words, a WiFi network that doesn't require a password before you can connect to it.
</li>
<li>Install Firefox and the Firesheep add-in.
</li>
<li>Wait. Maybe have a latte while you're waiting.
</li>
<li>Click on the user / website icons that appear over time in Firesheep to <b>instantly log in as that user on that website</b>.
</li>
</ul>
<p>
Crazy! This guy who wrote Firesheep must be a world-class hacker, right?
</p>
<p>
Well, no. The work to package this up in a point-and-click way that is (sort of) accessible to power users is laudable, but what Firesheep actually <i>does</i> is far from magical. It's more of an art project and PR stunt than an actual hack of any kind. Still, I was oddly excited to see Firesheep get so much PR, <b>because it highlights a fundamental issue with the architecture of the web.</b>
</p>
<p>
The web is kind of a primitive medium. The only way websites know who you are is through tiny, uniquely identifiying strings your browser sends to the webserver on each and every click:
</p>
<p>
</p>
<pre>
GET / HTTP/1.1
Host: diy.stackexchange.com
Connection: keep-alive
User-Agent: Chrome/7.0.517.44
Accept-Language: en-US,en;q=0.8
<font color="red">Cookie: diyuser=t=ZlQOG4kege&amp;s=8VO9gjG7tU12s</font>
If-Modified-Since: Tue, 09 Nov 2010 04:41:12 GMT
</pre>
<p>
These are the typical sort of HTTP headers your browser sends to a website on every click. See that little cookie in bright red? To a website, that's your fingerprint, DNA, and social security number all rolled into one. <b>Some part of the cookie contains a unique user ID that tells the website you are <i>you</i></b>.
</p>
<p>
And guess what? That cookie is always broadcast in plain text every single time you click a link on any website. Right out in the open where anyone -- well, technically, <i>anyone who happens to be on the same network as you and is in a position to view your network packets</i> -- can just grab it out of the ether and <b>immediately impersonate you on any website you are a member of.</b>
</p>
<p>
<img class="asset  asset-image at-xid-6a0120a85dcdae970b013488f70af1970c" alt="Broken-cookie" title="Broken-cookie" src="https://blog.codinghorror.com/content/images/uploads/2010/11/6a0120a85dcdae970b013488f70af1970c-800wi.jpg" border="0">
</p>
<p>
Now that you know how cookies work (and I'm not saying it's rocket surgery or anything), you also know that what Firesheep does is relatively straightforward:
</p>
<p>
</p>
<ol>
<li>Listen to all HTTP traffic.
</li>
<li>Wait for HTTP headers from a known website.
</li>
<li>Isolate the part of the cookie header that identifies the user.
</li>
<li>Launch a new browser session with that cookie. Bam! As far as the target webserver is concerned, you <i>are</i> that user!
</li>
</ol>
<p>
All Firesheep has to do, really, is <i>listen</i>. That's pretty much all there is to this "hack". Scary, right? Well, then you should be positively quaking in your boots, because <b>this is the way the entire internet has worked since 1994</b>, when <a href="http://en.wikipedia.org/wiki/HTTP_cookie#History">cookies were invented</a>.
</p>
<p>
So why wasn't this a problem in, say, 2003? Three reasons:
</p>
<p>
</p>
<ol>
<li>Commodity public wireless internet connections were not exactly common until a few years ago.
</li>
<li>Average people have moved beyond mostly anonymous browsing and transferred significant parts of their identity online (aka the Facebook effect).
</li>
<li>The tools required to listen in on a wireless network are slightly â€¦ less primitive now.
</li>
</ol>
<p>
Firesheep came along at the exact inflection point of these three trends. And mind you, it is still not a sure thing -- Firesheep requires a particular set of wireless network chipsets that support <a href="http://en.wikipedia.org/wiki/Promiscuous_mode">promiscuous mode</a> in the lower level WinPcap library that Firesheep relies on. But we can bet that the floodgates have been opened, and future tools similar to this one will become increasingly a one-click affair.
</p>
<p>
The other reason this wasn't a problem in 2003 is because <b>any website that truly <i>needed</i> security switched to encrypted HTTP -- aka <a href="http://en.wikipedia.org/wiki/HTTP_Secure">Secure HTTP</a> -- long ago</b>. HTTPS was invented in 1994, at the same time as the browser cookie. This was not a coincidence. The creators of the cookie knew from day one they needed a way to protect them from prying eyes. Even way, way back in the dark, primitive ages of 2003, any banking website or identity website worth a damn wouldn't even <i>consider</i> using plain vanilla HTTP. They'd be laughed off the internet!
</p>
<p>
The outpouring of concern over Firesheep is justified, because, well, the web's cookie jar has always been kind of broken -- and we ought to do something about it. But what?
</p>
<p>
Yes, <b>you can naively argue that every website should encrypt all their  traffic all the time</b>, but to me that's a "boil the sea" solution. I'd rather see a better, more secure identity protocol than ye olde HTTP cookies. I don't actually care if anyone sees the rest of my public activity on Stack Overflow; it's hardly a secret. But gee, I sure <i>do</i> care if they <a href="http://www.codinghorror.com/blog/2008/08/protecting-your-cookies-httponly.html">somehow sniff out my cookie and start running around doing stuff as me!</a> Encrypting everything just to protect that one lousy cookie header seems like a whole lot of overkill to me.
</p>
<p>
I'm not holding my breath for that to happen any time soon, though. So here's what you can do to protect yourself, right now, today:
</p>
<p>
</p>
<ol>
<li>
<b>We should be very careful how we browse on unencrypted wireless networks</b>. This is the great gift of Firesheep to all of us. If nothing else, we should be thanking the author for this simple, stark warning. It's an unavoidable fact of life: if you must go wireless, seek out <i>encrypted</i> wireless networks. If you have no other choices except unencrypted wireless networks, browse anonymously -- quite possible if all you plan to do is casually surf the web and read a few articles -- and <i>only</i> log in to websites that support https. Anything else risks identity theft.
</li>
<li>
<b>Get in the habit of accessing your web mail through HTTPS</b>. Email is <a href="http://www.codinghorror.com/blog/2008/06/please-give-us-your-email-password.html">the de-facto skeleton key to your online identity</a>. When your email is compromised, all is lost. If your webmail provider does not support secure http, they are idiots. Drop them like a hot potato and <i>immediately</i> switch to one that does. Heck, the smart webmail providers <a href="http://gmailblog.blogspot.com/2010/01/default-https-access-for-gmail.html">already switched to https by default!</a>
</li>
<li>
<b>Lobby the websites you use to offer HTTPS browsing</b>. I think we're clearly past the point where only banks and finance sites should be expected to use secure HTTP. As more people shift more of their identities online, it makes sense to protect those identities by moving HTTPS from the domain of a massive bank vault door to just plain <i>locking the door</i>. <a href="http://www.imperialviolet.org/2010/06/25/overclocking-ssl.html">SSL isn't as expensive as it used to be</a>, in every dimension of the phrase, so this is not an unreasonable thing to ask your favorite website for.
</li>
</ol>
<p>
This is very broad advice, and there are a whole host of technical caveats to the above. But it's a starting point toward evangelizing the risks and responsible use of open wireless networks. Firesheep may indeed have broken the web's cookie jar. But it was kind of an old, beat up, cracked cookie jar in the first place. I hope the powers that be will use Firesheep as incentive to <b>build a better online identity solution than creaky old HTTP cookies</b>.
</p>
<p>
</p>
<p>
<!--kg-card-end: markdown-->
            </p></content>
<pubDate>2010-11-13T23:34:45.000Z</pubDate>
<guid>https://blog.codinghorror.com/breaking-the-webs-cookie-jar/</guid>
</item>
</channel>
</rss>
