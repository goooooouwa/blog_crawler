<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Console apps and AppDomain.CurrentDomain.UnhandledException</title>
<link>https://blog.codinghorror.com/console-apps-and-appdomain-currentdomain-unhandledexception/</link>
<content>
                <!--kg-card-begin: markdown--><p>This one has me stumped. I'd swear this behaved differently prior to .NET 1.1 service pack 1 (and/or XP SP2), but I can't prove it. As reported by a CodeProject reader, <strong>you'll get the standard .NET crash dialog in a console app, even if you've registered an unhandled exception handler for your AppDomain</strong>. What gives? Why doesn't AppDomain.CurrentDomain.UnhandledException capture exceptions on the main thread of a .NET console application?</p>
<p>But don't take my word for it-- try it yourself. Use <a href="http://www.developer.com/net/cplus/article.php/10919_2108931_1">this sample</a> (<a href="http://www.developer.com/img/articles/2003/03/12/NET/DeadDotNet.zip">source code zip file</a>) from John Robbins, co-founder of Wintellect. Or, paste the code from <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemAppDomainClassUnhandledExceptionTopic.asp">this MSDN article</a> into a new console app and run it:</p>
<pre>Sub Main()
Dim cd As AppDomain = AppDomain.CurrentDomain
AddHandler cd.UnhandledException, AddressOf MyHandler
Try
Throw New Exception("1")
Catch e As Exception
Console.WriteLine("Catch clause caught : " + e.Message)
End Try
Throw New Exception("2")
' Expected output:
'   Catch clause caught : 1
'   MyHandler caught : 2
End Sub
Sub MyHandler(sender As Object, args As UnhandledExceptionEventArgs)
Dim e As Exception = DirectCast(args.ExceptionObject, Exception)
Console.WriteLine("MyHandler caught : " + e.Message)
End Sub
</pre>
<p>At first I was concerned that installing VS.NET had somehow forced me into some kind of bizarre first-chance exception mode exclusive to console applications, but not so. <strong>The compiled .exe behaves in the same way on every machine I tried it on</strong>: I get the standard .NET crash dialog, then <em>after</em> I dismiss that, I get the unhandled exception handler I wanted in the first place. That's.. not exactly the order I had in mind.</p>
<p>There's <a href="http://www.hanselman.com/blog/PermaLink,guid,d5ce2207-514d-4370-8650-9fe81478b54f.aspx">a way to disable the .NET JIT debugging dialog</a>, as described by Scott Hanselman. But that's an extreme "solution": it disables the crash dialog for all .NET apps. It's also treating the symptoms rather than the disease: <strong>why can't we catch unhandled exceptions in console apps any more?</strong> I'd swear this worked the last time I looked at it. And the MSDN sample code certainly implies that it's possible-- but good luck getting that sample to print the expected output.</p>
<p>So what am I missing here?</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-02-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/console-apps-and-appdomain-currentdomain-unhandledexception/</guid>
</item>
</channel>
</rss>
