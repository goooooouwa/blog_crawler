<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>UI-First Software Development</title>
<link>https://blog.codinghorror.com/ui-first-software-development/</link>
<content>
                <!--kg-card-begin: markdown--><p>
We're currently in the midst of building the new web property I <a href="http://www.codinghorror.com/blog/archives/001074.html">alluded to in a previous post</a>. Before I write a single line of code, I want to have a <b>pretty clear idea of what the user interface will look like first</b>. I'm in <a href="http://blogs.msdn.com/rick_schaut/archive/2004/04/02/106929.aspx">complete agreement with Rick Schaut here</a>:
</p>
<p>
</p>
<blockquote>
When you're working on end-user software, and it doesn't matter if you're working on a web app, adding a feature to an existing application, or working on a plug-in for some other application, <b>you need to design the UI <i>first</i></b>.
<p>
This is hard for a couple of reasons. The first is that most programmers, particularly those who've been trained through University-level computer science courses, learned how to program by first writing code that was intended to be run via the command line. As a consequence, we learned how to implement efficient algorithms for common computer science problems, but we never learned how to design a good UI.
</p>
</blockquote>
<p>
Of course, <a href="http://www.codinghorror.com/blog/archives/000325.html">UI is hard</a>, far harder than coding for developers. It's tempting to skip the tough part and do what comes naturally -- start banging away in a code window with no real thought given to how the user will interact with the features you're building.
</p>
<p>
Remember, to the end user, <a href="http://www.codinghorror.com/blog/archives/000371.html">the interface <i>is</i> the application</a>. Doesn't it make sense to think about that <i>before</i> firing up the compiler?
</p>
<p>
It's certainly true that there are limitations on how the UI can be built based on the technology you're using. Just because some pixels can be arranged a certain way in Photoshop doesn't mean that can magically be turned into a compiling, shippable product in any sane timeframe. To ameliorate that problem, take advantage of <a href="http://www.codinghorror.com/blog/archives/000499.html">visual design patterns</a>. If you're building a GUI application, use a palette of widgets common to your GUI. If you're building a web application, use a palette of HTML, CSS, and DOM elements from all over the web. Let the palette enforce your technology constraints.
</p>
<p>
It shouldn't be difficult to sit down with a few basic tools and slap together a rough mockup of how the user interface will look. However, it is extremely important at this point to <b>stay out of technical development environments when mocking your user interface</b>, or the temptation to turn the model into the product may be too strong for your team to resist. Try to avoid <a href="http://www.codinghorror.com/blog/archives/000256.html">the prototype pitfall</a>.
</p>
<p>
So how do we prototype the UI without relying on our development tools? One way is <a href="http://www.alistapart.com/articles/paperprototyping">simple paper prototyping</a>.
</p>
<p>
<a href="http://www.alistapart.com/articles/paperprototyping"><img alt="paper prototype" border="0" class="at-xid-6a0120a85dcdae970b0120a86dd916970b" height="487" src="https://blog.codinghorror.com/content/images/uploads/2008/04/6a0120a85dcdae970b0120a86dd916970b-pi.jpg" width="540"></a>
</p>
<p>
The book <a href="http://www.amazon.com/exec/obidos/ASIN/1558608702/codihorr-20">Paper Prototyping: The Fast and Easy way to Design and Refine User Interfaces</a> is an excellent introduction to paper prototyping. You can interactively browse sections of this book at <a href="http://www.amazon.com/exec/obidos/ASIN/1558608702/codihorr-20">Amazon</a>, through <a href="http://books.google.com/books?hl=en&amp;id=5OhE7dyGtmgC&amp;printsec=frontcover&amp;source=web">Google Books</a>, and <a href="http://www.paperprototyping.com/what.html">the book's own dedicated web site</a>.
</p>
<p>
There's a certain timelessness to paper prototyping that holds a deep appeal, <a href="http://www.useit.com/alertbox/20030414.html">as Jacob Nielsen points out</a>:
</p>
<p>
</p>
<blockquote>
Paper prototyping has a second benefit, besides its impact on your current design project's quality. It will also benefit your career. Consider all the other books you've read about computers, Web design, and similar topics. How much of what you learned will still be useful in ten years? In twenty years? In the immortal words of my old boss, Scott McNealy, <b>technology has the shelf life of a banana.</b>
<p>
In contrast, the paper prototyping technique has a shelf life closer to that of, say, paper. Once you've learned paper prototyping, you can use it in every project you do for the rest of your career. I have no idea what user interface technologies will be popular in twenty years, but I do know that I'll have to subject those designs to usability evaluation, and that paper prototyping will be a valuable technique for running early studies.
</p>
</blockquote>
<p>
Paper prototypes are usually pitched in terms of doing <a href="http://www.codinghorror.com/blog/archives/000779.html">low-fi usability studies</a>, and rightly so. But I find a paper prototype tremendously helpful even if I'm the only one that ever sees it. I need to create an image in my mind of what I'm building, as it will be seen by the world, before I start pouring the concrete to make it real.
</p>
<p>
If you need any more convincing that paper prototyping is an incredibly valuable tool-- even for mere developers-- consider the advice of Jared Spool's company, User Interface Engineering:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.uie.com/articles/paper_prototyping/">Paper Prototypes: Still Our Favorite</a> (1998)
</li>
<li>
<a href="http://www.uie.com/articles/prototyping_tips/">Five Paper Prototyping Tips</a> (2000)
</li>
<li>
<a href="http://www.uie.com/articles/looking_back_on_paper_prototyping/">Looking Back on 16 Years of Paper Prototyping</a> (2005)
</li>
</ul>
<p>
I also recommend reading through <a href="http://www.snyderconsulting.net/article_paperprototyping.htm#commonConcerns">Common Concerns about Paper Prototyping</a> if you're still on the fence.
</p>
<p>
But what happens when you <b>outgrow paper prototying?</b> Jensen Harris, one of the principal UI designers on the Office 2007 team, first <a href="http://blogs.msdn.com/jensenh/archive/2006/01/06/510069.aspx">introduced me to PowerPoint prototyping</a>:
</p>
<p>
</p>
<blockquote>
We use PowerPoint as kind of a better version of <a href="http://blogs.msdn.com/jensenh/archive/2006/01/06/510069.aspx">[Office 2007] paper prototypes</a>. This technique has several advantages: prototypes can be made to feel somewhat interactive, because the content is electronic it can be modified more easily than paper, and (best of all) the usability participant uses the mouse and is on the computer, so it feels natural to them.
</blockquote>
<p>
Of course, it doesn't have to be PowerPoint. Use whatever tool you like, as long as it's <i>not</i> a development tool. You don't want something too powerful. What you want is mild interactivity while remaining simple and straightforward for quick iterative changes. That's the logical next step up from paper prototyping.
</p>
<p>
<img alt="PowerPoint prototype example" border="0" class="at-xid-6a0120a85dcdae970b0120a86dd942970b" height="400" src="https://blog.codinghorror.com/content/images/uploads/2008/04/6a0120a85dcdae970b0120a86dd942970b-pi.png" width="600">
</p>
<p>
It's a lot easier to share this digital artifact on a distributed team than it is to share a bunch of physical paper. If you're curious about the nuts and bolts of PowerPoint prototyping, dig in:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.microsoft.com/expression/events-training/globalevent/player/Default.html?South-Korea_Manuel-Clement_Keynote_Wireframe-Prototyping-Using-PowerPoint-2007=Manuel_Clement=Wireframe-Prototyping_Using_PowerPoint_2007">Wireframe prototyping using PowerPoint 2007</a> (Manuel Clement, 26 minute video)
</li>
<li>
<a href="http://www.jansfreeware.com/articles/misc-prototyping.html">Step-by-Step Guide to PowerPoint Prototyping</a> (Jan Verhoeven)
</li>
<li>
<a href="http://www.istartedsomething.com/20071018/powerpoint-prototype-toolkit-01/">PowerPoint Prototyping Toolkit</a> (Long Zheng)
</li>
</ul>
<p>
The pursuit of UI-First software development is more important than any particular tool. Use paper, use PowerPoint, <a href="http://www.adaptivepath.com/blog/2006/08/28/keynote-as-a-prototyping-tool/">use Keynote</a>, use whatever makes sense to you. As long as you avoid, in the words of Manuel Clement, <i>pouring concrete too early</i>.
</p>
<p>
<b>How does your team practice UI-First software development?</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-04-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/ui-first-software-development/</guid>
</item>
</channel>
</rss>
