<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Are Design Patterns How Languages Evolve?</title>
<link>https://blog.codinghorror.com/are-design-patterns-how-languages-evolve/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Paul Graham's essay Revenge of the Nerds is a <a href="http://www.paulgraham.com/icad.html">nearly pornographic love letter to Lisp</a>. If you can manage to read all the way to the end, there's an interesting footnote buried at the bottom:
</p>
<p>
</p>
<blockquote>
<a href="http://norvig.com/design-patterns/">Peter Norvig</a> found that 16 of the 23 patterns in Design Patterns were "invisible or simpler" in Lisp.
</blockquote>
<p>
He should have opened the essay with that evidence, because it strengthens his conclusion considerably:
</p>
<blockquote>
In the OO world you hear a good deal about "patterns". <b>When I see patterns in my programs, I consider it a sign of trouble.</b> The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I'm using abstractions that aren't powerful enough-- often that I'm generating by hand the expansions of some macro that I need to write.
</blockquote>
<p>
There's a Wiki entry called <a href="http://c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures">Are Design Patterns Missing Language Features?</a> which expands and elaborates on Paul Graham's hypothesis. It even has a handy chart of the <a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/codihorr-20">classic Gang of Four patterns</a> and the corresponding language features that implement each one. It then degrades into a weird little Wiki-fight, but the saner comments look like this:
</p>
<p>
</p>
<blockquote>
Has anyone ever considered that <b>design patterns are the way that programming languages evolve?</b> In the same way as communicative language, commonly used abbreviations ( or patterns ) may become standard. In english words like "won't" and "isn't" are abbreviations, but are more or less considered standard words today. In the same way, 'if-then-else' or 'do-while' could be considered design patterns that have now become standard features in many languages. Perhaps later languages will include many design patterns as standard features.
</blockquote>
<p>
According to Graham, Lisp is so malleable that design patterns immediately become part of the base language; they are indistinguishable from the original core language constructs. Lisp doesn't need to evolve-- it just instantly <i>becomes</i>. One wonders, then, why Lisp hasn't become sentient and taken over the world by now. As Paul helpfully points out, it could be because <a href="http://www.paulgraham.com/icadmore.html">we're so stupid</a>:
</p>
<p>
</p>
<blockquote>
I also disagree that it is not believable that the vast majority of programmers have been boneheads for 40 years. It seems to me entirely possible.
</blockquote>
<p>
All kidding aside, I tend to agree on two points:
</p>
<ol>
<li>
<b>Excessive reliance on design patterns is indicative of failings in the language</b>. As many commenters in the wiki point out, you'd see dozens of "design patterns" in assembly or C code; these are language features that we take for granted today. We've certainly seen evolution along those lines even in the modest lifetime of .NET so far. There are plenty of "syntactical sugar" constructs such as <code>Using</code> which encapsulate common patterns, and even more (such as <code>Nullable</code> and Generics) on the way.
</li>
<li>
<b>Languages evolve-- slowly.</b> It takes time to figure out the failings, shortcomings, and weaknesses of any language. Even Lisp. That's why <a href="http://www.levenez.com/lang/">the language family tree has roots going all the way back to 1954</a>. New languages are created; old ones fall out of favor. And there's a lot of cross-pollination between family trees. Almost all modern languages have a very complete implementation of regular expressions, which is one of the central features of the PERL language.
</li>
</ol>
<p>
If anything, Lisp is strong evidence that computer language evolution is quite slow; it's one of the oldest languages on <a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">the chart</a>, and we're still adapting features from it.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-06-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-design-patterns-how-languages-evolve/</guid>
</item>
</channel>
</rss>
