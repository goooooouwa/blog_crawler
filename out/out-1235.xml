<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Level 5 means never having to say you're sorry</title>
<link>https://blog.codinghorror.com/level-5-means-never-having-to-say-youre-sorry/</link>
<content>
                <!--kg-card-begin: markdown--><p>In <a href="http://www.joelonsoftware.com/articles/fog0000000024.html">Big Macs vs. The Naked Chef</a>, Joel derides the least common denominator effect of formal methodologies:</p>
<blockquote>
Mystery: why is it that some of the biggest IT consulting companies in the world do the worst work?
<ol>
<li>Some things need talent to do really well.
</li>
<li>It's hard to scale talent.
</li>
<li>One way people try to scale talent is by having the talent create rules for the untalented to follow.
</li>
<li>The quality of the resulting product is very low.
</li>
</ol>
<p>You can see the exact same story playing out in IT consulting. How many times have you heard this story?</p>
<p>Mike was unhappy. He had hired a huge company of IT consultants to build The System. The IT consultants he hired were incompetents who kept talking about "The Methodology" and who spent millions of dollars and had failed to produce a single thing.</p>
<p>Luckily, Mike found a youthful programmer who was really smart and talented. The youthful programmer built his whole system in one day for $20 and pizza. Mike was overjoyed. He recommended the youthful programmer to all his friends.</p>
<p>Youthful Programmer starts raking in the money. Soon, he has more work than he can handle, so he hires a bunch of people to help him. The good people want too many stock options, so he decides to hire even younger programmers right out of college and "train them" with a 6 week course.</p>
<p>The trouble is that the "training" doesn't really produce consistent results, so Youthful Programmer starts creating rules and procedures that are meant to make more consistent results. Over the years, the rule book grows and grows. Soon it's a six-volume manual called The Methodology.</p>
<p>After a few dozen years, Youthful Programmer is now a Huge Incompetent IT Consultant with a capital-M-methodology and a lot of people who blindly obey the Methodology, even when it doesn't seem to be working, because they have no bloody idea whatsoever what else to do, and they're not really talented programmers â€“ they're just well-meaning Poli Sci majors who attended the six-week course.</p>
<p>And Newly Huge Incompetent IT Consultant starts messing up. Their customers are unhappy. And another upstart talented programmer comes and takes away all their business, and the cycle begins anew.</p>
<p>What's the moral of the story? Beware of Methodologies. They are a great way to bring everyone up to a dismal, but passable, level of performance, but at the same time, <b>[Methodologies] are aggravating to more talented people who chafe at the restrictions that are placed on them.</b> It's pretty obvious to me that a talented chef is not going to be happy making burgers at McDonald's, precisely because of McDonald's rules. So why do IT consultants brag so much about their methodologies?</p>
</blockquote>
<p>Joel's entry, written in January 2001, is essentially championing the same <i>Dreyfus Model of Skill Acquisition</i> that the Pragmatic Progammers began advocating in 2002 with <a href="https://web.archive.org/web/20040305050923/http://pragmaticprogrammer.com/courses/racehorsesheep.html">Herding Racehorses and Racing Sheep</a>. Andy briefly covered this in the <a href="http://blog.codinghorror.com/pragmatic-programming/">presentation he gave to our group</a>, but the <a href="http://www.infoq.com/presentations/Developing-Expertise-Dave-Thomas">full slide deck</a> goes into much more detail:</p>
<blockquote>
<p><b>Level 1: Beginner</b></p>
<ul>
<li>Little or no previous experience
</li>
<li>Doesn't want to learn: wants to accomplish a goal
</li>
<li>No discretionary judgement
</li>
<li>Rigid adherence to rules
</li>
</ul>
<p><b>Level 2: Advanced Beginner</b></p>
<ul>
<li>Starts trying tasks on their own
</li>
<li>Has difficulty troubleshooting
</li>
<li>Wants information fast
</li>
<li>Can place some advice in context required
</li>
<li>Uses guidelines, but without holisitic understanding
</li>
</ul>
<p><b>Level 3: Competent</b></p>
<ul>
<li>Develops conceptual models
</li>
<li>Troubleshoots on their own
</li>
<li>Seeks out expert advice
</li>
<li>Sees actions at least partially in terms of long-term plans and goals
</li>
</ul>
<p><b>Level 4: Proficient</b></p>
<ul>
<li>Guided by maxims applied to the current situation
</li>
<li>Sees situations holistically
</li>
<li>Will self-correct based on previous performance
</li>
<li>Learns from the experience of others
</li>
<li>Frustrated by oversimplified information
</li>
</ul>
<p><b>Level 5: Expert</b></p>
<ul>
<li>No longer relies on rules, guidelines, or maxims
</li>
<li>Works primarily from intuition
</li>
<li>Analytic approaches only used in novel situations or when problems occur
</li>
<li>When forced to follow set rules, performance is degraded
</li>
</ul>
</blockquote>
<p>As Joel points out, <b>the value of big-Em methodology decreases very sharply as you climb the skill ladder.</b> He's also saying that the resulting value of hundreds of level 1 and 2 coders banging out millions of lines of code is surprisingly low, but that's a topic for another blog entry.</p>
<p>The Dreyfus model is a general model of skill acquisition that was originally developed through observation of thousands of nurses performing their work. It has nothing to do with software development, per se. You could be a level 1 skydiver and a level 3 cook. But there are some <a href="https://web.archive.org/web/20060425151839/http://blogs.pragprog.com/cgi-bin/pragdave.cgi/Practices/ValueWorker.rdoc/style/print">interesting historical parallels with software development</a>:</p>
<blockquote>
The nursing profession had a lot of problems in the 70's. The Benner book, and the Dreyfus model, is often quoted as being instrumental in helping turn it around. And if you read the book, you'll see that <b>the problems faced by nursing back then have strong parallels to those faced by the software industry today.</b>
</blockquote>
<p>And <a href="https://web.archive.org/web/20060425151839/http://blogs.pragprog.com/cgi-bin/pragdave.cgi/Practices/ValueWorker.rdoc/style/print">as Dave points out</a>, you <i>really</i> don't want to be in a position where you're following a set of static, defined rules:</p>
<blockquote>
<b>What can companies effectively outsource? Stuff that can be specified precisely. Stuff that has rules.</b> This means that (in general) the jobs of novices will be more at risk from outsourcing that those of experts. Now, this is my no means a perfect model: companies outsource projects that shouldn't be outsourced, and companies have a strange habit of firing their experienced people in bad times because their salaries are 50% higher than the novices (why does no one ever account for the cost of all that experience walking out the door?). But, ignoring all the exceptions, in general we need to move away from the low Dreyfus levels and start occupying the higher Dreyfus levels if we are to to make ourselves less vulnerable to job evaporation. And Dreyfus is all about the acquisition of skills through experience.
</blockquote>
<p>Now, as amusing as it may be, I am not trying to encourage the <b>level 5 means never having to say you're sorry</b> attitude. "No rules" isn't shorthand for an air of smug superiority, although there's certainly no shortage of that in our profession. "No rules" means that we should actively seek out challenging development opportunities with lots of unknowns, work that takes considerable experience and skill. The kind of work that cannot be done by beginners slavishly following a big-Em methodology.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-02-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/level-5-means-never-having-to-say-youre-sorry/</guid>
</item>
</channel>
</rss>
