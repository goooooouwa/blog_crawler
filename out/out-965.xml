<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Flattening Arrow Code</title>
<link>https://blog.codinghorror.com/flattening-arrow-code/</link>
<content>
                <!--kg-card-begin: markdown--><p>I often encounter code like this:</p>
<pre language="c#">if (rowCount &gt; rowIdx)
    {
      if (drc[rowIdx].Table.Columns.Contains("avalId"))
      {
        do
        {
          if (Attributes[attrVal.AttributeClassId] == null)
          {
            // do stuff
          }
          else
          {
            if (!(Attributes[attrVal.AttributeClassId] is ArrayList))
            {
              // do stuff
            }
            else
            {
              if (!isChecking)
              {
                // do stuff
              }
              else
              {
                // do stuff
              }
            }
          }
          rowIdx++;
        }
        while (rowIdx &lt; rowCount &amp;&amp; GetIdAsInt32(drc[rowIdx]) == Id);
      }
      else
        rowIdx++;
    }
    return rowIdx;
  }  </pre>  
<p>The excessive nesting of conditional clauses pushes the code out into an arrow formation:</p>
<table width="550">
<tr>
<td valign="middle">
<pre>
if
  if
    if
      if
        do something
      endif
    endif
  endif
endif
</pre>
</td>
<td valign="middle">
<img alt="arrowhead.png" border="0" class="at-xid-6a0120a85dcdae970b0120a86d617a970b" height="173" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0120a86d617a970b-pi.png" width="176">
</td>

</tr>
</table>
<p>And you know you're definitely in trouble when <b>the code you're reading is regularly exceeding the right margin on a typical 1280x1024 display</b>. This is the <a href="http://c2.com/cgi/wiki?ArrowAntiPattern">Arrow Anti-Pattern</a> in action.</p>
<p>One of my primary refactoring tasks is "flattening" arrow code like this. Those sharp, pointy barbs are dangerous! Arrow code has a high <a href="http://www.sei.cmu.edu/str/descriptions/cyclomatic_body.html">cyclomatic complexity</a> value – a measure of how many distinct paths there are through code:</p>
<blockquote>
<b>Studies show a correlation between a program's cyclomatic complexity and its error frequency</b>. A low cyclomatic complexity contributes to a program's understandability and indicates it is amenable to modification at lower risk than a more complex program. A module's cyclomatic complexity is also a strong indicator of its testability.</blockquote>
<p>Where appropriate, I flatten that arrow code by doing the following:</p>
<ol>
<li>
<b>Replace conditions with guard clauses.</b> This code..
<p>
</p>
<pre>
if (SomeNecessaryCondition)
{
  // function body code
}
</pre>
<p>
.. works better as a guard clause:
</p>
<p>
</p>
<pre>
if (!SomeNecessaryCondition)
{
  throw new RequiredConditionMissingException;
}
// function body code
</pre>
<p>
</p>
</li>
<li>
<b>Decompose conditional blocks into seperate functions.</b> In the above example, we're in a do..while loop which could be decomposed:
<p>
</p>
<pre>
do
{
  ValidateRowAttribute(drc[rowIdx]);
  rowIdx++;
}
while(rowIdx &lt; rowCount &amp;&amp; GetIdAsInt32(drc[rowIdx]) == Id);
</pre>
<p>
</p>
</li>
<li>
<b>Convert negative checks into positive checks.</b> As a broad rule, I prefer to put the positive comparison first and let the negative comparison fall out naturally into the else clause. I think this reads a lot better and, more importantly, avoids the "I ain't not never doing that" syndrome:
<p>
</p>
<pre>
if (Attributes[attrVal.AttributeClassId] is ArrayList)
{
  // do stuff
}
else
{
  // do stuff
}
</pre>
<p>
</p>
</li>
<li>
<b>Always opportunistically return as soon as possible from the function.</b> Once your work is done, get the heck out of there! This isn't always possible – you might have resources you need to clean up. But whatever you do, you have to abandon the ill-conceived idea that there should only be one exit point at the bottom of the function.</li>
</ol>
<p>The goal is to have code that scrolls vertically a lot… but not so much horizontally.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-01-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/flattening-arrow-code/</guid>
</item>
</channel>
</rss>
