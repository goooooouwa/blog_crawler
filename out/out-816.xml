<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>I Pity The Fool Who Doesn't Write Unit Tests</title>
<link>https://blog.codinghorror.com/i-pity-the-fool-who-doesnt-write-unit-tests/</link>
<content>
                <!--kg-card-begin: markdown--><p>
J. Timothy King has a nice piece on <a href="http://www.jtse.com/blog/2006/07/11/twelve-benefits-of-writing-unit-tests-first">the twelve benefits of writing unit tests first</a>. Unfortunately, he seriously undermines his message by ending with this:
</p>
<p>
</p>
<blockquote>
However, if you are one of the [coders who won't give up code-first], one of those curmudgeon coders who would rather be right than to design good softwareÃ¢â‚¬Â¦ Well, you truly have my pity.
</blockquote>
<p>
Extending your pity to anyone who doesn't agree with you isn't exactly the most effective way to get your message across.
</p>
<p>
<img alt="Mr. T" border="0" class="at-xid-6a0120a85dcdae970b0120a86d6d7f970b" height="387" src="https://blog.codinghorror.com/content/images/uploads/2006/07/6a0120a85dcdae970b0120a86d6d7f970b-pi.jpg" width="333">
</p>
<p>
Consider Mr. T. He's been pitying fools since the early 80's, and the world is still awash in foolishness.
</p>
<p>
It's too bad, because the message is an important one. The general adoption of unit testing is one of the most fundamental advances in software development in the last 5 to 7 years.
</p>
<p>
</p>
<blockquote>
How do you solve a software problem? How do they teach you to handle it in school? What's the first thing you do? You think about how to solve it. You ask, "What code will I write to generate a solution?" But that's backward. The first thing you should be doing --  In fact, this is what they say in school, too, though in my experience it's paid more lip-service than actual service --  The first thing you ask is not "What code will I write?" The first thing you ask is "How will I know that I've solved the problem?"
<p>
We're taught to assume we already know how to tell whether our solution works. It's a non-question. Like indecency, we'll know it when we see it. We believe we don't actually need to think, before we write our code, about what it needs to do. This belief is so deeply ingrained, it's difficult for most of us to change.
</p>
</blockquote>
<p>
King presents a list of <a href="http://www.jtse.com/blog/2006/07/11/twelve-benefits-of-writing-unit-tests-first">12 specific ways</a> adopting a test-first mentality has helped him write better code:
</p>
<p>
</p>
<ol>
<li>Unit tests prove that your code actually works
</li>
<li>You get a low-level regression-test suite
</li>
<li>You can improve the design without breaking it
</li>
<li>It's more fun to code with them than without
</li>
<li>They demonstrate concrete progress
</li>
<li>Unit tests are a form of sample code
</li>
<li>It forces you to plan before you code
</li>
<li>It reduces the cost of bugs
</li>
<li>It's even better than code inspections
</li>
<li>It virtually eliminates coder's block
</li>
<li>Unit tests make better designs
</li>
<li>It's faster than writing code without tests
</li>
</ol>
<p>
Even if you only agree with a quarter of the items on that list-- and I'd say at least half of them are true in my experience-- that is a huge step forward for software developers. You'll get no argument from me on the overall <a href="http://www.codinghorror.com/blog/archives/000265.html">importance of unit tests</a>. I've increasingly come to believe that <b>unit tests are so important that they should be a first-class language construct</b>.
</p>
<p>
However, I think the test-first dogmatists tend to be a little too religious for their own good. <b>Asking developers to fundamentally change the way they approach writing software overnight is asking a lot.</b> Particularly if those developers have yet to write their first unit test. I don't think any software development shop is ready for test-first development until they've adopted unit testing as a standard methodology on every software project they undertake. <a href="http://codebetter.com/blogs/jeffrey.palermo/archive/2006/03/28/141920.aspx">Excessive religious fervor</a> could sour them on the entire concept of unit testing.
</p>
<p>
And that's a shame, because <b>any tests are better than zero tests.</b> And isn't unit testing just a barely more formal way of doing the ad-hoc testing we've been doing all along? I think <a href="http://emw.inf.tu-dresden.de/de/pdai/Forschung/refactoring/refactoring_html/node7.html">Fowler</a> said it best:
</p>
<p>
</p>
<blockquote>
Whenever you are tempted to type something into a print statement or a debugger expression, write it as a test instead.
</blockquote>
<p>
I encourage developers to see the value of unit testing; I urge them to get into the habit of writing structured tests alongside their code. That small change in mindset could eventually lead to bigger shifts like test-first development-- but you have to crawl before you can <i>sprint</i>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-07-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-pity-the-fool-who-doesnt-write-unit-tests/</guid>
</item>
</channel>
</rss>
