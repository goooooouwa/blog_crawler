<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Dictionary Attacks 101</title>
<link>https://blog.codinghorror.com/dictionary-attacks-101/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Several high profile Twitter accounts <a href="http://blog.wired.com/27bstroke6/2009/01/professed-twitt.html">were recently hijacked</a>:
</p>
<p>
</p>
<blockquote>
An 18-year-old hacker with a history of celebrity pranks has admitted to Monday's hijacking of multiple high-profile Twitter accounts, including President-Elect Barack Obama's, and the official feed for Fox News.
<p>
The hacker, who goes by the handle GMZ, told Threat Level on Tuesday he gained entry to Twitter's administrative control panel by pointing an automated password-guesser at a popular user's account. The user turned out to be a member of Twitter's support staff, who'd chosen the weak password "happiness."
</p>
<p>
Cracking the site was easy, because <b>Twitter allowed an unlimited number of rapid-fire log-in attempts</b>.
</p>
<p>
"I feel it's another case of administrators not putting forth effort toward one of the most obvious and overused security flaws," he wrote in an IM interview. "I'm sure they find it difficult to admit it."
</p>
</blockquote>
<p>
If you're a moderator or administrator it is <i>especially</i> negligent to have such an easily guessed password. But the real issue here is the way Twitter allowed unlimited, as-fast-as-possible login attempts.
</p>
<p>
Given the <b>average user's password choices</b> -- as documented by Bruce Schneier's <a href="http://www.schneier.com/blog/archives/2006/12/realworld_passw.html">analysis of 34,000 actual MySpace passwords</a> captured from a <a href="http://www.codinghorror.com/blog/archives/000852.html">phishing attack</a> in late 2006 -- this is a pretty scary scenario.
</p>
<p>
<img alt="myspace-phishing-password-statistics-character-sets" border="0" class="at-xid-6a0120a85dcdae970b012877707b60970c" height="272" src="https://blog.codinghorror.com/content/images/uploads/2009/01/6a0120a85dcdae970b012877707b60970c-pi.png" width="447">
</p>
<p>
<img alt="myspace-phishing-password-statistics-length" border="0" class="at-xid-6a0120a85dcdae970b012877707b77970c" height="318" src="https://blog.codinghorror.com/content/images/uploads/2009/01/6a0120a85dcdae970b012877707b77970c-pi.png" width="458">
</p>
<p>
Based on this data, the average MySpace user has an 8 character alphanumeric password. Which isn't great, but doesn't sound <i>too</i> bad. That is, until you find out that 28 percent of those alphanumerics were all lowercase with a single final digit -- and two-thirds of the time that final digit was 1!
</p>
<p>
Yes, <a href="http://www.codinghorror.com/blog/archives/000631.html">brute force attacks are still for dummies</a>. Even the typically terrible MySpace password -- eight character all lowercase, ending in 1, would require around 8 billion login attempts:
</p>
<p>
</p>
<pre>
26 x 26 x 26 x 26 x 26 x 26 x 26 x 1  = 8,031,810,176
</pre>
<p>
At one attempt per second, that would take more than 250 years. <i>Per user!</i>
</p>
<p>
But a <a href="http://en.wikipedia.org/wiki/Dictionary_attack">dictionary attack</a>, like the one used in the Twitter hack? Well, that's another story. The entire Oxford English Dictionary <a href="http://www.askoxford.com/asktheexperts/faq/aboutenglish/numberwords">contains around 171,000</a> words. As you might imagine, the average person only uses a tiny fraction of those words, by some estimates <a href="http://www.worldwidewords.org/articles/howmany.htm">somewhere between 10 and 40 thousand</a>. At one attempt per second, we could try <b>every word in the Oxford English Dictionary in slightly less than two days</b>.
</p>
<p>
Clearly, the <i>last</i> thing you want to do is give attackers carte blanche to run unlimited login attempts. All it takes is one user with a weak password to provide attackers a toehold in your system. In Twitter's case, the attackers really hit the jackpot: the user with the weakest password happened to be a member of the Twitter administrative staff.
</p>
<p>
<b>Limiting the number of login attempts per user is security 101.</b> If you don't do this, you're practically setting out a welcome mat for anyone to launch a dictionary attack on your site, an attack that gets statistically more effective every day the more users you attract. In some systems, your account can get locked out if you try and fail to log in a certain number of times in a row. This can lead to denial of service attacks, however, and is generally discouraged. It's more typical for each failed login attempt to take longer and longer, like so:
</p>
<p>
</p>
<table width="250">
<tr>
<td>1st failed login</td>
<td>no delay</td>
</tr>
<tr>
<td>2nd failed login</td>
<td>2 sec delay</td>
</tr>
<tr>
<td>3rd failed login</td>
<td>4 sec delay</td>
</tr>
<tr>
<td>4th failed login</td>
<td>8 sec delay</td>
</tr>
<tr>
<td>5th failed login</td>
<td>16 sec delay</td>
</tr>
</table>
<p>
And so on. Alternately, you could display a <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> after the fourth attempt.
</p>
<p>
There are endless variations of this technique, but the net effect is the same: attackers can only try a handful of passwords each day. A brute force attack is out of the question, and a broad dictionary attack becomes impractical, at least in any kind of human time.
</p>
<p>
It's tempting to blame Twitter here, but honestly, I'm not sure they're alone. I <a href="http://www.codinghorror.com/blog/archives/000546.html">forget my passwords a lot</a>. I've made at least five or six attempts to guess my password on multiple websites and I can't recall ever experiencing any sort of calculated delay or account lockouts. I'm reasonably sure the big commercial sites have this mostly figured out. But since <a href="http://www.codinghorror.com/blog/archives/001121.html">every rinky-dink website on the planet demands that I create unique credentials especially for them</a>, any of them could be vulnerable. <b>You better hope they're <i>all</i> smart enough to throttle failed logins</b> -- and that you're careful to use unique credentials on every single website you visit.
</p>
<p>
Maybe this was less of a problem in the <a href="http://www.codinghorror.com/blog/archives/000599.html">bad old days of modems</a>, as there were severe physical limits on how fast data could be transmitted to a website, and how quickly that website could respond. But today, we have the one-two punch of naive websites running on blazing fast hardware, and users with speedy broadband connections. Under these conditions, I could see attackers regularly achieving up to two password attempts per second.
</p>
<p>
If you thought of dictionary attacks as mostly a desktop phenomenon, perhaps it's time to revisit that assumption. As Twitter illustrates, the web now offers ripe conditions for dictionary attacks. I urge you to test your website, or any websites you use -- and <b>make sure they all have some form of failed login throttling in place.</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-01-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dictionary-attacks-101/</guid>
</item>
</channel>
</rss>
