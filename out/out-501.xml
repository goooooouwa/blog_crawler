<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>A Visual Explanation of SQL Joins</title>
<link>https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/</link>
<content>
                <!--kg-card-begin: markdown--><p>I thought Ligaya Turmelle's <a href="http://www.khankennels.com/blog/index.php/archives/2007/04/20/getting-joins">post on SQL joins</a> was a great primer for novice developers. Since SQL joins <i>appear</i> to be set-based, the use of <a href="http://en.wikipedia.org/wiki/Venn_diagram">Venn diagrams</a> to explain them seems, at first blush, to be a natural fit. However, like the commenters to her post, I found that the Venn diagrams didn't quite match the <a href="http://en.wikipedia.org/wiki/Join_(SQL)">SQL join syntax</a> reality in my testing.</p>
<p>I love the concept, though, so let's see if we can make it work. Assume we have the following two tables. <strong>Table A</strong> is on the left, and <strong>Table B</strong> is on the right. We'll populate them with four records each.</p>
<pre>id name       id  name
-- ----       --  ----
1  <span style="color:red">Pirate</span>     1   Rutabaga
2  Monkey     2   <span style="color:red">Pirate</span>
3  <span style="color:red">Ninja</span>      3   Darth Vader
4  Spaghetti  4   <span style="color:red">Ninja</span></pre>
<p>Let's join these tables by the name field in a few different ways and see if we can get a conceptual match to those nifty Venn diagrams.</p>
<table cellpadding="6" cellspacing="4" width="900">
<thead></thead>
<tbody>
<tr>
<td valign="top">
<pre>SELECT * FROM TableA
<b>INNER JOIN</b> TableB
ON TableA.name = TableB.name
<p>id  name       id   name</p>
<hr>
<p>1   Pirate     2    Pirate<br>
3   Ninja      4    Ninja<br>
</p></pre>
<br>
<strong>Inner join</strong> produces only the set of records that match in both Table A and Table B.
</td>
<td valign="top">
<img alt="Venn diagram of SQL inner join" height="329" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877702708970c-pi.png" width="502">
</td>
</tr>
<tr>
<td valign="top">
<pre>SELECT * FROM TableA
<b>FULL OUTER JOIN</b> TableB
ON TableA.name = TableB.name
<p>id    name       id    name</p>
<hr>
<p>1     Pirate     2     Pirate<br>
2     Monkey     <span style="color:#ccc">null</span>  <span style="color:#ccc">null</span><br>
3     Ninja      4     Ninja<br>
4     Spaghetti  <span style="color:#ccc">null</span>  <span style="color:#ccc">null</span><br>
<span style="color:#ccc">null</span>  <span style="color:#ccc">null</span>       1     Rutabaga<br>
<span style="color:#ccc">null</span>  <span style="color:#ccc">null</span>       3     Darth Vader<br>
</p></pre>
<p><strong>Full outer join</strong> produces the set of all records in Table A and Table B, with matching records from both sides where available. If there is no match, the missing side will contain null.</p>
</td>
<td valign="top">
<img alt="Venn diagram of SQL cartesian join" height="329" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877702725970c-pi.png" width="502">
</td>
</tr>
<tr>
<td valign="top">
<pre>SELECT * FROM TableA
<b>LEFT OUTER JOIN</b> TableB
ON TableA.name = TableB.name

id  name       id    name
--  ----       --    ----
1   Pirate     2     Pirate
2   Monkey     <span style="color:#ccc">null</span>  <span style="color:#ccc">null</span>
3   Ninja      4     Ninja
4   Spaghetti  <span style="color:#ccc">null</span>  <span style="color:#ccc">null</span>
</pre>
<p><strong>Left outer join</strong> produces a complete set of records from Table A, with the matching records (where available) in Table B. If there is no match, the right side will contain null.</p>
</td>
<td valign="top">
<img alt="Venn diagram of SQL left join" height="329" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b01287770273e970c-pi.png" width="502">
</td>
</tr>
<tr>
<td valign="top">
<pre>SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name
<b>WHERE TableB.id IS null</b>
<p>id  name       id     name</p>
<hr>
<p>2   Monkey     <span style="color:#ccc">null</span>   <span style="color:#ccc">null</span><br>
4   Spaghetti  <span style="color:#ccc">null</span>   <span style="color:#ccc">null</span><br>
</p></pre>
<p>To produce the set of records only in Table A, but not in Table B, we perform the same left outer join, then <strong>exclude the records we don't want from the right side via a where clause</strong>.</p>
</td>
<td valign="top">
<img alt="join-left-outer.png" height="329" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877702754970c-pi.png" width="502">
</td>
</tr>
<tr>
<td valign="top">
<pre>
SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name
<b>WHERE TableA.id IS null
OR TableB.id IS null</b>
<p>id    name       id    name</p>
<hr>
<p>2     Monkey     <span style="color:#ccc">null</span>  <span style="color:#ccc">null</span><br>
4     Spaghetti  <span style="color:#ccc">null</span>  <span style="color:#ccc">null</span><br>
<span style="color:#ccc">null</span>  <span style="color:#ccc">null</span>       1     Rutabaga<br>
<span style="color:#ccc">null</span>  <span style="color:#ccc">null</span>       3     Darth Vader<br>
</p></pre>
<br>
To produce the set of records unique to Table A and Table B, we perform the same full outer join, then <strong>exclude the records we don't want from both sides via a where clause</strong>.
</td>
<td valign="top">
<img alt="join-outer.png" height="329" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877702769970c-pi.png" width="502">
</td>
</tr>
</tbody>
</table>
<p>There's also a cartesian product or <strong>cross join</strong>, which as far as I can tell, can't be expressed as a Venn diagram:</p>
<pre>SELECT * FROM TableA
<b>CROSS JOIN</b> TableB
</pre>
<p>This joins "everything to everything", resulting in 4 x 4 = 16 rows, far more than we had in the original sets. If you do the math, you can see why this is a <em>very</em> dangerous join to run against large tables.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-10-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/</guid>
</item>
</channel>
</rss>
