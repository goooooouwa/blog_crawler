<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Quantity Always Trumps Quality</title>
<link>https://blog.codinghorror.com/quantity-always-trumps-quality/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://nathanbowers.com/">Nathan Bowers</a> pointed me to this <a href="http://www.kk.org/cooltools/archives/000216.php">five year old Cool Tools entry</a> on the book <a href="http://www.amazon.com/dp/0961454733/?tag=codihorr-20">Art &amp; Fear</a>.
</p>
<p>
<a href="http://www.amazon.com/dp/0961454733/?tag=codihorr-20"><img alt="Art &amp; Fear: Observations On the Perils (and Rewards) of Artmaking" border="0" class="at-xid-6a0120a85dcdae970b012877705604970c" height="497" src="https://blog.codinghorror.com/content/images/uploads/2008/08/6a0120a85dcdae970b012877705604970c-pi.png" width="341"></a>
</p>
<p>
Although I am not at all ready to call software development "art" -- perhaps "craft" would be more appropriate, or "engineering" if you're feeling generous -- the parallels between some of the advice offered here and my experience writing software are profound.
</p>
<p>
</p>
<blockquote>
The ceramics teacher announced on opening day that he was dividing the class into two groups. All those on the left side of the studio, he said, would be graded solely on the quantity of work they produced, all those on the right solely on its quality. His procedure was simple: on the final day of class he would bring in his bathroom scales and weigh the work of the "quantity" group: fifty pound of pots rated an "A", forty pounds a "B", and so on. Those being graded on "quality", however, needed to produce only one pot - albeit a perfect one - to get an "A".
<p>
Well, came grading time and a curious fact emerged: <b>the works of highest quality were all produced by the group being graded for quantity</b>. It seems that while the "quantity" group was busily churning out piles of work - and learning from their mistakes - the "quality" group had sat theorizing about perfection, and in the end had little more to show for their efforts than grandiose theories and a pile of dead clay.
</p>
</blockquote>
<p>
Where have I heard this before?
</p>
<p>
</p>
<ol>
<li>
<a href="http://www.codinghorror.com/blog/archives/000165.html">Stop theorizing</a>.
</li>
<li>
<a href="http://www.codinghorror.com/blog/archives/000684.html">Write lots of software</a>.
</li>
<li>
<a href="http://www.codinghorror.com/blog/archives/000300.html">Learn from your mistakes</a>.
</li>
</ol>
<p>
Quantity always trumps quality. That's why the one bit of advice I always give aspiring bloggers is to <a href="http://www.codinghorror.com/blog/archives/000983.html">pick a schedule and stick with it</a>. It's the only advice that matters, because until you've mentally committed to doing it over and over, you will not improve. You can't.
</p>
<p>
When it comes to software, the same rule applies. If you aren't building, you aren't learning. Rather than agonizing over whether you're building the right thing, <i>just build it</i>. And if that one doesn't work, <a href="http://www.codinghorror.com/blog/archives/000190.html">keep building</a> until you get one that does.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-08-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/quantity-always-trumps-quality/</guid>
</item>
</channel>
</rss>
