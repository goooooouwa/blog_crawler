<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Case For Case Insensitivity</title>
<link>https://blog.codinghorror.com/the-case-for-case-insensitivity/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One of the most pernicious problems with C-based languages is that <b>they're case-sensitive</b>. While this decision may have made sense in 1972 <a href="http://cm.bell-labs.com/cm/cs/who/dmr/chist.html">when the language was created</a>, one wonders why <a href="http://cm.bell-labs.com/cm/cs/cbook/">the sins of Kernighan and Ritchie</a> have been blindly perpetuated for the last thirty-three years.
</p>
<p>
I realize this is a religious issue. I'm not attempting to change anyone's mind. I'm merely voicing my discontent with the status quo. Thirty plus years later, does case sensitivity still make sense? Julian at OddThinking makes a compelling argument that it doesn't in <a href="http://www.somethinkodd.com/oddthinking/2005/10/27/the-case-for-case-preserving-case-insensitivity/">The Case for Case-Preserving, Case-Insensitivity</a>:
</p>
<p>
</p>
<blockquote>
Suppose I declare that "KEANU REEVES interferes with elephants.". Can I claim that I was not libelling the wooden Hollywood actor, purely because I spelt his name in all-caps? Can I claim to a judge that KEANU REEVES was a undeclared identifier and therefore the entire statement was semantically meaningless? Of course not. The English language is flexible enough to recognise that "KEANU" and "Keanu" are the same name. Even mail addressed to "KeAnU rEeVeS" will be delivered to the correct person.
<p>
If a computer can also disambiguate this accurately, it should do so too. If the software fails to adapt to the similarity of upper- and lower-case, it leads to frustration.
</p>
<p>
For me, an example of this frustration appears in both Python and PHP. Each of them have the same killer combination: they are case-sensitive with identifiers, but they are scripting language that do not resolve identifiers at parse-time. <b>I consistently fall for the same traps. A distressingly large percentage of my debugging time is spent correcting mistyped identifiers - often not detected until several minutes into a test run. The most common mistyping I make is incorrect capitalisation.</b> Of those, the two most common capitalisation errors I make are: HOlding DOwn THe SHift KEy TOo LOng, and being inconsistent in CamelCasing the term "fileName" (I never did resolve satisfactorily whether it was one word or two!)
</p>
</blockquote>
<p>
However you feel about case sensitivity, the bottom line has to be this: does it cost you productivity? The answer is undeniably yes, <a href="http://www.hanselman.com/blog/CommentView,guid,a393244f-bd14-49d3-b76e-ac94753e00d8.aspx">as Scott Hanselman notes</a>:
</p>
<p>
</p>
<blockquote>
I spend an hour today debugging a possible problem only to notice that "SignOn" != "Signon".
<p>
<b>If I had a nickel for every time Case-Sensitivity or Case-Insensitivity bit me, I'd have like seven or eight bucks. Seriously.</b>
</p>
<p>
Moral: Know if whatever you're working on cares about Case, and if it does, make a Post-It to remind you and stick it to your monitor.
</p>
</blockquote>
<p>
There's nothing we can do about existing tools and languages that are case sensitive, but we can make sure we don't perpetuate past mistakes. Unless you have extremely compelling reasons to make something case-sensitive, <b>case insensitivity is a much more human being friendly design choice.</b> Designing software that's easier for machines is questionable at best.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-12-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-case-for-case-insensitivity/</guid>
</item>
</channel>
</rss>
