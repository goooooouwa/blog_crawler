<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Death to the Space Infidels!</title>
<link>https://blog.codinghorror.com/death-to-the-space-infidels/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Ah, spring. What a wonderful time of year. A time when young programmers' minds turn to thoughts of ... <i><b>neverending last-man-standing filibuster arguments about code formatting</b></i>.
</p>
<p>
Naturally.
</p>
<p>
And there is no argument more evergreen than <a href="http://www.jwz.org/doc/tabs-vs-spaces.html">the timeless debate between tabs and spaces</a>.
</p>
<p>
</p>
<blockquote>
On defaultly-configured Unix systems, and on ancient dumb terminals and teletypes, the tradition has been for the TAB character to mean <i>move to the right until the current column is a multiple of 8.</i> This is also the default in the two most popular Unix editors, Emacs and vi.
<p>
In many Windows and Mac editors, the default interpretation is the same, except that multiples of 4 are used instead of multiples of 8.
</p>
<p>
A third interpretation is for the ASCII TAB character to mean <i>indent to the next tab stop</i>, where the tab stops are set arbitrarily: they might not necessarily be equally distanced from each other. Most word processors can do this; Emacs can do this. I don't think vi can do this, but I'm not sure.
</p>
<p>
With these three interpretations, the ASCII TAB character is essentially being used as a compression mechanism, to make sequences of SPACE-characters take up less room in the file.
</p>
</blockquote>
<p>
So, then, the question: should code* be indented with <b>spaces</b>..
</p>
<p>
<img alt="visual-studio-space-indent" border="0" class="at-xid-6a0120a85dcdae970b012877709a28970c" height="329" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b012877709a28970c-pi.png" width="301">
</p>
<p>
or with <b>tabs</b>?
</p>
<p>
<img alt="visual-studio-tabs-indent" border="0" class="at-xid-6a0120a85dcdae970b012877709a58970c" height="327" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b012877709a58970c-pi.png" width="304">
</p>
<p>
According to Cyrus, there's <a href="http://blogs.msdn.com/cyrusn/archive/2004/09/14/229474.aspx">a third option</a>: an unholy melding of <b>both tabs <i>and</i> spaces</b>. Apparently you can use tab for primary indentation alignment and then spaces on top of that for detail alignment. Like so:
</p>
<p>
<img alt="visual-studio-space-and-tab-indent.png" border="0" class="at-xid-6a0120a85dcdae970b012877709a74970c" height="155" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b012877709a74970c-pi.png" width="273">
</p>
<p>
This way, in theory at least, the level of indent can be adjusted dynamically without destroying alignment. But I'm more inclined to think of it as combining all the complexity and pitfalls of both approaches, myself.
</p>
<p>
OK, so maybe you're an enlightened coder. You've moved beyond mere earthbound issues like tabs vs. spaces on your personal path to code nirvana. Perhaps you have some kind of fancy auto-formatter that runs on every checkin. Or, maybe you're using a next-<i>next</i>-generation editor that treats code as "data" and the layout (including whitespace) as a "view", making all these concerns largely irrelevant.
</p>
<p>
But there's a deeper issue here to consider. <b>The only programming project with no disagreement whatsoever on code formatting is the one you work on alone</b>. Wherever there are two programmers working on the same project, there are invariably disagreements about how the code should be formatted. Sometimes serious disagreements. The more programmers you add, the more divisive those disagreements get. And handling those disagreements can be .. tricky. Take this email I received from Philip Leitch:
</p>
<p>
</p>
<blockquote>
The place where I work currently has a developer (who is also the head of the development department), who will "clean up" the code of others.
<p>
That is -- reformat it, normally without changing what the code does, just changing the variable names, function names, but mainly moving things around to the way they like it.
</p>
<p>
It is a little perplexing ÃƒÆ’Ã¢â‚¬â€œ and I'm interested to see what responses people have on this issue.
</p>
</blockquote>
<p>
One of absolute worst, <i>worst</i> methods of <a href="http://www.codinghorror.com/blog/archives/001205.html">teamicide</a> for software developers is to engage in these kinds of passive-aggressive formatting wars. I know because I've been there. They destroy peer relationships, and depending on the type of formatting, can also damage your ability to effectively compare revisions in source control, which is <i>really</i> scary. I can't even imagine how bad it would get if the lead was guilty of this behavior. That's leading by example, all right. <i>Bad</i> example.
</p>
<p>
The depressing thing about all this is that <b>code formatting matters more than you think</b>. Perhaps even enough to justify the endless religious wars that are fought over it. Consider the 1984 study by Soloway and Ehrlich cited in <a href="http://www.amazon.com/dp/0735619670/?tag=codihorr-20">Code Complete</a>:
</p>
<p>
</p>
<blockquote>
Our studies support the claim that knowledge of programming plans and rules
of programming discourse can have a significant impact on program comprehension. In their book called <a href="http://www.amazon.com/dp/0070342075/?tag=codihorr-20">The Elements of Programming Style</a>, Kernighan and Plauger also identify what we would call discourse rules. Our empirical results put teeth into these rules: <b>It is not merely a matter of aesthetics that programs should be written in a particular style</b>. Rather there is a psychological basis for writing programs in a conventional manner:  programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.
</blockquote>
<p>
There's actual data from honest-to-goodness experiments to support the hypothesis that consistent code formatting is <i>worth fighting for</i>. And there are dozens of studies backing it up, too, as Steve McConnell notes:
</p>
<p>
</p>
<blockquote>
In their classic paper <a href="http://www.sil.org/lingualinks/Literacy/ReferenceMaterials/BibliographyLiteracy/ChaseAndSimon1973.htm">Perception in Chess</a>, Chase and Simon reported on a study that compared the abilities of experts and novices to remember the positions of pieces in chess. When pieces were arranged on the board as they might be during a game, the experts' memories were far superior to the novices'. When the pieces were arranged randomly, there was little difference between the memories of the experts and the novices. The traditional interpretation of this result is that an expert's memory is not inherently better than a novice's but that the expert has a knowledge structure that helps him or her remember particular kinds of information. When new information corresponds to the knowledge structure -- in this case,
the sensible placement of chess pieces -- the expert can remember it easily. When new information doesn't correspond to a knowledge structure -- the chess pieces are randomly positioned -- the expert can't remember it any better than the novice.
<p>
A few years later, Ben Shneiderman duplicated Chase and Simon's results in the computer-programming arena and reported his results in a paper called <a href="http://www.springerlink.com/content/m852q12168q76224/">Exploratory Experiments in Programmer Behavior</a>. Shneiderman found that <b>when program statements were arranged in a sensible order, experts were able to remember them better than novices. When statements were shuffled, the experts' superiority was reduced.</b> Shneiderman's results have been confirmed in other studies. The basic concept has also been confirmed in the games Go and bridge and in electronics, music, and physics.
</p>
</blockquote>
<p>
So yes, absurd as it may sound, fighting over whitespace characters and other seemingly trivial issues of code layout is actually justified. Within reason of course -- when done openly, in a fair and concensus building way, and without stabbing your teammates in the face along the way.
</p>
<p>
Choose tabs, choose spaces, choose whatever layout conventions make sense to you and your team. It doesn't actually matter which coding styles you pick. What <i>does</i> matter is that you, and everyone else on your team, <b>sticks with those conventions and uses them consistently</b>.
</p>
<p>
That said, only a moron would use tabs to format their code.
</p>
<p>
* unless you happen to be programming in <a href="http://compsoc.dur.ac.uk/whitespace/">whitespace</a> or <a href="http://www.python.org/">Python</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-04-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/death-to-the-space-infidels/</guid>
</item>
</channel>
</rss>
