<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Programming 4 Fun</title>
<link>https://blog.codinghorror.com/programming-4-fun/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Looking for something fun to do on family night? How about a friendly game of <a href="http://www.c-jump.com/">c-jump, the programming board game</a>:
</p>
<p>
<img alt="c-jump, the boardgame" border="0" class="at-xid-6a0120a85dcdae970b0120a86d5f39970b" height="260" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d5f39970b-pi.jpg" width="625">
</p>
<p>
Although the prospect of a computer programming board game sounds positively stultifying, there is a rich history of <b>computer games based on programming</b>.
</p>
<p>
It's not a programming game per se, but we can't talk about educational games without mentioning MECC's seminal <a href="http://www.classicgaming.com/rotw/otrail.shtml">The Oregon Trail</a>, perhaps the <a href="http://ldt.stanford.edu/ldt1999/Students/kemery/esc/otMainFrame.htm">archetypal educational computer game</a>.
</p>
<p>
</p>
<blockquote><i>
The original Oregon Trail model was developed in 1971 by myself and two other college students when we were seniors at Carleton College in Minnesota. The three of us were completing our practice teaching in Minneapolis, and they (both math teachers) were using a computer system in their classes. I was teaching U.S. history and asked them the fateful question, "Can't we do something with the computer in my class?"
</i></blockquote>
<p>
Many people who grew up with Apple IIs in the classroom have <a href="http://preshrunk.info/2005/03/you-have-died-of-dysentery.php">fond memories</a> of this game. There's a great page where you can <a href="http://www.virtualapple.com/oregontraildisk.html">play the game in your browser</a> through an ActiveX emulator control (IE only, obviously). This version of the O.T. is a bit fancier than the all-text version I remember, though.
</p>
<p>
<img alt="MECC's The Oregon Trail screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86d5f4f970b" height="188" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d5f4f970b-pi.png" width="288">
</p>
<p>
There were other educational games on the Apple II that were a bit closer to <b>actual programming</b>. One of those is <a href="http://members.aol.com/Fractal101/odyssey.htm">Robot Odyssey</a>.
</p>
<p>
<img alt="Robot Odyssey, solution to puzzle 2" border="0" class="at-xid-6a0120a85dcdae970b0120a86d5f6e970b" height="194" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d5f6e970b-pi.gif" width="564">
</p>
<p>
Robot Odyssey was about <a href="http://weblog.scifihifi.com/2004/05/26/robot-odyssey/">programming robots to solve puzzles</a>. In order to do that, of course, you'd have to wire up the guts of the robot, and that meant learning about connecting inputs to outputs, and boolean logic (AND, XOR, etc). It had one of the best tutorial modes in any game I've ever played, which was critical for a game this complex. There's a modern update called <a href="http://mywebpages.comcast.net/tomfoote3/DQ/home.htm">DroidQuest</a> that you can play in the browser (Java required).
</p>
<p>
The predecessor to Robot Odyssey was <a href="http://ldt.stanford.edu/ldt1999/Students/kemery/esc/rockyDemoFrame.htm">Rocky's Boots</a>, which also involved programming robots to solve puzzles:
</p>
<p>
</p>
<blockquote>
<i>
Rocky's Boots is an electronic construction set. In the program, Rocky, a boot-wearing raccoon, teaches children to build animated logic machines. Users build arbitrary logic circuits and use them to program robots in the context of an adventure game. The object of this game is to score points by making a machine to kick object targets out of a trough. The machines are composed of circuit parts that direct the flow of electricity. They are built by moving the cursor around the screen, picking up parts and hooking them together. The object targets vary in shape and color and the player must connect logic gates in such a matter that only the objects of a desired shape or color are kicked when they pass through sensors.
</i><p>
<img alt="Rocky's Boots" border="0" class="at-xid-6a0120a85dcdae970b0120a86d5f84970b" height="191" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d5f84970b-pi.png" width="277">
</p>
</blockquote>
<p>
Rocky's Boots was written by <a href="http://www.warrenrobinett.com/rockysboots/">Warren Robinett</a>, who also wrote a number of Atari 2600 games including the influential <a href="http://www.warrenrobinett.com/adventure/index.html%0A">Adventure</a> and perhaps most tellingly, the <a href="http://www.atariage.com/software_page.html?SoftwareLabelID=15">BASIC programming cartridge</a> (which required the <a href="http://www.atariage.com/controller_page.html?SystemID=2600&amp;ControllerID=4">keypad controller</a>):
</p>
<p>
<img alt="atari_2600_basic_programming.jpg" border="0" class="at-xid-6a0120a85dcdae970b0120a86d5fa0970b" height="411" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d5fa0970b-pi.jpg" width="316">
</p>
<p>
There's a short <a href="http://www.dadgum.com/halcyon/BOOK/ROBINETT.HTM">interview with Warren</a> in the book <a href="http://www.dadgum.com/halcyon/BOOK/MISC/CONTENTS.HTM">Halcyon Days</a> that offers a bit of background on his Atari 2600 years.
</p>
<p>
The spiritual successor to both of these classic Apple II games is Cognitoy's 2001 PC title <a href="http://www.mindrover.com/">Mindrover</a>. It takes the same gameplay concepts and expands them brilliantly into glorious real-time OpenGL:
</p>
<p>
</p>
<blockquote>
<i>
MindRover is 'the Intelligent Robot Simulation' or perhaps you can call it <b>a 3D strategy/programming game</b>. This is a new genre that encompasses the depth of play found in strategy games with a new concept in player control. You get to program the intelligence of robotic vehicles.
</i><p>
You are a researcher on Europa, a moon of Jupiter. In your free time you re-program the rovers to race around the hallways, battle it out with mini lasers and rocket launchers, and find their way through mazes.
</p>
<p>
Once you have chosen a challenge, equip your vehicle (hovercraft, wheeled or treaded) with various sensors, movement components, and weapons. Then program the behavior of your vehicle in a graphical interface where you wire the components together and set their properties. Then let it go in the arena and watch how it does!
</p>
<p>
<img alt="mindrover screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86d5fb8970b" height="300" src="https://blog.codinghorror.com/content/images/uploads/2005/09/6a0120a85dcdae970b0120a86d5fb8970b-pi.jpg" width="400">
</p>
</blockquote>
<p>
Microsoft may have just launched their <a href="http://msdn.microsoft.com/coding4fun/">Coding4Fun</a> site a few months ago, but <b>the real programming fun started 20 years earlier</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-09-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/programming-4-fun/</guid>
</item>
</channel>
</rss>
