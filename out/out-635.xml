<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Software Development as a Collaborative Game</title>
<link>https://blog.codinghorror.com/software-development-as-a-collaborative-game/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Alistair Cockburn maintains that <a href="http://alistair.cockburn.us/index.php/Software_development_as_a_cooperative_game">software development is a cooperative game</a>:
</p>
<p>
</p>
<blockquote>
If software development was really a science, you could apply the scientific method to it. If it was really engineering, then you could apply known engineering techniques. If software development was a matter of producing models, then you could spend your money developing models.
<p>
However, it is none of those. <b>Software development is a "game", a game of speed and cooperation within your team, in competition against other teams.</b> It is a game against time, and a game for mind-share. You should spend your money to win that game.
</p>
<p>
Viewing software development as a game gives you better ideas on where to spend your money, how to structure your teams, and how they should allocate their efforts.
</p>
</blockquote>
<p>
It's a fascinating, thought-provoking article on the essential nature of software development. I can now see why <a href="http://www.dehora.net/journal/2007/03/cockburn_wins_jolt_award.html">Bill de hra calls Cockburn "the agile world's best kept secret."</a> I've only quoted the conclusion; I urge you read the complete article to get a full explanation of Cockburn's <a href="http://alistair.cockburn.us/index.php/Software_development_as_a_cooperative_game#---------------_4._Games">rationale behind the game analogy</a>.
</p>
<p>
</p>
<blockquote>
This game model of software development has stood me in good stead recently, as I evaluate military software projects and open-source software development. In some of the military software projects, what we see is predominance of the career and corporate-enhancing infinite games. It is quite clear that delivery of the software is a secondary concern, and growing the company, growing personal influence, or growing the career is what is many people's minds. The logic of the funny contractor behavior doesn't make sense until you realize they are playing a different game, in which different moves are called for. Then it suddenly all makes sense - even if you don't like it.
<p>
Open-source development is different because it is not a resource-limited game, nor is it finite and end-point directed. Linus Torvald did not say, "We'll make a shippable copy of Linux, and then we can all go home." No, Linus is around, and it will evolve. The game is interesting as long as it is interesting. Any number of players may show up, and they are not on a time-line. The game will abandoned as soon as it stops being interesting for the players. In that sense, it is much more like musicians playing together, or carpet-wrestling, or lego building. It is a cooperative game that is not directed toward "reaching the goal", and is not built around managing scant resources. And so the moves that make sense in open-source development naturally don't make the same sense for a standard resource-limited, goal-seeking software development project.
</p>
</blockquote>
<p>
The idea that games can inform real world design problems is not a new one; Damion Schubert's presentation <a href="http://www.zenofdesign.com/?p=500">What Vegas Can Teach MMO Designers</a> is full of similar insight. Casinos are the original MMORPG spaces, as outlined in <a href="http://www.zenofdesign.com/images/casinos.ppt">Damion's presentation</a> (ppt).
</p>
<p>
<a href="http://www.zenofdesign.com/images/casinos.ppt"><img alt="slide from What Vegas Can Teach MMO Designers" border="0" class="at-xid-6a0120a85dcdae970b0128777000d1970c" height="324" src="https://blog.codinghorror.com/content/images/uploads/2007/03/6a0120a85dcdae970b0128777000d1970c-pi.jpg" width="508"></a>
</p>
<p>
The concept of software development as a collaborative game appeals to me. It speaks to a deeper level of engagement in the process than "I get paid to do this." We play games because we derive some kind of essential satisfaction from playing them. You might even say it's fun-- either the <a href="http://www.codinghorror.com/blog/archives/000030.html">explicit kind</a>, or the <a href="http://www.codinghorror.com/blog/archives/000628.html">implicit kind</a>.
</p>
<p>
Fun may be more relevant than you think to your project. Raph Koster is a notable game designer and programmer who <a href="http://www.amazon.com/exec/obidos/ASIN/1932111972/codihorr-20">writes entire books on the theory of fun</a>.
</p>
<p>
<a href="http://www.theoryoffun.com/"><img alt="A Theory of Fun" border="0" class="at-xid-6a0120a85dcdae970b0128777000f0970c" height="390" src="https://blog.codinghorror.com/content/images/uploads/2007/03/6a0120a85dcdae970b0128777000f0970c-pi.jpg" width="500"></a>
</p>
<p>
Take a minute to read Raph's classic <a href="http://www.theoryoffun.com/theoryoffun.pdf">theory of fun</a> (pdf) presentation. What you'll eventually realize is that <b>designing for fun isn't just important for game developers. It's important for <i>all</i> software developers.</b>
</p>
<p>
Do users <a href="http://www.codinghorror.com/blog/archives/000773.html">want to use your application</a>, or are they <i>forced</i> to use it?
</p>
<p>
In a <a href="http://www.raphkoster.com/gaming/etech07.shtml">recent ETech07 presentation</a> (also available <a href="http://www.raphkoster.com/gaming/etech07/TheCoreOfFun.pdf">as a PDF</a>), Raph connects the dots more explicitly. He deconstructs amazon.com, ebay.com, and linkedin.com for what they really are: massively distributed <i>games</i>. You'll want to read the <a href="http://www.wonderlandblog.com/wonderland/2007/03/etech_07_raph_k.html">transcript of the talk</a> along with the sides to dig a little deeper into the concepts:
</p>
<p>
</p>
<blockquote>
As you accomplish more, there need to be variant challenges. Connecting to a CEO on LinkedIn vs. connecting to the pr dude = different. What you want is for the game to acknowledge the fact that it's tougher to get on Reed Hoffman's linkedin rather than someone who sells ads.
<p>
Social media is about cooperation, but the core of games is competitive. As soon as you give people a ladder to climb, they'll climb it. Ratings. Metrics of contribution. Other people need to see it to measure against it.
</p>
</blockquote>
<p>
Software development is a collaborative game that you play, willingly or not, with your team and your users. You might say the secret of the game, then, is <b>learning how to play the game so that everyone is having fun</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-03-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/software-development-as-a-collaborative-game/</guid>
</item>
</channel>
</rss>
