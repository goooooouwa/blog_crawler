<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>A Visit With Alan Kay</title>
<link>https://blog.codinghorror.com/a-visit-with-alan-kay/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://en.wikipedia.org/wiki/Alan_Kay">Alan Kay</a> is one of my computing heroes. All this stuff we do every day as programmers? Kay had a hand in inventing a huge swath of it:
</p>
<p>
</p>
<blockquote>
Computer scientist Kay was the leader of the group that invented object-oriented programming, the graphical user interface, 3D computer graphics, and ARPANET, the predecessor of the Internet
</blockquote>
<p>
So as you might imagine, I was pretty thrilled to see he was <a href="http://blog.stackoverflow.com/2009/01/welcome-our-newest-member-alan-kay/">dabbling a little in Stack Overflow</a>. It's difficult to fathom the participation of a legend like Alan in a site for regular programmers. Maybe we should add a <a href="http://en.wikipedia.org/wiki/Turing_Award">Turing Award</a> badge. At least people can't complain that it is unobtainable.
</p>
<p>
Jeff Moser, an avid Stack Overflow user with a an <a href="http://www.moserware.com/">outstanding blog</a> of his own, had the opportunity to meet Alan recently and ask him about it. Jeff gave me permission to reprint his field report here.
</p>
<p>
</p>
<blockquote>
Since I knew I'd be seeing Alan Kay at <a href="http://www.rebootingcomputing.org">Rebooting Computing</a>, I decided to verify his Stack Overflow usage in person. According to Alan, he found the original question using an automated search alert just like Atwood had guessed.
<p>
We then proceeded to discuss how it's sad that identity is still hard online. For example, it's hard to prove if I'm telling the truth here. As for that, the best I can offer is to look at my picture on <a href="http://www.moserware.com/">my blog</a> and compare with this picture from the Summit:
</p>
<p>
<a href="http://www.flickr.com/photos/cglusky/3195351350/in/set-72157612501297914"><img alt="moser-kay.jpg" border="0" class="at-xid-6a0120a85dcdae970b0128777081be970c" height="376" src="https://blog.codinghorror.com/content/images/uploads/2009/01/6a0120a85dcdae970b0128777081be970c-pi.jpg" width="411"></a>
</p>
<p>
(Alan is on my right)
</p>
<p>
Alan is a great person to talk to because of his huge experience in the computing field.
</p>
<p>
He's currently working at the <a href="http://vpri.org">Viewpoints Research Institute</a> where they're doing some classic PARC style research of trying to do for software what Moore's Law did for hardware. A decent explanation by Alan Kay himself is <a href="http://irbseminars.intel-research.net/AlanKay.wmv">available here</a> (wmv). For specifics, you might want to check out the recent <a href="http://www.vpri.org/pdf/tr2008003_experimenting.pdf">PhD thesis of Alessandro Warth</a>, one of Alan's students.
</p>
<p>
One of the greatest lessons I've personally learned from Alan is just how important computing history is in order to understand the context of inventions. One of Alan's greatest heroes is J.C.R. Licklider (a.k.a. "Lick"). Our discussions a few months ago led me to read "The Dream Machine" and <a href="http://www.moserware.com/2008/05/who-is-this-licklider-guy.html">write a post about it</a>.
</p>
<p>
A consequence of studying history well is that you'll notice that a ton of the really cool and interesting stuff was developed in the ARPA-&gt;<a href="http://en.wikipedia.org/wiki/Xerox_PARC">PARC</a> days and it's slowed down since. I'd assume that's why he's curious about anything post-PARC's peak days (e.g. 1980+).
</p>
<p>
I'd say that Alan firmly believes that the "Computer Revolution Hasn't Happened Yet" (still) even though he's been talking about it for decades.
</p>
<p>
For example:
</p>
<p>
</p>
<ul>
<li>see his <a href="http://video.google.com/videoplay?docid=-2950949730059754521">'97 talk at OOPSLA</a>.
</li>
<li>and this <a href="http://www.sri.com/engvideos/kay.html">video from last month</a> at the 40 Year Anniversary of Engelbart's <a href="http://www.codinghorror.com/blog/archives/001182.html">"Mother of all Demos"</a>.
</li>
</ul>
<p>
Speculating from discussions, I'd say that the problem he sees is that computers should help us become better thinkers rather than "distracting/entertaining ourselves to death." Alan likes to use the example that our "pop culture" is more concerned with "air guitar" and "Guitar Hero" rather than appreciating genuine beauty and expressiveness of real instruments (even though it takes a bit longer to master). Check out 1:03:40 of <a href="https://admin.adobe.acrobat.com/_a295153/p99875217/">this video from program for the Future</a>. In effect, we're selling our potential short.
</p>
<p>
I think that's my biggest take away from Alan about computing: computers can do so much more than we're using them for now (e.g. provide "a teacher for every learner").
</p>
<p>
Hope this helps provide some context.
</p>
</blockquote>
<p>
Indeed it does, Jeff. If you'd like to get a sense of what Alan is about and the things he's working on, I recommend this <a href="http://queue.acm.org/detail.cfm?id=1039523">Conversation with Alan Kay</a> from the ACM.
</p>
<p>
</p>
<blockquote>
It's not that people are completely stupid, but if there's a big idea and you have deadlines and you have expedience and you have competitors, very likely what you'll do is take a low-pass filter on that idea and implement one part of it and miss what has to be done next. This happens over and over again. If you're using early-binding languages as most people do, rather than late-binding languages, then you really start getting locked in to stuff that you've already done. You can't reformulate things that easily.
<p>
Let's say the adoption of programming languages has very often been somewhat accidental, and the emphasis has very often been on how easy it is to implement the programming language rather than on its actual merits and features. For instance, Basic would never have surfaced because there was always a language better than Basic for that purpose. That language was Joss, which predated Basic and was beautiful. But Basic happened to be on a GE timesharing system that was done by Dartmouth, and when GE decided to franchise that, <b>it started spreading Basic around just because it was there, not because it had any intrinsic merits whatsoever</b>.
</p>
<p>
This happens over and over again. The languages of Niklaus Wirth have spread wildly and widely because he has been one of the most conscientious documenters of languages and one of the earlier ones to do algorithmic languages using p-codes (pseudocodes) -- the same kinds of things that we use. The idea of using those things has a common origin in the hardware of a machine called the Burroughs B5000 from the early 1960s, which the establishment hated.
</p>
</blockquote>
<p>
Any similarity between the above and PHP is, I'm sure, <a href="http://www.codinghorror.com/blog/archives/001119.html">completely coincidental</a>. That sound you're hearing is just <a href="http://www.youtube.com/watch?v=sTUIHK7gHRE">a little bit of history repeating</a>.
</p>
<p>
To me, the quintessential Alan Kay presentation is <a href="http://video.google.com/googleplayer.swf?docId=-533537336174204822">Doing with Images Makes Symbols: Communicating With Computers</a>.
</p>
<p>
<object data="http://video.google.com/googleplayer.swf?docId=-533537336174204822" height="330" type="application/x-shockwave-flash" width="400"><param name="allowScriptAccess" value="never">
<param name="movie" value="http://video.google.com/googleplayer.swf?docId=-533537336174204822">
<param name="quality" value="best">
<param name="bgcolor" value="#ffffff">
<param name="scale" value="noScale">
<param name="wmode" value="window"></object>
</p>
<p>
As the video illustrates, computers are almost secondary to most of Alan's work; that's the true brilliance of it. The real goal is <a href="http://dailykibitz.blogspot.com/2008/08/alan-kay-on-research-into-learning-and.html">teaching and learning</a>. I'm reminded of a comment Andrew Stuart, a veteran software development recruiter, once sent me in email:
</p>
<p>
</p>
<blockquote>
One subtle but interesting observation that I would make - <a href="http://www.codinghorror.com/blog/archives/001054.html">your article</a> points out that <b>"what software developers do best is <i>learn</i>"</b> - this is close to the mark, though I would rearrange the words slightly to <b>"what the best software developers do is <i>learn</i>."</b> Not all software developers learn, but the best ones certainly do.
</blockquote>
<p>
And this, I think, lies at the heart of everything Alan does -- computing not as an end in itself, but as a vehicle for <a href="http://www.codinghorror.com/blog/archives/000895.html">learning how to learn</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-01-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-visit-with-alan-kay/</guid>
</item>
</channel>
</rss>
