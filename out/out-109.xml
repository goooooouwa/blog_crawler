<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Visualizing Code to Fail Faster</title>
<link>https://blog.codinghorror.com/visualizing-code-to-fail-faster/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.codinghorror.com/blog/2012/03/what-you-cant-see-you-cant-get.html">What You Can't See You Can't Get</a> I mentioned in passing how frustrated I was that the state of the art in code editors and IDE has advanced so little since 2003. A number of commenters pointed out the amazing <a href="http://worrydream.com/">Bret Victor</a> talk <a href="http://vimeo.com/36579366">Inventing on Principle</a>. I hadn't seen this, but thanks for mentioning it, because I definitely should have. Maybe you haven't seen it either?
</p>
<iframe src="https://player.vimeo.com/video/36579366" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p><a href="https://vimeo.com/36579366">Bret Victor - Inventing on Principle</a> from <a href="https://vimeo.com/cusec">CUSEC</a> on <a href="https://vimeo.com">Vimeo</a>.
</p>
<p>
It's a bit long at 54 minutes, but worth viewing in its entirety. What Bret shows here is indeed exactly the sort of thing we should be doing, but aren't.
</p>
<p>
In some ways we've actually regressed from my ancient Visual Basic 6.0 days, when you'd get dynamically notified about errors <i>as you typed</i>, not just <a href="http://www.codinghorror.com/blog/2007/05/c-and-the-compilation-tax.html">when you compiled</a> or <a href="http://www.codinghorror.com/blog/2006/07/i-pity-the-fool-who-doesnt-write-unit-tests.html">ran unit tests</a>. The idea that <b>you should be able to type (or gesture, or speak) and <i>immediately</i> see the result of that change</b> is simple, but extremely powerful. It's <a href="http://www.codinghorror.com/blog/2007/02/boyds-law-of-iteration.html">speed of iteration</a> in the small. That's essentially the basis for my argument that showing markup and rendered output side-by-side, and dynamically updating them as you type, is vastly superior for learning and experimentation compared to any attempt at WYSIWYG.
</p>
<p>
But Bret goes further than that â€“ <b>why not show the effects of predicted changes, and change over time?</b> Time is the missing element in a static display of code and rendered output; how do we show that?
</p>
<p>
<a href="http://vimeo.com/36579366"><img alt="Braid-jump-code" title="Braid-jump-code" src="https://blog.codinghorror.com/content/images/uploads/2012/03/6a0120a85dcdae970b016764677fde970b-800wi.jpg" width="720" height="256"></a>
</p>
<p>
Again, watch the video because it's easier to see in action than it is to explain. But maybe you'd like to play with it yourself? That's sort of the <i>point</i>, isn't it? As I <a href="http://www.codinghorror.com/blog/2007/01/dynamic-lightweight-visualization.html">wrote in 2007</a>:
</p>
<blockquote>
I yearn for the day when web pages are regularly illustrated with the kind of beautiful, dynamic visualizations that Ben Fry creates.
</blockquote>
<p>
That day, I'm happy to report, seems to have arrived. Bret's article, <a href="http://worrydream.com/LadderOfAbstraction/">Up and Down the Ladder of Abstraction</a> is <i>extremely</i> interactive in plain old boring HTML 5.
</p>
<p>
<a href="http://worrydream.com/LadderOfAbstraction/"><img alt="Interactive-ladder-abstraction" title="Interactive-ladder-abstraction" src="https://blog.codinghorror.com/content/images/uploads/2012/03/6a0120a85dcdae970b01676467a672970b-800wi.png" width="432" height="284"></a>
</p>
<p>
Yes, it's artsy, yes these are mostly toy projects, but this isn't entirely abstract art house visualization nonsense. Designing tools that let you make rapid changes, and see the <i>effects</i> of those changes as soon as possible <a href="http://uxmag.com/articles/you-are-solving-the-wrong-problem">can be transformative</a>.
</p>
<p>
</p>
<blockquote>
<p>
Paul realized that what we needed to be solved was not, in fact, human powered flight. That was a red-herring. The problem was the process itself, and along with it the blind pursuit of a goal without a deeper understanding how to tackle deeply difficult challenges. He came up with a new problem that he set out to solve: <b>how can you build a plane that could be rebuilt in hours not months</b>. And he did. He built a plane with Mylar, aluminum tubing, and wire.
</p>
<p>
The first airplane didn't work. It was too flimsy. But, because the problem he set out to solve was creating a plane he could fix in hours, he was able to quickly iterate. Sometimes he would fly three or four different planes in a single day. The rebuild, retest, relearn cycle went from months and years to hours and days.
</p>
<p>Eighteen years had passed since Henry Kremer opened his wallet for his vision. Nobody could turn that vision into an airplane. Paul MacCready got involved and changed the understanding of the problem to be solved. Half a year later later, MacCready's <a href="http://en.wikipedia.org/wiki/Gossamer_Condor">Gossamer Condor</a> flew 2,172 meters to win the prize. A bit over a year after that, the <a href="http://en.wikipedia.org/wiki/Gossamer_Albatross" target="_blank">Gossamer Albatross</a> flew across the channel.</p>
</blockquote>
<p>
Don't get me wrong, <a href="http://www.codinghorror.com/blog/2009/08/the-only-truly-failed-project.html">we're failing plenty fast with our existing tools</a>. But I can't shake the feeling that we could we fail even faster if we optimized our IDEs and code editors to better visualize the effects of our changes in real time as we make them.
</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] How are you showing off your awesome? Create a <a href="http://careers.stackoverflow.com/cv" rel="nofollow">Stack Overflow Careers profile</a> and show off all of your hard work from Stack Overflow, Github, and virtually every other coding site. Who knows, you might even get recruited for a great <a href="http://careers.stackoverflow.com/jobs" rel="nofollow">new position</a>!
</td></tr>
</table>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2012-03-29T15:13:23.000Z</pubDate>
<guid>https://blog.codinghorror.com/visualizing-code-to-fail-faster/</guid>
</item>
</channel>
</rss>
