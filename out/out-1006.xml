<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Software Apprenticeship</title>
<link>https://blog.codinghorror.com/software-apprenticeship/</link>
<content>
                <!--kg-card-begin: markdown--><p>In <a href="http://www.softwarebyrob.com/2005/11/15/software-training-sucks-roll-it-back/">Software Training Sucks: Why We Need to Roll it Back 1,000 Years</a>, Rob Walling makes a <strong>compelling argument for abandoning traditional training classes in favor of apprenticeships</strong>:</p>
<blockquote>
<p>[Why not] use the time-tested approach of trades that have been doing it for years? Let's take an electrical apprenticeship as an example: in the United States today, the International Brotherhood of Electrical Workers (I.B.E.W.) trains thousands of electricians every year. They learn through two distinct experiences:</p>
<ul>
<li>
<p>Attending night school during the week to learn the theory of electricity.</p>
</li>
<li>
<p>Working days on a construction site where they're able to gain experience applying the theory to the hands-on construction of a building</p>
</li>
</ul>
<p>His first day on the job an apprentice is paired up with a journeyman (an experienced electrician), who shows him the ropes. The journeyman typically talks the apprentice through a task, demonstrates the task, has the apprentice perform the task, then gives feedback. Listen, watch, do, review.</p>
<img src="https://blog.codinghorror.com/content/images/uploads/2005/11/6a0120a85dcdae970b0128776fca1b970c-pi.png" alt="Ye Olde Apprenticeship" width="343" height="377">
<p>With software it looks like this: the mentor evaluates the task at hand, be it writing data access code or building a web-based user interface, and holds a white-board discussion with the apprentice (listen). Next, the mentor might write sample code demonstrating a particularly difficult or confusing concept (watch). At this point the mentor sends the mentee off to gain their own experience writing code (do). And finally, the mentor should review the code, providing positive and negative feedback and suggesting improvements (review). Listen, watch, do, review.</p>
<p>[..] the key to any type of apprenticeship is the "do" step. Most software training gives you the listen and watch, but the "do and review" is what inspires growth and advances skills. The beauty of apprenticeship is that it tackles theory and experience in one fell swoop. And it's easier than you think.</p>
</blockquote>
<p>Instead of a <a href="http://blog.codinghorror.com/welcome-to-the-tribe/">loose confederation of tribes</a>, maybe we should be cultivating apprentice, journeyman, master relationships in software development.</p>
<p><strong>The mixture of theory by night and real world coding by day</strong> is particularly compelling. Maybe this is why I've seen so many talented interns turn into amazing developers â€“ they're working on real business code while getting the computer science courseware theory, too.</p>
<p>Being a good mentor isn't easy, though. I have difficulty mentoring developers who are too far apart from me in skill level. I'm too impatient. If you're putting football players together on a field to scrimmage, don't mix professional players with high school players. The skill disparity is too great for them to actually <em>play football together</em>. And how can they learn without playing the game? Now, if you throw some college football players in the mix, it's on!</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-11-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/software-apprenticeship/</guid>
</item>
</channel>
</rss>
