<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Incremental Feature Search in Applications</title>
<link>https://blog.codinghorror.com/incremental-feature-search-in-applications/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I'm a big fan of <a href="http://www.codinghorror.com/blog/archives/000432.html">incremental search</a>. But incremental search isn't just for navigating large text documents. <b>As applications get larger and more complicated, incremental search is also useful for navigating the sea of features that modern applications offer</b>.
</p>
<p>
Office 2007's design overhaul is arguably one of <a href="http://www.codinghorror.com/blog/archives/000724.html">the most significant innovations in GUI applications since the invention of menus and toolbars</a>:
</p>
<p>
</p>
<blockquote>
Of course, as you know if you've read <a href="http://blogs.msdn.com/jensenh/archive/2006/03/28/563007.aspx">Part 1 of the story</a>, many of today's UI paradigms attributed to Apple were introduced well before the Lisa or the Macintosh. Regardless of who gets credit for them, they're good paradigms. There's nothing wrong with menus and toolbars-based UI for certain applications. Truth be told, these paradigms served Office well for a number of releases.
<p>
It's not that menus and toolbars are bad or that the people who created them weren't smart. The problem is that Office has outgrown them. <b>There's a point beyond which menus and toolbars cease to scale well. A flat menu with 8 well-organized commands on it works just great; a three-level hierarchical menu containing 35 loosely-related commands can be a bit of a disaster.</b>
</p>
<p>
In short, we're not trying to destroy anything. Our goal is to create a new standard user interface for full-featured productivity applications. The original team who built Word or Excel couldn't have imagined how much their products would be able to do today. I want us to step back, to think through the question: "what kind of interface would they have built knowing how Word turned out?"
</p>
</blockquote>
<p>
It's absolutely true that <a href="http://www.codinghorror.com/blog/archives/000558.html">menus and toolbars don't scale</a>. The Office 2007 ribbon takes cues from web design to make navigating the thousands of features in Word, Excel, and Powerpoint much easier. But the ribbon, although it's a <i>major</i> improvement over menus and toolbars, isn't perfect, either:
</p>
<p>
</p>
<blockquote>
I was working with Excel all day yesterday, trying to find a command I know existed in Excel 2003 and can be found quite easily. I was clicking every tab and hovering over all the buttons. I must have gone through the Ribbon at least 5 times. In the end, the stupid command wasn't even in the ribbon to begin with. You had to manually add it to the "Quick Access Toolbar". If I had "Scout", I could have saved at least the frustration of not being able to find a tool that I know is there, not to mention the time and effort wasted.
</blockquote>
<p>
I know a <a href="http://blogs.vertigo.com/personal/swarren/Blog/default.aspx">star developer</a> who is expert at Word, and the same exact thing happened to her. <b>How do you find what isn't in the ribbon?</b> Well, you could use incremental search to find it. Microsoft has an experimental beta of <a href="http://www.istartedsomething.com/20070124/scout-office-2007/">an incremental ribbon search feature for Office 2007, codenamed "Scout"</a>:
</p>
<p>
<img alt="Office 2007 search feature codename 'scout'" border="0" class="at-xid-6a0120a85dcdae970b012877700c93970c" height="190" src="https://blog.codinghorror.com/content/images/uploads/2007/06/6a0120a85dcdae970b012877700c93970c-pi.jpg" width="710">
</p>
<p>
Unfortunately, it looks like <a href="http://www.istartedsomething.com/20070203/saving-scout/">internal politics at Microsoft may have killed the ribbon search add-in</a>, which is a shame. A search feature doesn't take anything away from the ribbon. They serve two different audiences, and complement each other perfectly. I'm with Long Zheng: <a href="http://www.istartedsomething.com/20070203/saving-scout/">the ribbon search feature should be shipped as a PowerToy</a>.
</p>
<p>
The first time I saw an application use an incremental feature searching technique was back in 2004. The <a href="http://www.codinghorror.com/blog/archives/000467.html">options dialog for Quest's Toad database utility</a> became so complex that it required a search function to find anything in it. At the time, I wasn't too keen on the idea of an options dialog that complicated, but I have since bowed to its inevitability. Applications get more feature-rich over time, and navigation methods have to evolve to keep up.
</p>
<p>
You probably already know that <a href="http://www.codinghorror.com/blog/archives/000766.html">Vista's revamped start menu</a> takes advantage of incremental searching. But other Microsoft applications are starting to adopt this paradigm as well. Take <a href="http://www.microsoft.com/expression/">Microsoft's new Expression design tools</a>, for example. In most development tools, you're facing down enormous lists of properties all the time. How do you find the particular property you're looking for? You guessed it: <b>incremental search</b>.
</p>
<p>
<img alt="Expression Blend property search filtering" border="0" class="at-xid-6a0120a85dcdae970b012877700cae970c" height="658" src="https://blog.codinghorror.com/content/images/uploads/2007/06/6a0120a85dcdae970b012877700cae970c-pi.png" width="851">
</p>
<p>
In the above screenshot, I'm filtering the properties for a Windows Presentation Foundation button by typing "ind" in the properties search field. Note how the interface dynamically filters, showing only button properties that match what I've typed as I type it. Isn't that much faster than scrolling through a list?
</p>
<p>
If the evolution of the web has taught us anything, it's that <a href="http://www.codinghorror.com/blog/archives/000595.html">search inevitably becomes the dominant navigation metaphor</a>. Simple applications may be able to get away with menus and toolbars, or better yet, a ribbon. But as the application grows larger and more complex, <b>it's faster to incrementally search for the feature we need</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-06-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/incremental-feature-search-in-applications/</guid>
</item>
</channel>
</rss>
