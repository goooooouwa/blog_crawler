<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Parsing: Beyond Regex</title>
<link>https://blog.codinghorror.com/parsing-beyond-regex/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I've blogged ad nauseam about <a href="http://www.codinghorror.com/blog/archives/000245.html">how much I love Regular Expressions</a>, but even the mighty regular expression has limits. As noted in <a href="http://weblogs.asp.net/cazzu/archive/2005/01/10/RegexParsing.aspx">Daniel Cazzulini's blog</a>:
</p>
<p>
</p>
<blockquote>
<i>
<b>A full-blown programming language cannot be parsed with regular expressions.</b> But given the limited number of programming languages (successful ones, let's say), how big do you think is the niche for getting proficient with those tools/techniques?
</i><p>
There is an inmensely bigger amount of common problems and small parsing needs that are very cost-effectively solved with regular expressions. For example, you don't need much more than that to parse XML, XPath, XPointer, DataBinder.Eval-like .NET expressions, templates, MSBuild property references, Postbuild commands, etc etc etc. So becoming proficient with regexes is much more important and relevant to solve day to day problems than mastering BNF, lex/yacc, or any other full-blown parsing tecniques/tools, IMO.
</p>
</blockquote>
<p>
Indeed, when colorizing code with simple(ish) regular expressions, you'll run into annoying edge conditions like this one:
</p>
<p>
</p>
<pre language="VB">
Dim s as String
s = "This is a string with ""quotes"""
</pre>
<p>
Or, let's say we wanted to parse out HTML tags with this naive regular expression:
</p>
<p>
</p>
<pre>
&lt;tag[^&gt;]*&gt;(.*?)&lt;/tag&gt;
</pre>
<p>
Seems solid enough, right? Well, there are problems. What about nested tags? What about a tag that contains improperly escaped characters, like this one (from a real blog, by the way):
</p>
<p>
</p>
<pre>
&lt;input type="submit" name="previewcomment" value="preview &gt;&gt;"&gt;
</pre>
<p>
While you can hack around these problems with more and more <a href="http://weblogs.asp.net/rosherove/archive/2003/05/13/6963.aspx">regular expression cleverness</a>, you eventually paint yourself into a corner with complexity. Regular expressions don't truly understand the code that they are colorizing-- <i>but parsers do</i>. Depending on the problem you're attacking, at some point you have to <b>bite the bullet and utilize a full-blown parser</b>.
</p>
<p>
Drazen Dotlic recently <a href="http://www.codeproject.com/aspnet/CSharpColorizer.asp">published a an interesting CodeProject article</a> discussing how to use the CoCo-R parser to parse and colorize C#:
</p>
<p>
</p>
<blockquote>
<i>
Why don't existing tools provide better formatting and color coding? <b>Because parsing is hard.</b> I thought I knew well most of the C# language constructs before I started working on the Colorizer. Boy, was I wrong! Throughout the course of this project, I have run into several constructs I have never seen before. I have also learned to appreciate more the work of the guys building the C# compiler. If it takes a team of people in Microsoft to properly deal with this issue, how could I have done it alone and in my spare time?
</i><p>
Sir Isaac Newton said "If I have seen farther than others, it is because I was standing on the shoulders of giants", and in this case, I was standing on the shoulders of <a href="http://www.ssw.uni-linz.ac.at/Research/Projects/Coco/">Coco-R</a>.
</p>
<p>
Coco-R is a compiler compiler (I guess that's where coco comes from). You have probably heard of tools like lex and YACC - Coco-R is a modern version of these tools. What's really great about it is that there are ports to several languages including C#. This is very convenient because additional processing you may want to do during parsing can be written in the same language tool itself is written in - C#.
</p>
</blockquote>
<p>
Drazen's article offers a HTTP handler and a web control that harness the CoCo-R parser to colorize and reformat code with a level of fidelity you'll never get from regular expressions. Good stuff.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-04-01T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/parsing-beyond-regex/</guid>
</item>
</channel>
</rss>
