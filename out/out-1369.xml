<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Sniff this!</title>
<link>https://blog.codinghorror.com/sniff-this/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I've occasionally used network sniffers in the past, but with the rise of REST, XML, SOAP  and .NET Remoting in the last year, sniffing has become an essential part of my development toolkit. I've evaluated a bunch of network sniffers, including the excellent open-source <a href="http://www.ethereal.com/">Ethereal</a>, but the one I keep coming back to is <a href="http://www.etherdetect.com">Etherdetect</a>:
</p>
<p>
<img alt="screenshot of EtherDetect application" class="at-xid-6a0120a85dcdae970b0120a85ddec7970b" height="618" src="https://blog.codinghorror.com/content/images/uploads/2004/08/6a0120a85dcdae970b0120a85ddec7970b-pi.gif" width="561">
</p>
<p>
Etherdetect isn't free, and it isn't perfect, but it offers the best blend of functionality and ease of use that I've found. Peeking behind the scenes at network traffic has solved some tough performance and debugging problems in our .NET apps. Highly recommended.
</p>
<p>
One tip: you typically can't sniff traffic going to localhost, at least not without some special workarounds; the loopback TCP/IP stack behaves very differently than the "normal" network paths. Also, you'll need <a href="http://winpcap.polito.it/install/default.htm">the latest WinPcap libraries</a> installed, particularly if you have a hyperthreading CPU.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-08-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/sniff-this/</guid>
</item>
</channel>
</rss>
