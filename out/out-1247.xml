<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>A Modest Namespace Proposal</title>
<link>https://blog.codinghorror.com/a-modest-namespace-proposal/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Jon Galloway recently pointed out <a href="http://weblogs.asp.net/jgalloway/archive/2005/01/06/347876.aspx">something that's been bothering me for a while</a>:
</p>
<blockquote><i>
I'm happy to see the huge growth of community contributed code - things like RSS.NET, sharpziplib, ftp classes to tide us over 'til .NET 2.0, etc. But one thing that bothers me is the namespaces. The .NET System namespaces are beautifully organized. Community / open source code namespaces are an anarchistic babel. Those that originate from a big company usually start with the company name, those that come from larger project usually take the the project's name. One-off code snips / hobbyist / micro-projects usually contain a random concatenation of some or all of the following words: monkey, alien, squishy, bug, fuzzy, code, util, works, MyNamespace, namespace, ware, example, contrib, and lib: monkeyCode, fuzzyAlienWare, utilLib, bugware, etc. This is the case I'm talking about.
</i></blockquote>
<p>
Instead of answering Jon's implied question, I think we should be asking ourselves if we need to do this at all. Rather than blindly slapping 20+ characters of namespace on the front of all your classes "just because", <b>I have a modest proposal for you: how about no namespace at all?</b>
</p>
<p>
Almost every time I see namespaces used, they're not functional. They don't solve any collision or duplication problems for me. They're little more than <b>vanity license plates for the author's code</b>.
</p>
<p>
For example. I built this class MhtBuilder. It lets you duplicate the "Save as single file" functionality in IE using 100% managed code. It's not going to cure cancer or anything, but it's useful, not that common, and worth sharing. So I <a href="http://www.codeproject.com/vb/net/MhtBuilder.asp">posted it on CodeProject</a>. Do I really need to call this class..
</p>
<ul>
<li>CodingBadass.MhtBuilder
</li>
<li>MonkeyAlienSquishyBugFuzzyCodeUtilWorks.MhtBuilder
</li>
<li>AtwoodHeavyIndustries.MhtBuilder
</li>
<li>MegaCorp.MhtBuilder
</li>
</ul>
C'mon. Let's stop kidding ourselves. What does this accomplish? How many MhtBuilder classes are out there that I need to distinguish between? If you're distributing <b>signed binaries with no source</b>, then you can arguably make a case that you need a namespace. Otherwise, stop with the veiled ego tripping, give your class a good descriptive name, and have the cojones to <a href="http://www.codinghorror.com/blog/archives/000111.html">leave it at that</a>.
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-modest-namespace-proposal/</guid>
</item>
</channel>
</rss>
