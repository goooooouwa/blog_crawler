<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Paying Down Your Technical Debt</title>
<link>https://blog.codinghorror.com/paying-down-your-technical-debt/</link>
<content>
                <!--kg-card-begin: markdown--><p>Every software project I've ever worked on has <a href="http://martinfowler.com/bliki/TechnicalDebt.html">accrued technical debt</a> over time:</p>
<blockquote>
<p>Technical Debt is a wonderful metaphor <a href="http://www.c2.com/cgi/wiki?TechnicalDebt">developed by Ward Cunningham</a> to help us think about this problem. In this metaphor, doing things the quick and dirty way sets us up with a technical debt, which is similar to a financial debt. Like a financial debt, the technical debt incurs interest payments, which come in the form of the extra effort that we have to do in future development because of the quick and dirty design choice. We can choose to continue paying the interest, or we can pay down the principal by refactoring the quick and dirty design into the better design. Although it costs to pay down the principal, we gain by reduced interest payments in the future.</p>
<p>The metaphor also explains why it may be sensible to do the quick and dirty approach. Just as a business incurs some debt to take advantage of a market opportunity developers may incur technical debt to hit an important deadline. The all too common problem is that development organizations let their debt get out of control and spend most of their future development effort paying crippling interest payments.</p>
</blockquote>
<p>No matter how talented and smart the software developers, all these tiny deferments begin to add up and cumulatively weigh on the project, dragging it down. My latest project is no different. After six solid months working on the Stack Overflow codebase, this is <i>exactly</i> where we are. We're digging in our heels and retrenching for a major refactoring of our database.  We have to <b>stop working on new features for a while and pay down some of our technical debt</b>.</p>
<img alt="credit cards" height="404" src="https://blog.codinghorror.com/content/images/uploads/2009/02/6a0120a85dcdae970b0128777074ad970c-pi.jpg" width="600">
<p>I believe that accruing technical debt is unavoidable on any real software project. Sure, you <a href="http://c2.com/cgi/wiki?RefactorAsYouGo">refactor as you go</a>, and incorporate improvements when you can â€“ but it's impossible to predict exactly how those key decisions you made early on in the project are going to play out. All you can do is roll with the punches, and budget some time into the schedule to <b>periodically pay down your technical debt.</b></p>
<p>The time you take out of the schedule to make technical debt payments typically doesn't result in anything the customers or users will see. This can sometimes be hard to justify. In fact, I had to defend our decision with Joel, my business partner. He'd prefer we work on some crazy thing he calls <i>revenue generation</i>, whatever that is.</p>
<p>Steve McConnell has a <a href="https://web.archive.org/web/20080119115611/http://blogs.construx.com/blogs/stevemcc/archive/2007/11/01/technical-debt-2.aspx">lengthy blog entry examining technical debt</a>. The perils of not ackowledging your debt are clear:</p>
<blockquote>
<p>One of the important implications of technical debt is that it must be <i>serviced</i>, i.e., once you incur a debt there will be interest charges. <b>If the debt grows large enough, eventually the company will spend more on servicing its debt than it invests in increasing the value of its other assets.</b> A common example is a legacy code base in which so much work goes into keeping a production system running (i.e., "servicing the debt") that there is little time left over to add new capabilities to the system. With financial debt, analysts talk about the "debt ratio," which is equal to total debt divided by total assets. Higher debt ratios are seen as more risky, which seems true for technical debt, too.</p>
</blockquote>
<p>Beyond what Steve describes here, I'd also argue that <b>accumulated technical debt becomes a major disincentive to work on a project.</b> It's a collection of small but annoying things that you have to deal with every time you sit down to write code. But it's exactly these small annoyances, this sand grinding away in the gears of your workday, that eventually causes you to stop enjoying the project. <a href="http://blog.codinghorror.com/revisiting-the-xml-angle-bracket-tax/">These small things matter</a>.</p>
<p>It can be scary to go in and <b>rebuild a lot of working code that has become crufty over time.</b> But <a href="http://en.wikipedia.org/wiki/Bene_Gesserit#Litany_against_fear">don't succumb to fear</a>.</p>
<blockquote>
<p><em>I must not fear.</em><br>
Fear is the mind-killer.<br>
Fear is the little-death that brings total obliteration.<br>
I will face my fear.<br>
I will permit it to pass over me and through me.<br>
And when it has gone past I will turn the inner eye to see its path.<br>
Where the fear has gone there will be nothing.<br>
Only I will remain.</p>
</blockquote>
<p>When it comes time to pay down your technical debt, <a href="http://blog.codinghorror.com/dont-be-afraid-to-break-stuff/">don't be afraid to break stuff</a>. It's liberating, even energizing to tear down code in order to build it up stronger and better than it was before. Be brave, and realize that paying your technical debt every so often is a normal, necessary part of the software development cycle to avert massive interest payments later. After all, <a href="http://blog.codinghorror.com/how-to-stop-sucking-and-be-awesome-instead/">who wants to live forever?</a></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-02-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/paying-down-your-technical-debt/</guid>
</item>
</channel>
</rss>
