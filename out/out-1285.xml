<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Magical Build Machine</title>
<link>https://blog.codinghorror.com/the-magical-build-machine/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Evidently Jerry Dennany is a member of <a href="http://weblogs.asp.net/jdennany/archive/2003/11/26/39938.aspx">the build machine cult</a>:
</p>
<blockquote>
<i>
One of the golden rules of modern software development is that one should build all software on a dedicated build machine.
</i><p>
A build machine should:
</p>
<ol>
<li>Be well documented.  This includes Version of the Operating System, Service Pack level, HotFixes installed, Tools installed, along with any special installation instructions.
</li>
<li>Be easily reproducible.  Anyone on your development team should be able to take the documentation, the build machine, and any required installation media, and recreate that build machine on demand.  If you can't, then you don't know what exactly is in your product.
</li>
<li>Not contain a single piece of software not related to the build.  For example, just because your project uses crystal reports does not mean that you need crystal reports on the build machine.
</li>
<li>Be in an area that is controlled in its access, if at all possible.  If this is not possible, then you should control who may log onto the computer.
</li>
<li> Be under change control.  No change to the build machine should take place unless that change is documented and approved.
</li>
</ol>
A few things not to do:
<ol>
<li>Never make the build computer a developer's workstation!
</li>
<li>Never do anything with the build computer except build that version of software.  I strongly suggest using a disk image tool such as Ghost to re-image after every build.  You don't get much more of a 'known state' than this.  This was actually very important in the VB6 / COM world.
</li>
</ol>
</blockquote>
While I am all for daily-- even <a href="http://www.codinghorror.com/blog/archives/000101.html">hourly</a>-- builds, I strongly disagree with the perpetuation of the <b>Magical Build Machine</b> concept. It's a bad idea.
<ul>
<li>
<b>The magical build machine reinforces the disconnect between developers and users-- "us" and "them".</b> It runs on my box! Every developer on the team should understand how to produce a reliable build from their own machine. A build that runs on the webserver. A build that runs on the end users'  PC. And if it doesn't run, they should know how to troubleshoot it. It is every developer's responsibility to write responsible code, code that doesn't cause a lot of deployment problems. If you isolate developers from this process, you do so at your own risk.
</li>
<li>
<b>If you use a magical build machine, you're implying that your project is so complicated to build that it takes special voodoo to get it to run.</b> Sacrifice a chicken, sprinkle salt over your shoulder, then re-image the build machine when the stars are perfectly aligned. That's the only way to get a "clean" build!  A project that is this difficult to build does not inspire confidence. It also smacks of voodoo programming or programming by coincidence. </li>
<li>
<b>Using a magical build machine perpetuates the idea that building and deployment is risky and incredibly sensitive to the exact client configuration.</b> Jerry correctly points out that deployment <i>was</i> a big deal in the bad old days of VB6 and COM-- aka "dll hell".  On a correctly architected .NET project, this absolutely should not be true! One of the major selling points for .NET is ease of deployment:
<ol>
<li>Is the .NET runtime installed?
</li>
<li>Xcopy files to a folder.
</li>
<li>Run your app!
</li>
</ol>
</li>
</ul>
<p>
There are absolutely valid reasons to have a <b>controlled build process</b>.  I'm not proposing that every developer build the project and deploy it at will. Use a build machine if it makes sense for your project, but be careful that you aren't injecting any accidental "magic" into your development process along the way.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-12-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-magical-build-machine/</guid>
</item>
</channel>
</rss>
