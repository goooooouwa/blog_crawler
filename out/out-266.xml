<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>You're Doing It Wrong</title>
<link>https://blog.codinghorror.com/youre-doing-it-wrong/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.codinghorror.com/blog/archives/001218.html">The Sad Tragedy of Micro-Optimization Theater</a> we discussed the performance considerations of building a fragment of HTML.
</p>
<p>
</p>
<pre>
string s =
@"&lt;div class=""action-time""&gt;{0}{1}&lt;/div&gt;
&lt;div class=""gravatar32""&gt;{2}&lt;/div&gt;
&lt;div class=""details""&gt;{3}&lt;br/&gt;{4}&lt;/div&gt;";
return String.<font color="red">Format</font>(s, st(), st(), st(), st());
</pre>
<p>
The second act of this particular theater was foreshadowed by <a href="http://www.workingwithrails.com/person/14560-stephen-touset">Stephen Touset's</a> comment:
</p>
<p>
</p>
<blockquote>
The correct answer is that <b>if you're concatenating HTML, you're doing it wrong in the first place. Use an HTML templating language.</b> The people maintaining your code after you will thank you (currently, you risk anything from open mockery to significant property damage).
</blockquote>
<p>
The performance characteristics of building small string fragments isn't just a red herring -- no, it's far, far worse. The <i>entire question is wrong</i>. This is one of my favorite <a href="http://www.codinghorror.com/blog/archives/000103.html">lessons from The Pragmatic Programmer</a>.
</p>
<p>
</p>
<blockquote>
When faced with an impossible problem, identify the real constraints. Ask yourself: "Does it have to be done this way? Does it have to be done at all?"
</blockquote>
<p>
If our ultimate conclusion was that performance is secondary to readability of code, that's exactly what we should have asked, before doing anything else.
</p>
<p>
Let's express the same code sample using the standard <a href="http://www.asp.net/mvc/">ASP.NET MVC</a> templating engine. And yes, we render stuff like this all over the place in Stack Overflow. It's the default method of rendering for a reason.
</p>
<p>
</p>
<pre>
&lt;div class="action-time"&gt;&lt;%= User.ActionTime %&gt;&lt;/div&gt;
&lt;div class="gravatar32"&gt;&lt;%= User.Gravatar %&gt;&lt;/div&gt;
&lt;div class="details"&gt;&lt;%= User.Details %&gt;&lt;br/&gt;&lt;%= User.Stuff %&gt;&lt;/div&gt;
</pre>
<p>
We have a HTML file, through which we poke some holes and insert the data. Simple enough, and conceptually similar to the <code>String.Replace</code> version. Templating works reasonably well in the trivial cases when you have an object with obvious, basic data types in fields that you spit out.
</p>
<p>
But beyond those simple cases, it's shocking how hairy HTML templating gets. What if you need do to a bit of formatting or processing to get that data into shape before displaying it? What if you need to make decisions and display things differently depending on the contents of those fields? Your once-simple page templates get progressively more and more complex.
</p>
<p>
</p>
<pre>
&lt;%foreach (var User in Users) { %&gt;
&lt;div class="action-time"&gt;&lt;%= ActionSpan(User)%&gt;&lt;/div&gt;
&lt;% if (User.IsAnonymous) { %&gt;
&lt;div class="gravatar32"&gt;&lt;%= RenderGravatar(User)%&gt;&lt;/div&gt;
&lt;div class="details"&gt;&lt;%= RepSpan(User)%&gt;&lt;br/&gt;&lt;%= Flair(User)%&gt;&lt;/div&gt;
&lt;% } else { %&gt;
&lt;div class="anon"&gt;anonymous&lt;/div&gt;
&lt;% } %&gt;
&lt;% } %&gt;
</pre>
<p>
This is a fairly mild case, but you can see where templating naturally tends toward a frantic, unreadable mish-mash of code and template -- <a href="http://www.codinghorror.com/blog/archives/001155.html">Web Development as Tag Soup</a>. If your HTML templates can't be kept simple, they're not a heck of a lot better than the procedural string building code they're replacing. And this is not an easy thing to stay on top of, in my experience. The daily grind of struggling to keep the templates from devolving into tag soup starts to feel every bit as grotty as all that nasty string work we were theoretically replacing.
</p>
<p>
Now it's my turn to ask -- <i>why?</i>
</p>
<p>
I think existing templating solutions are going about this completely backwards. <b>Rather than poking holes in HTML to insert code, we should simply treat HTML <i>as</i> code.</b>
</p>
<p>
Like so:
</p>
<p>
</p>
<pre>
foreach (var User in Users)
{
&lt;div class="action-time"&gt;[ActionSpan(User)]&lt;/div&gt;
if (User.IsAnonymous)
{
&lt;div class="gravatar32"&gt;[RenderGravatar(User)]&lt;/div&gt;
&lt;div class="details"&gt;[UserRepSpan(User)]&lt;br/&gt;[UserFlairSpan(User)]&lt;/div&gt;
}
else
{
&lt;div class="anon"&gt;anonymous&lt;/div&gt;
}
}</pre>
<p>
Seamlessly mixing code and HTML, using a minumum of those headache-inducing escape characters. Is this a programming language for <a href="http://www.codinghorror.com/blog/archives/000821.html">a race of futuristic supermen?</a> No. There are languages that can do this right now, today -- where you can <b>stick HTML in the middle of your code</b>. It's already possible <a href="http://blogs.msdn.com/dmitryr/archive/2008/12/29/asp-net-mvc-view-engine-using-vb-net-xml-literals.aspx">using Visual Basic XML Literals</a>, for example.
</p>
<p>
<img alt="Visual Basic XML Literals used in an ASP.NET MVC view" border="0" class="at-xid-6a0120a85dcdae970b0120a86e1869970b" height="191" src="https://blog.codinghorror.com/content/images/uploads/2009/02/6a0120a85dcdae970b0120a86e1869970b-pi.png" width="620">
</p>
<p>
Even the <a href="http://www.reddit.com/r/programming/comments/7rc5v/x_xml_oriented_programming_language_i_cant/c076grx">hilariously maligned X#</a> has the right core idea. Templating tends to break down because <b>it forces you to treat code and markup as two different and fundamentally incompatible things.</b> We spend all our time awkwardly switching between markup-land and code-land using escape sequences. They're always fighting each other -- and us.
</p>
<p>
Seeing HTML and code get equal treatment in my IDE makes me realize one thing:
</p>
<p>
We've <i>all</i> been doing it wrong.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-02-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/youre-doing-it-wrong/</guid>
</item>
</channel>
</rss>
