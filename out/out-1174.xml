<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Good Test / Bad Test</title>
<link>https://blog.codinghorror.com/good-test-bad-test/</link>
<content>
                <!--kg-card-begin: markdown--><p>
After years of building ad-hoc test harnesses, I finally adopted formal unit testing on a recent project of mine using <a href="http://www.nunit.org/">NUnit</a> and <a href="http://www.mailframe.net/Products/TestRunner/">TestRunner</a>. It was gratifyingly simple to get my first unit tests up and running:
</p>
<p>
</p>
<pre language="vb.net">
&lt;TestFixture()&gt; _
Public Class UnitTests
Private _TargetString As String
Private _TargetData As Encryption.Data
&lt;TestFixtureSetUp()&gt; _
Public Sub Setup()
_TargetString = "an enigma wrapped in a mystery slathered in secret sauce"
_TargetData = New Encryption.Data(_TargetString)
End Sub
&lt;Test(), Category("Symmetric")&gt; _
Public Sub MyTest()
Dim s As New Encryption.Symmetric(Encryption.Symmetric.Providers.DES)
Dim encryptedData As Encryption.Data
Dim decryptedData As Encryption.Data
encryptedData = s.Encrypt(_TargetData)
decryptedData = s.Decrypt(encryptedData)
Assert.AreEqual(_TargetString, decryptedData.ToString)
End Sub
End Class
</pre>
<p>
It's a great system because I can tell what it does and how it works just by looking at it. You can't knock simplicity. The problem with unit testing, then, is not the implementation. It's determining what to test. And how to test it. Or, more philosophically, <b>what makes a good test?</b>
</p>
<p>
You'll get no argument from me on the fundamental value of unit testing. Even the most trivially basic unit test, as shown in the code sample above, is a huge step up from the testing most developers perform-- which is to say, <b>most developers don't test at all!</b> They key in a few values at random and click a few buttons. If they don't get any unhandled exceptions, that code is ready for QA!
</p>
<p>
The real value of unit testing is that <b>it forces you to stop and think about testing</b>. Instead of a willy-nilly ad-hoc process, it becomes a series of hard, unavoidable questions about the code you've just written:
</p>
<ul>
<li>How do I test this?
</li>
<li>What kinds of tests should I run?
</li>
<li>What is the common, expected case?
</li>
<li>What are some possible unusual cases?
</li>
<li>How many external dependencies do I have?
</li>
<li>What system failures could I reasonably encounter here?
</li>
</ul>
<p>
Unit tests don't guarantee correct functioning of a program. I think it's unreasonable to expect them to. But writing unit tests <i>does</i> guarantee that the developer has considered, however briefly, these truly difficult testing questions. And that's clearly a step in the right direction.
</p>
<p>
One of the other things that struck me about unit testing was the challenge of balancing unit testing with the massive refactoring all of my projects tend to go through in their early stages of development. And, <a href="http://www.twelve71.org/blogs/andy/000694.html">as Unicode Andy points out</a>, I'm not the only developer with this concern:
</p>
<p>
</p>
<blockquote><i>
My main problem at the moment with unit tests is when I change a design I get a stack of failing tests. This means <b>I'm either going to write less tests or make fewer big design changes</b>. Both of which are bad things.
</i></blockquote>
<p>
To avoid this problem, I'm tempted to take the old-school position that tests should be coded later rather than sooner, which runs counter to the hippest theories of <a href="http://www.xprogramming.com/xpmag/testFirstGuidelines.htm">test-first development</a>. How do you balance the need to write unit tests with the need to aggressively refactor your code? Does test-first reduce the refactoring burden, or do you add unit tests after your design has solidified?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-04-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/good-test-bad-test/</guid>
</item>
</channel>
</rss>
