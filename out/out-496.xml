<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Are Features The Enemy?</title>
<link>https://blog.codinghorror.com/are-features-the-enemy/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Mark Minasi is <a href="http://www.imdb.com/title/tt0074958/quotes">mad as hell</a>, and he's not going to take it any more. In his online book <a href="http://www.softwareconspiracy.com/">The Software Conspiracy</a>, he
examines in great detail the paradox I struggled with yesterday-- new features are used to
<i>sell</i> software, but they're also the primary reason that software
<a href="http://www.codinghorror.com/blog/archives/000973.html">spoils over time</a>.</p>
<blockquote>
If a computer magazine publishes a roundup of word processors, the central piece of that article will be the "feature matrix," a table showing what word processing programs have which features. With just a glance, the reader can quickly see which word processors have the richest sets of features, and which have the least features. You can see an imaginary example in the following table:
<table cellpadding="4" cellspacing="4" width="600">
<tr>
<td></td>
<td><b>MyWord 2.1</b></td>
<td><b>BugWord 2.0</b></td>
<td><b>SmartWords 3.0</b></td>
</tr>
<tr>
<td>Can boldface text</td>
<td style="text-align: center">X</td>
<td style="text-align: center">X</td>
<td> </td>
</tr>
<tr>
<td>Runs on the Atari 520</td>
<td> </td>
<td style="text-align: center">X</td>
<td> </td>
</tr>
<tr>
<td>Automatically indents first line of a paragraph</td>
<td style="text-align: center">X</td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>Includes game for practicing touch typing</td>
<td> </td>
<td style="text-align: center">X</td>
<td style="text-align: center">X</td>
</tr>
<tr>
<td>Lets you design your own characters</td>
<td> </td>
<td style="text-align: center">X</td>
<td style="text-align: center">X</td>
</tr>
<tr>
<td>Generates document tables of contents</td>
<td style="text-align: center">X</td>
<td> </td>
<td>
 </td>
</tr>
<tr>
<td>Can do rotating 3D bullet points in color</td>
<td> </td>
<td style="text-align: center">X</td>
<td style="text-align: center">X</td>
</tr>
<tr>
<td>Can do bulleted lists</td>
<td style="text-align: center">X</td>
<td> </td>
<td>
 </td>
</tr>
<tr>
<td>Supports Cyrillic symbol set</td>
<td> </td>
<td style="text-align: center">X</td>
<td>
 </td>
</tr>
<tr>
<td>Includes Malaysian translater</td>
<td> </td>
<td style="text-align: center">X</td>
<td style="text-align: center">X</td>
</tr>
</table>
<p>
It looks like BugWord 2.0 is the clear value -- there are lots more check boxes in its column. However, a closer look reveals that it lacks some very basic and useful word processing features, which MyWord 2.1 has. But the easy-to-interpret visual nature of a feature matrix seems to mean that the magazine's message is: <b>Features are good, and the more the better.</b> As Internet Week senior executive editor Wayne Rash, a veteran of the computer press, says, "Look at something like PC Magazine, you'll see this huge comparison chart. Every conceivable feature any product could ever do shows up, and if a package has that particular feature, then there's a little black dot next to that product. What companies want is to have all the little black dots filled in because it makes their software look better."
</p>
</blockquote>
<p>Mark maintains that software companies give bugs in their existing software a low priority, while developing new features for the next
version is considered critically important. As a result, quality suffers. He trots out this Bill Gates quote as a prime
example:</p>
<blockquote>
There are no significant bugs in our released software that any significant
number of users want fixed... <b>The reason we come up with new versions is not
to fix bugs</b>. It's absolutely not. It's the stupidest reason to buy a new
version I ever heard... And so, in no sense, is stability a reason to move to a
new version. It's never a reason.</blockquote>
<p>It's hard to argue with the logic. Customers will pay for new features. But
customers will never pay companies to fix bugs in their software. Unscrupulous
software companies can exploit this by fixing bugs in the next version, which just so
happens to be jam packed full of exciting new features that will induce
customers to upgrade. </p>
<p>
Unlike Mark, I'm not so worried about bugs. All software has bugs, and if you accrue enough of them, your users will eventually revolt. Yes, the financial incentives for fixing bugs are weak, but the market seems to work properly when faced with buggy software.
</p>
<p>
A much deeper concern, for me, is <b>the subtle, creeping feature-itis that destroys my favorite software</b>. It's the worst kind of affliction-- a degenerative disease that sets in over time. As I've regrettably discovered in many, many years of using software, adding more features rarely results in better software. The commercial software market, insofar as it forces vendors to engage in bullet point product feature one-upsmanship, could be actively harming the very users it is trying to satisfy.
</p>
<p>
And the worst part, the absolute worst part, is that <i>customers are complicit in the disease</i>, too. Customers ask for those new features.  And customers will use the dreaded "feature matrix" as a basis for comparing what applications they'll buy. Little do they know that they're slowly killing the very software that they love.
</p>
<p>
Today, as I was starting up WinAmp, I was blasted by this upgrade dialog.
</p>
<img alt="WinAmp update dialog" border="0" class="at-xid-6a0120a85dcdae970b0120a86da5aa970b" height="229" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b0120a86da5aa970b-pi.png" width="336">
<p>
Do I care about any of these new features? No, not really. Album art sounds interesting, but the rest are completely useless to me. I don't have to upgrade, of course, and there's nothing forcing me to upgrade. Yet. My concern here isn't for myself, however. It's for WinAmp. For every new all-singing, all-dancing feature, WinAmp becomes progressively slower, even larger, and more complicated. Add enough well-intentioned "features", and eventually WinAmp will destroy itself.
</p>
<p>
<b>Sometimes, I wonder if the current commercial software model is doomed.</b> The neverending feature treadmill it puts us on almost always results in extinction. Either the application eventually becomes so bloated and ineffective that smaller, nimbler competitors replace it, or the application slowly implodes under its own weight. In either case, nothing is truly fixed; the cycle starts anew. Something always has to give in the current model. Precious few commercial software packages are still around after 10 years, and most of the ones that are feel like dinosaurs.
</p>
<p>
Perhaps we should <b>stop blindly measuring software as a bundle of features</b>, as some kind of endless, digital all-you-can eat buffet. Instead, we could measure software by <i>results</i>-- how productive or effective it makes us at whatever task we're doing. Of course, measuring productivity and results is hard, whereas counting bullets on a giant feature matrix is brainlessly easy. Maybe that's exactly the kind of cop-out that got us where we are today.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-10-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-features-the-enemy/</guid>
</item>
</channel>
</rss>
