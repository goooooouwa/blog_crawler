<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Don't Be Afraid to Break Stuff</title>
<link>https://blog.codinghorror.com/dont-be-afraid-to-break-stuff/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One warning sign I look for when working with other developers is <b>fear of breaking the code</b>. The absolute worst systems I've worked on are the ones where the developers practically tiptoe around the source code.
</p>
<p>
The main problem with fear of breaking the code is <b>the implicit assumption that any code is really that good to begin with</b>. All the code we write is broken. Your code. <a href="http://www.codinghorror.com/blog/archives/000099.html">My code</a>. Everyone's code. Software development isn't a science; it's a process of continual refinement.
</p>
<p>
Now, I'm not proposing that every developer start ripping through a stable, production codebase and start rewriting it as an exercise. There's certainly a learning curve that comes with any new codebase, and appropriate testing should always be performed. However, <b>I firmly believe that the absolute best way to learn a system is to break it.</b> Over and over. Start by breaking off a small piece. What happens when you turn that off? What are the consequences of deleting this variable? Does that function need to be here? If you can't break that codebase, and then piece it back together again-- in every way you can think of-- then you're going to be absolutely screwed when another developer breaks something. Or, even worse, a user breaks something. And they will, in ways you haven't even considered.
</p>
<p>
Once you've broken enough stuff, a new codebase stops being scary, and starts being.. sorta fun. Those <a href="http://www.artima.com/intv/fixit.html">broken windows</a> will seem a lot less like intimidating roadblocks, and more like candidates for fixing-- or at least boarding over. And while you're at it, why not <a href="http://c2.com/cgi/wiki?RefactorMercilessly">remodel the place</a>, too? When it comes to software, <b>controlled destruction breeds confidence.</b>
</p>
<p>
The most direct way to improve as a software developer is to be absolutely fearless when it comes to changing your code. Developers who are afraid of broken code are developers who will never mature into professionals.
</p>
<p>
So, go ahead. Break stuff!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-11-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dont-be-afraid-to-break-stuff/</guid>
</item>
</channel>
</rss>
