<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Non-Maximizing Maximize Button</title>
<link>https://blog.codinghorror.com/the-non-maximizing-maximize-button/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One of my great frustrations with the Mac is the way the maximize button on each window <a href="http://www.xvsxp.com/interface/max_vs_zoom.php">fails to maximize the window</a>. In a comment, <a href="http://www.foolsmate.net/blog/index.php">Alex Chamberlain</a> explained why this isn't broken, it's by design:
</p>
<p>
<a href="http://www.foolsmate.net/blog/index.php"></a>
</p>
<blockquote>
This is a textbook example of how Microsoft's programmers got the original Mac GUI wrong when they copied it for Win 3.1, and never bothered to fix it: there's no zoom button on Mac OS windows because it's unnecessary. What you're mistaking for a "maximize" button is actually a "snap window to size of contents" button. Far more useful and elegant. Once again, Microsoft has no taste and no clue when it comes to the GUI. All that money and Gates has never been able to hire a decent human factors person.
</blockquote>
<p>
In other words, pressing the maximize button shouldn't maximize the window to <b>the size of your monitor</b> ...
</p>
<p>
<a href="http://www.suck.com"><img alt="Suck.com, in a browser window maximized to the monitor" border="0" class="at-xid-6a0120a85dcdae970b012877700fae970c" height="518" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b012877700fae970c-pi.jpg" width="700"></a>
</p>
<p>
... according to Apple, pressing the maximize button should maximize the window to <b>the size of the content</b>.
</p>
<p>
<a href="http://www.suck.com"><img alt="Suck.com, in a browser window maximized to the content" border="0" class="at-xid-6a0120a85dcdae970b012877700fc7970c" height="513" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b012877700fc7970c-pi.jpg" width="700"></a>
</p>
<p>
This is oddly reminiscent of the <a href="http://www.codinghorror.com/blog/archives/000885.html">recent font smoothing debate</a>, where Apple sided with the designers, and Microsoft sided with the realities of current hardware. Neither approach is <i>wrong</i>, per se; it depends what you want to emphasize and which tradeoff you think is more important.
</p>
<p>
I think the maximization problem is <b>even more ambiguous than font rendering</b>. With font rendering, the answers are based on objective mathematics: at low DPI you should favor the pixel grid and thus the user; at higher DPI you have enough pixels to favor the designer and render the font more accurately. And it's not an either-or distinction; the operating system could choose the font rendering strategy opportunistically depending on the capabilities of the display.
</p>
<p>
Unfortunately, there is no optimal window maximizing strategy. As you can see in the above screenshot, we end up with a vast expanse of unwanted whitespace when <a href="http://www.suck.com/">suck.com</a> is maximized to a 1600x1200 monitor. <a href="http://www.codinghorror.com/blog/archives/000618.html">Excessively long lines are hard to read</a>, which is why most newspapers are formatted into columns. It's also why websites with any design chops at all <i>never</i> let text extend the full width of the browser.
</p>
<p>
<a href="http://www.nytimes.com/"><img alt="New York Times online, columnar layout" border="0" class="at-xid-6a0120a85dcdae970b012877700fe0970c" height="251" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b012877700fe0970c-pi.png" width="703"></a>
</p>
<p>
I agree <i>in principle</i> that windows shouldn't be larger than their maximum usable size. But I also think <b>windows with a fixed layout shouldn't be resizable in the first place</b>. This is the subject of an entire sidebar in Neilsen's latest book, <a href="http://www.amazon.com/exec/obidos/ASIN/0321350316/codihorr-20">Prioritizing Web Usability</a>.
</p>
<p>
</p>
<blockquote>
While the Maximize button tempts many users, they are often poorly served by it. For example, a 1024-pixel-wide window will result in overly long lines for text-heavy applications such as web browsing. The preponderance of maximized windows also makes it difficult for users to understand the multiwindow nature of modern GUIs. In theory people are supposed to work with overlapping windows but in practice they can't when windows take up the entire screen. Maximized windows deceive people into thinking of the computer as a full-screen environment rather than one with multiple, simultaneously active areas.
<p>
Fortunately, maximized windows will gradually vanish as people get bigger monitors. With a 2048-pixel-wide screen, a maximized window is so grotesquely oversized that most users will resize it and work with two or more windows at a time. Tiled windows may also enjoy a renaissance with huge screens, making it easy to deal with two to four windows simultaneously.
</p>
</blockquote>
<p>
Here's where I think this argument starts to break down in a big way. <b>Dealing with multiple windows is far too difficult, even for sophisticated computer users</b>. Adding Z-order in addition to the traditional X and Y positioning is <a href="http://www.codinghorror.com/blog/archives/000548.html">one variable too many</a>. I don't think it's a coincidence that single window interfaces, such as the web browser, or Tivo, dominate the market. Microsoft <a href="http://www.codinghorror.com/blog/archives/000262.html">killed off the multiple document interface in Office</a>-- a form of per-application windowing-- years ago. Can you name one application with a multiple window interface that's even <i>popular?</i>
</p>
<p>
<img alt="Desktop with overlapping windows" border="0" class="at-xid-6a0120a85dcdae970b012877700ff5970c" height="600" src="https://blog.codinghorror.com/content/images/uploads/2007/07/6a0120a85dcdae970b012877700ff5970c-pi.png" width="800">
</p>
<p>
Manipulating windows is pure excise-- extra work that stands between the user and completing their task. The more windows you have to deal with, the less work you get done, and the more time you spend sizing them, moving them, bringing them to the top, and dragging them around so they aren't overlapping. That's one reason I'm such a fan of <a href="http://www.codinghorror.com/blog/archives/000012.html">double</a> and <a href="http://www.codinghorror.com/blog/archives/000740.html">triple monitor</a> setups; more desktop space equals fewer overlapping windows, and less time spent futzing around with window layout.
</p>
<p>
That's my problem with Apple's non-maximizing maximize button. Allowing users to maximize any window to a monitor has its problems, to be sure. But <b>Apple's method of <i>forcing</i> users to deal with more windows by preventing maximization is not good user interface design</b>. It is fundamentally and deeply flawed. Users don't want to deal with the mental overhead of juggling multiple windows, and I can't blame them: neither do I. Designers should be coming up with alternative user interfaces that <i>minimize</i> windowing, instead of forcing enforcing arbitrary window size limits on the user for their own good.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-07-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-non-maximizing-maximize-button/</guid>
</item>
</channel>
</rss>
