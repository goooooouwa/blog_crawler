<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Removing The Login Barrier</title>
<link>https://blog.codinghorror.com/removing-the-login-barrier/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Dare Obasanjo's May 26th <a href="http://www.25hoursaday.com/weblog/PermaLink.aspx?guid=3689274c-91e5-4ab9-bea8-630719932304">thoughts on the facebook platform</a> contained a number of links to the Facebook API documentation. At the time, clicking through to any of the Facebook API links resulted in a login dialog:
</p>
<p>
<img alt="facebook login" border="0" class="at-xid-6a0120a85dcdae970b012877700f58970c" height="222" src="https://blog.codinghorror.com/content/images/uploads/2007/06/6a0120a85dcdae970b012877700f58970c-pi.png" width="519">
</p>
<p>
It struck me as incredibly odd that I had to login just to look at API documentation. <b>When presented with the login barrier, I did what 99% of all the people who encounter a login barrier do: I turned back.</b> Dare seemed excited about the Facebook API, but I lost interest when confronted with this login screen.
</p>
<p>
Wouldn't you want information about your API disseminated as widely as possible, to as many people as possible? To be fair, Facebook has since rectified this problem. Clicking on the link now takes you <a href="http://developer.facebook.com/">directly to the Facebook API documentation</a> with no login barrier. I'm not so sure the Facebook folks are "brilliant on several levels" if their API documentation was placed behind a login barrier, even if for only a few days.
</p>
<p>
I previously referenced Jan Miksovsky's <a href="http://www.codinghorror.com/blog/archives/000866.html">enumeration of login steps as a type of user interface friction</a>. But in reality, login barriers are far worse than friction-- <b>they're a <i>brick wall</i></b>. Login barriers are a no-win situation for users. What's in it for them? And without sneaking behind the barrier, if only for a moment, how can the user possibly know if your site is worth the hassle of signing up? If you're the <a href="http://www.nytimes.com/">New York Times</a>, maybe you can get away with forcing users to deal with the login barrier before getting to the meat of your website. But <a href="http://www.codinghorror.com/blog/archives/000127.html">most of us will never have that much cheese</a>.
</p>
<p>
Even if you can't avoid an eventual login, it <i>is</i> possible to make the user's login process nearly seamless. Too many sites take a ham-handed, completely traditional approach to logins. <b>You can do much, much better than the abysmal login barrier status quo.</b> Jan doesn't mince any words when he says <a href="http://www.geni.com">Geni</a> has <a href="http://miksovsky.blogs.com/flowstate/2007/06/geni_slickest_t.html">the most inviting initial user experience he's ever seen</a>:
</p>
<p>
</p>
<blockquote>
Right off the bat, you're cleverly dropped into a family tree that's already partially started: there's a place for you, and obvious points to add your parents. No fanfare is needed to introduce the site or explain what it's for. The very nature of the task's UI makes it obvious that you're building a family tree.
<p>
You're asked for an email address, and in the most compact text imaginable, they define the key points of their privacy policy ("never spammed, never shared").
</p>
<p>
It's not advertised to the user at this point that the email address they enter for themselves will become their user ID on the site. This is revealed the first time the user tries to return to the site. At that point -- the second visit -- the user is asked to sign in with their email address and a temporary password that was emailed separately to that address.
</p>
</blockquote>
<p>
It's obvious that Jan has been thinking a lot about this topic; he has a followup post describing <a href="http://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html">how Netvibes and Pageflakes ease visitors into sites with anonymous accounts</a>:
</p>
<p>
</p>
<blockquote>
<b>These sites both use cookies to establish a tentative, anonymous relationship between you and the site.</b> You can even enter personal data to customize the various widgets, but until you've established an account, you're generally using the service anonymously. (Of course, even without a user ID, each additional piece of data you enter to customize the site can be used to more precisely identify you.)
<p>
You can use your anonymous account for as long as you want to, provided you use the same browser on the same machine to do so. Whenever you reach that point -- maybe even months after starting to use the service -- you can sign up for an account. The basis of your relationship with the site transfers from your anonymous browser cookie to a real account secured with a user ID and a password. (Both these sites use your email address as a user ID, to eliminate the signup hurdle of picking a user ID.)
</p>
<p>
The deep principle at work is that a site doesn't need to rush to secure a relationship with a visitor. Inevitable interest in getting more out of the site (in these cases, the desire to use your customized home page from another location) slowly pushes you, the casual anonymous visitor, to finally forge a permanent relationship with the site as an identified user. The site knows a relationship with you will develop in its own time.
</p>
</blockquote>
<p>
If your application requires users to log in, <b>don't underestimate the impact of the login barrier you're presenting to users</b>. Consider utilizing anonymous, cookie-based accounts to give users a complete experience that more closely resembles the experience that named users get. By removing the login barrier and blurring the line between anonymous users and named users, you're likely to gain a lot more of the latter.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-06-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/removing-the-login-barrier/</guid>
</item>
</channel>
</rss>
