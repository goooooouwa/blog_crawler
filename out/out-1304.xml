<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>When Good Comments Go Bad</title>
<link>https://blog.codinghorror.com/when-good-comments-go-bad/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Now that <a href="http://dotnet.mvps.org/dotnet/faqs/?id=tooltipsxmldocumentation">XML comments</a> are confirmed for VB.NET in VS.NET 2005, I've started to aggressively adopt the <a href="http://www.gotdotnet.com/team/ide/">VBCommenter add-in</a>, which adds XML comment support to the current version of VS.NET.
</p>
<p>
XML comments are great primarily because of the additional IDE tooltip feedback they provide to developers for methods and variables-- well, as long as you're using C#. If you're using VB.NET you have to reference a binary version of the project to get that to work, at least until VS.Next.
</p>
<p>
However, as a general purpose documentation tool, XML comments are.. kind of verbose, hard to maintain, and annoying. The potential for abuse is high. This <a href="http://www.15seconds.com/issue/040303.htm">15 seconds article</a> is a prime example; just take a look at the author's recommended XML documentation template:
</p>
<p>
</p>
<pre>
''' ***********************************************************
''' Copyright [year]  [client name]. All rights reserved.
''' ***********************************************************
''' Class.Method:     IConfigProvider.GetSetting
''' &lt;summary&gt;
'''  [summary goes here]
''' &lt;/summary&gt;
''' &lt;param name="name"&gt;
'''       [description goes here].
'''       Value Type: &lt;see cref="String" /&gt;   (System.String)
''' &lt;/param&gt;
''' &lt;param name="defaultValue"&gt;
'''       [description goes here].
'''       Value Type: &lt;see cref="String" /&gt;   (System.String)
''' &lt;/param&gt;
''' &lt;exception cref="System.ApplicationException"&gt;
'''       Thrown when...
''' &lt;/exception&gt;
''' &lt;returns&gt;&lt;see cref="String" /&gt;(System.String)&lt;/returns&gt;
''' &lt;remarks&gt;&lt;para&gt;&lt;pre&gt;
''' RevisionHistory:
''' -----------------------------------------------------------
''' Date        Name              Description
''' -----------------------------------------------------------
''' mm/dd/yyyy  [logged in user]  Initial Creation
''' &lt;/pre&gt;&lt;/para&gt;
''' &lt;/remarks&gt;
''' -----------------------------------------------------------
</pre>
<p>
What next? Blood type? Mother's maiden name? Favorite color? It's ridiculous and detrimental to the code. <b>Comments are supposed to make your code easier to understand and maintain-- not harder</b>.
</p>
<p>
When commenting, there are a few essential rules I believe in:
</p>
<ol>
<li>
<b>The value of a comment is directly proportional to the distance between the comment and the code.</b> Good comments stay as close as possible to the code they're referencing. As distance increases, the odds of developers making an edit without seeing the comment that goes with the code increases. The comment becomes misleading, out of date, or worse, incorrect. Distant comments are unreliable at best.
<p></p>
</li>
<li>
<b>Comments with complex formatting cannot be trusted.</b> Complex formatting is a pain to edit and a disincentive to maintenance. If it is difficult to edit a comment, it's very likely a developer has avoided or postponed synchronizing his work with the comments. I view complex comments with extreme skepticism.
<p></p>
</li>
<li>
<b>Don't include redundant information in the comments.</b> Why have a Revision History section-- isn't that what we use source control for? Besides the fact that this is totally redundant, the odds of a developer remembering, after <i>every single edit</i>, to update that comment section at the top of the procedure are.. very low.
<p></p>
</li>
<li>
<b>The best kind of comments are the ones you don't need.</b> The only "comments" guaranteed to be accurate 100% of the time-- and even that is debatable-- is the body of the code itself. Endeavor to write self-documenting code whenever possible. An occasional comment to illuminate or clarify is fine, but if you frequently write code full of "tricky parts" and reams of comments, maybe it's time to refactor.
</li>
</ol>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-11-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/when-good-comments-go-bad/</guid>
</item>
</channel>
</rss>
