<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Formatting HTML code snippets with Ten Ton Wrecking Balls</title>
<link>https://blog.codinghorror.com/formatting-html-code-snippets-with-ten-ton-wrecking-balls/</link>
<content>
                <!--kg-card-begin: markdown--><p>
If you've ever tried to cut and paste code from the VS.NET IDE, you may have noticed that the code generally comes across looking like crap. The root of this problem is that VS.NET copies code into your clipboard in <a href="http://www.codinghorror.com/blog/archives/000107.html">the accursed Rich Text Format</a>. If you were expecting something like standard HTML, <i>think again, bucko!</i>
</p>
<p>
Brad Abrams posted a quick and dirty workaround <a href="http://blogs.msdn.com/brada/archive/2004/10/05/238427.aspx">to convert the clipboard to HTML using Word</a>. Cory Smith took that workaround and turned it into a <a href="http://addressof.com/blog/archive/2004/10/06/966.aspx">VS.NET Macro</a>. It works fairly well, but...
</p>
<ul>
<li>Using Word automation to color-code a code snippet in your clipboard is... not exactly lightweight. But my motto is, <b>why use a hammer when you can use a frickin' ten ton wrecking ball?!</b>
</li>
<li>Word doesn't seem to pick up background colors, only foreground colors. That's kind of a bummer.
</li>
<li>The resulting HTML is kinda nasty, even though we are specifically asking for Word's simplified "filtered" HTML. But it does work in Firefox and IE just fine.</li>
</ul>
<p>
I experimented with Cory's macro, simplifying it slightly, and forcing a standard font. (I normally <a href="http://www.codinghorror.com/blog/archives/000157.html">use a custom font for programming</a>, but not everyone will have that font installed.) </p> I knew Word's HTML wasn't going to be optimal, but after taking a closer look at it, I was profoundly unhappy with it. The fact that copying and pasting it back into VS.NET resulted in extra line breaks was kind of a showstopper, too. Here's a little taste:
<p>
</p>
<pre>
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;
&lt;SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Courier New';
mso-bidi-font-size: 12.0pt"&gt; &lt;o:p&gt;&lt;/o:p&gt;
</pre>
<p>
If this is Word's idea of "filtered" HTML, I'd hate to see the unfiltered version. And what's up with those empty &lt;o:p&gt; tags all over the place? After I figured out the <a href="http://mail.localplanet.co.uk/Blogs/stuart/archive/0001/01/01/OneNoteInsertHyperlink.aspx">threading issue preventing me from accessing the clipboard in a macro</a>, I added some code to postfix Word's crazy HTML into something resembling standard, basic HTML. This worked OK.
</p>
<p>
But then I wondered-- <b>why not convert the native RTF on the clipboard to HTML myself and cut out the middleman?</b> I'm all for using ten ton wrecking balls, but not when they er.. wreck stuff! Fortunately, I've written RTF to HTML converters before, and even more fortunately, VS.NET only uses a tiny subset of RTF to place colored code on the clipboard. Here's the main conversion function:
</p>
<p>
</p>
<pre language="vb.net">
Private Function RtfToHtml(ByVal rtf As String) As String
Const tabSpaces As String = "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"
'-- remove line breaks
rtf = Regex.Replace(rtf, "[nrf]", "")
'-- parse RTF color table
Dim colorTable As New Collections.Hashtable
Dim i As Integer = 1
For Each m As Match In Regex.Matches(rtf, _
"red(?&lt;red&gt;d+)green(?&lt;green&gt;d+)blue(?&lt;blue&gt;d+);")
colorTable.Add(i, HtmlColor(m))
i += 1
Next
'-- remove header and footer RTF tags
rtf = Regex.Replace(rtf, "{rtf1[^s]+s", "")
rtf = Regex.Replace(rtf, "}$", "")
rtf = Regex.Replace(rtf, "deff0{fonttbl{fd+[^}]+}}", "")
rtf = Regex.Replace(rtf, "{colortbl;(redd+greend+blued+;)+}", "")
'-- fix escaped C# brackets
rtf = Regex.Replace(rtf, "{", "{")
rtf = Regex.Replace(rtf, "}", "}")
'-- replace any HTML-specific characters
rtf = Web.HttpUtility.HtmlEncode(rtf)
'-- convert RTF tags to HTML tags
rtf = Regex.Replace(rtf, "tabs", tabSpaces)
rtf = Regex.Replace(rtf, "pars", "&lt;br/&gt;" &amp; Environment.NewLine)
'-- remove unmapped RTF tags
rtf = Regex.Replace(rtf, "fs(?&lt;size&gt;d+)s", "")
rtf = Regex.Replace(rtf, "cbd+highlightd+s", "")
'-- map foreground color RTF tags using &lt;font&gt; tag
rtf = Regex.Replace(rtf, "cf0s", "&lt;/span&gt;&lt;span style='color:black'&gt;")
For Each m As Match In Regex.Matches(rtf, "cf(?&lt;num&gt;d+)s")
i = Convert.ToInt32(m.Groups("num").Value)
rtf = Regex.Replace(rtf, "cf" &amp; i &amp; "s", _
"&lt;/span&gt;&lt;span style='color:" &amp; colorTable.Item(i) &amp; "'&gt;")
Next
'-- fix up orphaned spans at start and end
rtf = Regex.Replace(rtf, "(^.*?)&lt;/span&gt;", "$1")
rtf = rtf &amp; "&lt;/span&gt;"
'-- convert remaining spaces to HTML spaces
rtf = Regex.Replace(rtf, "  ", "&amp;nbsp;&amp;nbsp;")
'-- add wrapping div
rtf = "&lt;div style='font-family:" &amp; CodeFontName &amp; _
"; font-size: " &amp; CodeFontSize &amp; "pt;'&gt;" &amp; _
rtf &amp; "&lt;/div&gt;"
Return rtf
End Function
</pre>
<p>
All this RTF spelunking revealed an interesting fact. I've always been disappointed that none of the copied code had background color highlighting. Well, that's because <b>the RTF on the clipboard doesn't contain any of the background colors!</b> The actual background formatting codes are there, but there are absolutely no entries in the RTF color table for them. Weird.
</p>
<p>
<span style="color:red;"><b>Update 4/2006:</b> I have a <a href="http://www.codinghorror.com/blog/archives/000429.html">much improved RTF conversion macro</a>. This macro is only interesting for historical reasons, or if you need the Word interop conversion.</span>
</p>
<p>
Anyway, here's the full <a href="http://www.codinghorror.com/blog/files/FormatToHtml_macro.zip">FormatToHtml macro (zip)</a>. It contains the direct RTF clipboard to HTML conversion, as well as the RTF clipboard to Word clipboard to HTML conversion. To get started:
</p>
<p>
</p>
<ol>
<li>go to Tools - Macros - IDE
</li>
<li>create a new Module named "FormatToHtml" under "MyMacros"
</li>
<li>paste the downloaded code into the module
</li>
<li>add references to System.Drawing, System.Web, and System.Windows.Forms via the Add Reference menu
</li>
<li>save and close the macro IDE window
</li>
<li>go to Tools - Macros - Macro Explorer
</li>
<li>two new macros named "UsingWord" and "UsingRtfConversion" will be under "FormatToHtml":
<p>
<img alt="macro_explorer_formattohtml.gif" border="0" class="at-xid-6a0120a85dcdae970b0128776fbac2970c" height="151" src="https://blog.codinghorror.com/content/images/uploads/2005/06/6a0120a85dcdae970b0128776fbac2970c-pi.gif" width="209">
</p>
<p>
Double-click to run the macro, then paste away..</p>
</li>
</ol>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-06-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/formatting-html-code-snippets-with-ten-ton-wrecking-balls/</guid>
</item>
</channel>
</rss>
