<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Pair Programming vs. Code Reviews</title>
<link>https://blog.codinghorror.com/pair-programming-vs-code-reviews/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Tom Dommett wrote in to share his positive experience with <a href="http://en.wikipedia.org/wiki/Pair_programming">pair programming</a>:
</p>
<p>
</p>
<blockquote>
The idea is two developers work on the same machine. Both have keyboard
and mouse. At any given time one is driver and the other navigator. The
roles switch either every hour, or whenever really. The driver codes, the navigator is reading, checking, spell-checking and sanity testing the code, whilst thinking through problems and where to go next. If the driver hits a problem, there are two people to find a solution, and one of the two usually has a good idea.
<p>
Other advantages include the fact that where two people have differing
specialities, these skills are transferred. Ad-hoc training occurs as one person shows the other some tricks, nice workarounds, etcetera.
</p>
<p>
The end result is that both developers are fully aware of the code, how it works, and why it was done that way. Chances are the code is better than one developer working alone, as there was somebody watching. It's less likely to
contain bugs and hacks and things that cause maintenance problems later.
</p>
<p>
In a bigger team, the pairing can change each week so each team member is partnered with somebody different. This is a huge advantage, as it gets developers talking and communicating ideas in the common language of code.
</p>
<p>
We found this to be as fast as working separately. The code got written
quicker and didn't require revisiting. And when it did need to change, more than one person was familiar with the code.
</p>
</blockquote>
<p>
It's an encouraging result. I applaud anything that gets teams to communicate better.
</p>
<p>
I'm intrigued by the idea of pair programming, but <b>I've never personally lived the pair programming lifestyle</b>. I do, however, enjoy working closely with other developers. Whenever I sit down to work side by side with a fellow developer, I always absorb a few of their tricks and techniques. It's a fast track learning experience for both participants. But I've only done this in small doses. I'm a little wary of spending a full eight hours working this way. I suspect this might be fatiguing in larger doses, <a href="http://geekswithblogs.net/dlussier/archive/2007/08/10/114551.aspx">unless you're very fortunate in your choice of pairing partner</a>.
</p>
<p>
I've <a href="http://www.codinghorror.com/blog/archives/000495.html">written about the efficacy of code reviews</a> before. That is something I have personal experience with; I can vouch for the value of code reviews without reservation. I can't help <b>wondering if pair programming is nothing more than code review on steroids</b>. Not that one is a substitute for the other-- you could certainly do both-- but I suspect that many of the benefits of pair programming could be realized through <a href="http://www.processimpact.com/pubs.shtml#pr">solid peer review practices</a>.
</p>
<p>
But code reviews aren't a panacea, either, <a href="http://jcooney.net/archive/2004/01/31/355.aspx">as Marty Fried pointed out</a>:
</p>
<p>
</p>
<blockquote>
My experience with code reviews has been a mixed bag. One of the problems seems to be that nobody wants to spend the time to really understand new code that does anything non-trivial, so the feedback is usually very general. But later, when someone is working on the code to either add functionality or fix bugs, they usually have lots of feedback (sometimes involving large hammers), but then it may be too late to be effective; the programmer may not even be around. I think it might be useful to have one anyway, but it's hard to get a fellow progammer to tell his boss that another programmer did a bad job.
</blockquote>
<p>
<b>The advantage of pair programming is its gripping immediacy: it is impossible to ignore the reviewer when he or she is sitting right next to you.</b> Most people will passively opt out if given the choice. With pair programming, that's not possible. Each half of the pair <i>has</i> to understand the code, right then and there, as it's being written. Pairing may be invasive, but it can also force a level of communication that you'd otherwise never achieve.
</p>
<p>
On the other hand, peer review scales a heck of a lot better than stacking physical bodies in the same area. Consider <a href="http://www.macadamian.com/index.php?option=com_techarticle&amp;task=view&amp;id=1">the experiences of Macadamian with code review</a> while working on the <a href="http://en.wikipedia.org/wiki/Wine_(software)">WINE project</a>:
</p>
<p>
</p>
<blockquote>
There were two processes in the WINE project that we weren't used to: public peer reviews, where new code and patches were distributed in a mailing list to everyone involved in the project; and single committer, where the project leader had the final say over which patches were accepted into the source tree.
<p>
We soon found out that Alexandre Julliard, who has been the maintainer of WINE and one of the key developers since 1994, was very particular about code going into the source tree. Our team's patches were scrutinized, and when some were rejected, there was a lot of grumbling. "My code works, who does this guy think he is? We're on a deadline here!" But as the project progressed, we realized we were producing our best code ever. Producing clean, well-designed code that was admitted into the source tree at first pass soon became a matter of pride. We also found that, despite the fact that the project was huge and spread worldwide, we knew exactly how the whole project was progressing since we saw every patch on the mailing list. We now conduct code reviews on every project, and on larger projects, we set up an internal mailing list and designate a single committer. It may be painful to set up code review at your company, and there may be some grumbling, but you will see big improvements in the quality and maintainability of your code.
</p>
</blockquote>
<p>
I think both techniques are clearly a net <i>good</i>, although they each have their particular pros and cons. I encourage people who have experience with both pair programming and code reviews to share their experiences in the comments. Is one more effective than the other? Should we do both?
</p>
<p>
<img alt="eyes watching" border="0" class="at-xid-6a0120a85dcdae970b0120a86dada1970b" height="434" src="https://blog.codinghorror.com/content/images/uploads/2007/11/6a0120a85dcdae970b0120a86dada1970b-pi.jpg" width="640">
</p>
<p>
In the end, I don't think it's a matter of picking one over the other so much as <b>ensuring you have more than one pair of eyes looking at the code you've written</b>, however you choose to do it. When your code is reviewed by another human being -- whether that person is sitting right next to you, or thousands of miles away -- you <i>will</i> produce better software. That I can guarantee.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-11-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/pair-programming-vs-code-reviews/</guid>
</item>
</channel>
</rss>
