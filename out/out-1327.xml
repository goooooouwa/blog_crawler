<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Managed HTML rendering</title>
<link>https://blog.codinghorror.com/managed-html-rendering/</link>
<content>
                <!--kg-card-begin: markdown--><p>
At some point in any WinForms project, you're bound to need either:
</p>
<ol>
<li>WYSIWYG text entry areas with text formatting
</li>
<li>Quick and dirty printed report generation
</li>
</ol>
The obvious choice for both of these things is HTML. No problem! I'll just drag my <b>HtmlTextBox</b> on the form, set a few properties, and.. sadly, no. That control doesn't exist.* Instead, Microsoft helpfully provides.. the <b>RtfTextBox</b>. What year is it again? 2004?
<p>
Although I am ambivalent towards HTML, there's no question that it is a far, far better solution than the nasty, crusty old Rich Text Format. <b>RTF is HTML gone stupid</b>. If you're ever bored and want to take on a brain-meltingly difficult project, just try writing a <b>RTF to HTML converter</b>. Oh sure, it <i>seems</i> easy enough.. but I don't think anyone can appreciate how profoundly irrational RTF is until they actually sit down and work with it in detail. Ugly doesn't begin to cover it. Based on <a href="http://en.wikipedia.org/wiki/RTF">my limited research</a>, RTF seems to have evolved as the de facto document storage format for early versions of Microsoft Word, apparently based on the whims of whatever development team was working on Word that week.
</p>
<p>
To be fair, the RtfTextBox actually isn't that bad. It's effectively "free" as far as distribution footprint, and it will work for most basic formatting scenarios including URL and mailto: hyperlinks. In fact, Craig Andera just released <a href="http://pluralsight.com/blogs/craig/archive/2004/10/12/2760.aspx">a servicable enhanced RichTextBox</a>. The only problem is that it's, well, RTF. Just try inserting bulleted text to see what I mean. If you're dead set on a control that renders HTML, there's only one solution I'm aware of in .NET: IE interop. Lots of people are doing it:
</p>
<ul>
<li>
<a href="http://www.itwriting.com/htmleditor/index.php">The HtmlEditor - a C# control that wraps MSHTML</a>
</li>
<li>
<a href="http://www.gotdotnet.com/Workspaces/Workspace.aspx?id=ee974084-d5c2-44d5-a11b-b2efb96074f8">Lutz Roeder's HTML Writer</a>
</li>
<li>
<a href="http://support.microsoft.com/?kbid=311295">HOW TO: Automate Internet Explorer Within a Contained Visual Basic .NET UserControl</a>
</li>
<li>
<a href="http://www.syncfusion.com/FAQ/WinForms/FAQ_c100c.asp">Windows Forms FAQ - Web Browser section</a>
</li>
</ul>
<p>
And it works. Sort of. Like all <b>heavy duty .NET COM interop</b>, you can't escape the feeling that you're building a giant house of cards, prone to catastrophic failure at the first gentle breeze. There's also the matter of our little friend Microsoft.mshtml.dll, a primary interop assembly weighing in at 7.8 megabytes. And god help you if a user doesn't have IE installed on their system. Inconceivable!
</p>
<p>
While I'm not against interop per se, it seems like overkill to harness the entire bulk of IE to render a little HTML. What's really depressing is that there are precious few <a href="http://weblogs.asp.net/mspedding/archive/2004/07/19/187580.aspx">options</a>, interop or otherwise, for getting proper HTML into a WinForms app. <b>What I'd really like to see is a completely managed, lightweight HTML rendering control written entirely in .NET.</b> In other words, something with the basic features of the RtfTextBox, but using standard HTML conventions. I realize HTML rendering is not exactly trivial, but I think a smallish subset of standard HTML would meet my needs just fine.
</p>
<p>
* Well, not in this version of .NET. The <a href="http://www.windowsforms.net/WhidbeyFeatures/default.aspx?PageID=2&amp;ItemID=18&amp;Cat=Runtime&amp;tabindex=5">WebBrowser control</a> will be available out of the box in VS.NET 2005, but it's the same exact hunk o' IE interop-- but this time, with a pretty Microsoft ribbon on the top.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-10-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/managed-html-rendering/</guid>
</item>
</channel>
</rss>
