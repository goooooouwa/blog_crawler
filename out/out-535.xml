<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Leading by Example</title>
<link>https://blog.codinghorror.com/leading-by-example/</link>
<content>
                <!--kg-card-begin: markdown--><p>
It takes discipline for development teams to benefit from <a href="http://www.codinghorror.com/blog/archives/000643.html">modern software engineering conventions</a>. If your team doesn't have the right kind of engineering discipline, the tools and processes you use are almost irrelevant. I advocated as much in <a href="http://www.codinghorror.com/blog/archives/000931.html">Discipline Makes Strong Developers</a>.
</p>
<p>
But some commenters were understandably apprehensive about the idea of having a <a href="http://www.youtube.com/results?search_query=gunnery%20sergeant%20hartman&amp;search=Search">Senior Drill Instructor Gunnery Sergeant Hartman</a> on their team, enforcing engineering discipline.
</p>
<p>
</p>
<blockquote>
<a href="http://www.imdb.com/title/tt0093058/quotes"><img alt="Scene from Full Metal Jacket, Gunnery Sergeant Hartman Pointing" border="0" class="at-xid-6a0120a85dcdae970b0120a86d93c0970b" height="330" src="https://blog.codinghorror.com/content/images/uploads/2007/08/6a0120a85dcdae970b0120a86d93c0970b-pi.jpg" width="430"></a>
<p>
You little scumbag! I've got your name! I've got your ass! You will not laugh. You will not cry. You will learn by the numbers. I will teach you.
</p>
</blockquote>
<p>
Cajoling and berating your coworkers into compliance isn't an effective motivational technique for software developers, at least not in my experience. <b>If you want to pull your team up to a higher level of engineering, you need a leader, not an enforcer.</b> The goal isn't to brainwash everyone you work with, but to negotiate commonly acceptable standards with your peers.
</p>
<p>
I thought Dennis Forbes did an outstanding job of summarizing effective leadership strategies in his post <a href="http://www.yafla.com/dennisforbes/Effectively-Integrating-Into-Software-Development-Teams/Effectively-Integrating-Into-Software-Development-Teams.html">effectively integrating into software development teams</a>. He opens with a hypothetical (and if I know Dennis, probably autobiographical) email that describes <b>the pitfalls of being perceived as an enforcer</b>:
</p>
<p>
</p>
<blockquote>
I was recently brought in to help a software team get a product out the door, with a mandate of helping with some web app code. I've been trying my best to integrate with the team, trying to earn some credibility and respect by making myself useful.
<p>
I've been forwarding various <a href="http://www.joelonsoftware.com/">Joel On Software</a> essays to all, recommending that the office stock up on <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a>, <a href="http://www.amazon.com/exec/obidos/ASIN/0932633439/codihorr-20">Peopleware</a>, and <a href="http://www.amazon.com/exec/obidos/ASIN/0201835959/codihorr-20">The Mythical Man Month</a>, and I make an effort to point out everything I believe could be done better. I regularly browse through the source repository to find ways that other members could be working better.
</p>
<p>
When other developers ask for my help, I try to maximize my input by broadening my assistance to cover the way they're developing, how they could improve their typing form, what naming standard they use, to advocate a better code editing tool, and to give my educated final word regarding the whole stored procedure/dynamic SQL debate.
</p>
<p>
Despite all of this, I keep facing resistance, and I don't think the team likes me very much. Many of my suggestions aren't adopted, and several people have replied with what I suspect is thinly veiled sarcasm.
</p>
<p>
What's going wrong?
</p>
</blockquote>
<p>
I'm sure we've all worked with someone like this. Maybe we were even that person ourselves. Even with the best of intentions, and armed with <a href="http://www.codinghorror.com/blog/archives/000020.html">the top books on the reading list</a>, you'll end up like Gunnery Sergeant Hartman ultimately did: gunned down by your own team.
</p>
<p>
At the end of his post, Dennis provides <a href="http://www.yafla.com/dennisforbes/Effectively-Integrating-Into-Software-Development-Teams/Effectively-Integrating-Into-Software-Development-Teams.html">a thoughtful summary of how to avoid being shot by your own team</a>:
</p>
<p>
</p>
<blockquote>
<b>Be humble.</b> Always first presume that you're wrong. While developers do make mistakes, and as a new hire you should certainly assist others in catching and correcting mistakes, you should try to ensure that you're certain of your observation before proudly declaring your find. It is enormously damaging to your credibility when you cry wolf.
<p>
<b>Be discreet with constructive criticism.</b> A developer is much more likely to be accept casual suggestions and quiet leading questions than they are if the same is emailed to the entire group. Widening the audience is more likely to yield defensiveness and retribution. The team is always considering what your motives are, and you will be called on it and exiled if you degrade the work of others for self-promotion.
</p>
<p>
<b>The best way to earn credibility and respect is through hard work and real results.</b> Cheap, superficial substitutes -- like best practice emails sent to all, or passing comments about how great it would be to implement some silver bullet -- won't yield the same effect, and are more easily neutralized.
</p>
<p>
<b>Actions speak louder than words.</b> Simply talking about implementing a team blog, or a wiki, or a new source control mechanism, or a new technology, is cheap. Everyone knows that you're just trying to claim ownership of the idea when someone eventually actually does the hard work of doing it, and they'll detest you for it. If you want to propose something, put some elbow grease behind it. For instance, demonstrate the foundations of a team blog, including preliminary usage guidelines, and a demonstration of all of the supporting technologies. This doesn't guarantee that the initiative will fly, and the effort might be for naught, but the team will identify that it's actual motiviation and effort behind it, rather than an attempt at some easy points.
</p>
<p>
<b>There is no one-size-fits-all advice.</b> Not every application is a high-volume e-commerce site. Just because that's the most common best-practices subject doesn't mean that it's even remotely the best design philosophies for the group you're joining.
</p>
</blockquote>
<p>
What I like about Dennis' advice is that it focuses squarely on action and results. It correlates very highly with what I've personally observed to work: <b>the most effective kind of technical leadership is leading by example</b>. All too often there are no development leads with the time and authority to enforce, even if they wanted to, so <a href="http://www.codinghorror.com/blog/archives/000689.html">actions become the only currency</a>.
</p>
<p>
But actions alone may not be enough. You can spend a lifetime learning how to lead and still not get it right. Gerald Weinberg's book <a href="http://www.amazon.com/exec/obidos/ASIN/0932633021/codihorr-20">Becoming a Technical Leader: an Organic Problem-Solving Approach</a> provides a much deeper analysis of leadership that's specific to the profession of software engineering.
</p>
<p>
<a href="http://www.amazon.com/exec/obidos/ASIN/0932633021/codihorr-20"><img alt="book cover of Jerry Weinberg's Becoming a Technical Leader" border="0" class="at-xid-6a0120a85dcdae970b0120a86d93e5970b" height="368" src="https://blog.codinghorror.com/content/images/uploads/2007/08/6a0120a85dcdae970b0120a86d93e5970b-pi.png" width="250"></a>
</p>
<p>
Within the first few chapters, Weinberg cuts to the very heart of the problem with both Gunnery Sergeant Hartman's and Dennis Forbes' hypothetical motivational techniques:
</p>
<p>
</p>
<blockquote>
How do we want to be helped? I don't want to be helped out of pity. I don't want to be helped out of selfishness. These are situations in which the helper really cares nothing about me as a human being. What I would have others do unto me is to love me-- not romantic love, of course, but true human caring.
<p>
So, if you want to motivate people, either directly or by creating a helping environment, you must first convince them that you care about them, and the only sure way to convince them is by actually caring. People may be fooled about caring, but not for long. That's why the second version of the Golden Rule says, "Love thy neighbor", not "Pretend you love thy neighbor." Don't fool yourself. If you don't really care about the people whom you lead, you'll never succeed as their leader.
</p>
</blockquote>
<p>
Weinberg's <a href="http://www.amazon.com/exec/obidos/ASIN/0932633021/codihorr-20">Becoming a Technical Leader</a> is truly a classic. It is, quite simply, the thinking geek's <a href="http://www.amazon.com/exec/obidos/ASIN/0671723650/codihorr-20">How to Win Friends and Influence People</a>. So much of leadership is learning to give a damn about other people, something that us programmers are notoriously bad at. We may <a href="http://www.codinghorror.com/blog/archives/000761.html">love our machines and our code</a>, but our teammates prove much more complicated.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-08-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/leading-by-example/</guid>
</item>
</channel>
</rss>
