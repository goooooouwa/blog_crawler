<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Revisiting Edit and Continue</title>
<link>https://blog.codinghorror.com/revisiting-edit-and-continue/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Edit and Continue, which shipped in Visual Studio 2005, is generally regarded as <i>A Good Thing</i>. It's pretty difficult to argue against <a href="http://www.codinghorror.com/blog/archives/000026.html">the benefits of immediacy when debugging</a>, but that isn't about to stop some people:
</p>
<p>
</p>
<ul>
<li>
<a href="http://weblogs.asp.net/fbouma/archive/2003/08/01/22211.aspx">Frans Bouma</a><br>
<i>
People who grew up with assemblers, the gnu commandline C debugger and other terrible tools, know that debugging using a debugger is a last resort and also learned that debugging is not about using a debugger, but about understanding the difference between the sourcecode which should have been written and the sourcecode that is written. Edit and Continue doesn't help you with finding more bugs at a faster rate. You know what does? Design by contract like Eiffel has, pre/post conditions in the code and proper design by designing algorithms first on paper or in a design tool, not behind a keyboard with a code editor in front of you.
</i>
</li>
<li>
<a href="http://wintellect.com/WEBLOGS/wintellect/archive/2004/10/17/546.aspx">John Robbins</a><br>
<i>
Edit and continue is a bug-introducing machine. Why?  Because you get to focusing on that one bug and twiddle the code to fix that one bug and introduce six more.  When you're debugging, you're debugging, not editing.  When you start editing, you need to stop to think and plan for the ramifications of those changes.  To paraphase Dykstra: "Use of a debugger is an indication of sloppy thinking.  Use of edit and continue is an indication of insanity!"
</i>
</li>
<li>
<a href="http://samgentile.com/blog/archive/2004/10/19/12240.aspx">Sam Gentile</a><br>
<i>
Program logic should not be tested in the debugger. You are wasting your time and your company's time if you do so. The debugger is for intractable problems. It was John who taught me that lesson in his seminal Windows Debugging book - you shouldn't be in the debugger unless you have to be. Unit tests are the place to verify, refector and edit as you go; not the debugger.
</i>
</li>
</ul>
<p>
While they raise some valid points, the underlying argument is essentially the same in all three cases: <b>Edit and Continue should be removed because it's dangerous</b>. And we're clearly too stupid to be trusted with a dangerous tool like edit and continue!
</p>
<p>
This reminds me of a similar scenario in video games. There are two types of video games:
</p>
<p>
</p>
<ol>
<li>games that allow you to save your progress anywhere you like.
</li>
<li>games that only allow you to save your progress at specific points placed in the game by the developers.
</li>
</ol>
<p>
If you are killed between saves, you have to go back to the last save.
</p>
<p>
Certain groups of hard-core gamers think "save anywhere" games are fatally flawed. Real men, they say, work their way through a level and earn the save point. They believe that games should remove the "save anywhere" option, lest we all become a bunch of spoiled, lazy gamers who can barely lift our thumbs.
</p>
<p>
But here's what drives me crazy: <b>the hard-core gamers <i>don't have to use save anywhere!</i></b> If they're so hard-core, they should easily be able to resist the temptation to save their game. They can simply save at the beginning of a level, or confine themselves a few saves per level, or whatever. So when they say the "save anywhere" option should be removed, <b>what they're really saying is, "everyone should play games the same way we do,"</b> and veiling it in some macho rhetoric to intimidate people into agreeing with them.
</p>
<p>
The comparison between game saves and edit and continue is fairly apt; either you can edit a program whenever you want-- even at a breakpoint in a debugger-- or you can only do it when the program is stopped. Clearly, offering both options is more flexible and inhibits no one.
</p>
<p>
However, there's a big difference between <i>encouraging people to take challenges</i> and <i>forcing them to take challenges by removing flexibility from the product</i>. Not everyone plays games for the same reasons you do. And not everyone writes code for the same reasons you do, either.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-02-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/revisiting-edit-and-continue/</guid>
</item>
</channel>
</rss>
