<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Fail Early, Fail Often</title>
<link>https://blog.codinghorror.com/fail-early-fail-often/</link>
<content>
                <!--kg-card-begin: markdown--><p>Scott Hanselman thinks <a href="http://www.hanselman.com/blog/ScottHanselman11SuccessfulLargeProjects3OpenSourceApplications1CollossalFailure.aspx">signing your name with a bunch of certifications</a> is <a href="http://wordnet.princeton.edu/perl/webwn?s=gauche">gauche</a>:</p>
<blockquote>
<p>If it's silly to suggest putting my SATs on my resume, why is …</p>
<p>Scott Hanselman, MCSD, MCT, MCP, MC*.*</p>
<p>… reasonable? Having a cert means you have a capacity to hold lots of technical stuff in your head. Full stop. I propose we sign our names like this:</p>
<p>Scott Hanselman, 11 Successful Large Projects, 3 Open Source Applications, 1 Colossal Failure</p>
<p>Wouldn't that be nice?</p>
</blockquote>
<p>I agree. Your credentials should be the sum of the projects you've worked on. But I think Scott has this backwards: <a href="https://blog.codinghorror.com/success-through-failure/">you should emphasize the number of <i>failed</i> projects you've worked on</a>.</p>
<p>How do we define "success", anyway? What were the goals? Did the project make money? Did users like the software? Is the software still in use? It's a thorny problem. I used to work in an environment where <i>every project was judged a success</i>. Nobody wanted to own up to the limitations, compromises, and problems in the software they ended up shipping. And the managers in charge of the projects desperately wanted to be perceived as successful. So what we got was the special olympics of software: every project was a winner. The users, on the other hand, were not so lucky.</p>
<p>Success is relative and ephemeral. But failure is a near-constant. If you really want to know if someone is competent at their profession, <i>ask them about their failures</i>. Last year I cited an article on <a href="http://gladwell.com/the-physical-genius/">predicting the success or failure of surgeons</a>:</p>
<blockquote>
<p>Charles Bosk, a sociologist at the University of Pennsylvania, once conducted a set of interviews with young doctors who had either resigned or been fired from neurosurgery-training programs, in an effort to figure out what separated the unsuccessful surgeons from their successful counterparts.</p>
<p>He concluded that, far more than technical skills or intelligence, what was necessary for success was the sort of attitude that Quest has – a practical-minded obsession with the possibility and the consequences of failure.</p>
<p>"When I interviewed the surgeons who were fired, I used to leave the interview shaking," Bosk said. "I would hear these horrible stories about what they did wrong, but the thing was that they didn't know that what they did was wrong. In my interviewing, I began to develop what I thought was an indicator of whether someone was going to be a good surgeon or not. It was a couple of simple questions: Have you ever made a mistake? And, if so, what was your worst mistake? The people who said, 'Gee, I haven't really had one,' or, 'I've had a couple of bad outcomes but they were due to things outside my control' – invariably those were the worst candidates. <b>And the residents who said, 'I make mistakes all the time. There was this horrible thing that happened just yesterday and here's what it was.' They were the best. They had the ability to rethink everything that they'd done and imagine how they might have done it differently."</b></p>
</blockquote>
<p>The best software developers embrace failure – in fact, they're <i>obsessed with failure</i>. If you <a href="https://blog.codinghorror.com/defeating-optimism/">forget how easy it is to make critical mistakes</a>, you're likely to fail. And that should concern you.</p>
<p>Michael Hunter takes this concept one step beyond mere vigilance. He encourages us to <a href="https://blogs.msdn.microsoft.com/micahel/2005/08/17/fail-fast/">fail early and often</a>:</p>
<blockquote>
<p>If you're lucky, however, your family encourages you to fail early and often. If you're really lucky your teachers do as well. It takes a lot of courage to fight against this, but the rewards are great. <b>Learning doesn't happen from failure itself but rather from analyzing the failure, making a change, and then trying again. Over time this gives you a deep understanding of the problem domain</b> (be that programming or combining colors or whatever) - you are learning. Exercising your brain is good in its own right ("That which is not exercised atrophies", my trainer likes to say), plus this knowledge improves your chances at functioning successfully in new situations.</p>
</blockquote>
<p>I say the more failed projects in your portfolio, the better. If you're not failing some of the time, <i>you're not trying hard enough</i>. You need to overreach to find your limits and grow. But do make sure you <b>fail in spectacular new ways on each subsequent project</b>.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-05-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/fail-early-fail-often/</guid>
</item>
</channel>
</rss>
