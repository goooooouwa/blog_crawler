<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Presentation: Be Vain</title>
<link>https://blog.codinghorror.com/presentation-be-vain/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://fretsonfire.sourceforge.net/">Frets on Fire</a> is an open source clone of <a href="http://en.wikipedia.org/wiki/Guitar_Hero">Guitar Hero</a>. It's a great idea. Think of all the user-created songs we could play! My excitement quickly faded after I downloaded it and tried it out.
</p>
<p>
<img alt="Frets on Fire, screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86dae80970b" height="400" src="https://blog.codinghorror.com/content/images/uploads/2007/12/6a0120a85dcdae970b0120a86dae80970b-pi.jpg" width="640">
</p>
<p>
I'll be first in line to champion gameplay over graphics, but the presentation in Frets on Fire is <i>so</i> bare-bones, <i>so</i> rudimentary that it's hard to muster any enthusiasm for the game whatsoever. Even equipped with <a href="http://img520.imageshack.us/img520/874/rainingbloodguitarxplorpm0.jpg">a nice plastic USB guitar</a>, there's only so much rocking you can do when you're staring at the loose OpenGL equivalent of <a href="http://www.loonygames.com/content/1.28/feat/">a completely ASCII interface</a>. It is <i>incredibly</i> primitive.
</p>
<p>
For comparison, here's a screenshot I captured of <a href="http://www.amazon.com/exec/obidos/ASIN/B000W5UNLY/codihorr-20">Guitar Hero III</a> running on my PC.
</p>
<p>
<img alt="Guitar Hero III for the PC, screenshot" border="0" class="at-xid-6a0120a85dcdae970b0120a86dae85970b" height="400" src="https://blog.codinghorror.com/content/images/uploads/2007/12/6a0120a85dcdae970b0120a86dae85970b-pi.jpg" width="640">
</p>
<p>
These rhythm games are <b>functionally identical</b>. Press some combination of the five colored buttons on the USB plastic guitar and strum in time to the pre-recorded music. It's <a href="http://www.news.com/Is-tomorrows-Clapton-playing-Guitar-Hero/2100-1043_3-6220398.html">hardly guitar practice</a>, but it is a fun new way to enjoy the music you already love.
</p>
<p>
Based on these screenshots, <i>which fake plastic guitar rhythm game would you rather play?</i>
</p>
<p>
Despite the universe of modding and custom songs possible with Frets on Fire, I'd much rather spend my time hacking new songs into the PC version of Guitar Hero III, even with the additional reverse engineering hurdles. The lesson I take from this is that <b>presentation matters</b>.
</p>
<p>
Of course, this comparison is grossly unfair to Frets on Fire. It is <a href="http://fretsonfire.sourceforge.net/documentation/source/">open source and completely free</a> -- whereas the <a href="http://www.amazon.com/exec/obidos/ASIN/B000W5UNLY/codihorr-20">Mac and PC version of Guitar Hero III</a> costs $79.99 bundled with the guitar. There's a commercial army of artists, developers, and producers behind Guitar Hero III. It's unreasonable to expect Frets on Fire to have the same production values. I'm not exactly going to march over to the SourceForge page and demand my money back or anything. I applaud what they've done.
</p>
<p>
But playing Frets on Fire makes me feel like a keyboard jockey instead of a rock god. This isn't just a personal deficiency of mine-- it's a presentation problem with real world ramifications. Better presentation would win many converts to the Frets on Fire camp, and woo them away from the alternatives. <b>I think this presentation rule applies to <i>all</i> software.</b> If you want people to get excited about your software, you have to make it look reasonably good, <a href="http://www.joelonsoftware.com/articles/fog0000000356.html">as Joel Spolsky points out</a>:
</p>
<p>
</p>
<blockquote>
I learned this lesson as a consultant, when I did a demo of a major web-based project for a client's executive team. The project was almost 100% code complete. We were still waiting for the graphic designer to choose fonts and colors and draw the cool 3-D tabs. In the meantime, we just used plain fonts and black and white, there was a bunch of ugly wasted space on the screen, basically it didn't look very good at all. But 100% of the functionality was there and was doing some pretty amazing stuff.
<p>
What happened during the demo? The clients spent the entire meeting griping about the graphical appearance of the screen. They weren't even talking about the UI. Just the graphical appearance. "It just doesn't look slick," complained their project manager. That's all they could think about. We couldn't get them to think about the actual functionality. Obviously fixing the graphic design took about one day. It was almost as if they thought they had hired painters.
</p>
</blockquote>
<p>
I'd argue that presentation <a href="http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?ei=5007&amp;en=750c9021e58923d5&amp;ex=1386133200">cuts a little deeper</a> than Joel is insinuating:
</p>
<p>
</p>
<blockquote>
''Most people make the mistake of thinking design is what it looks like,'' says Steve Jobs, Apple's C.E.O. ''People think it's this veneer -- that the designers are handed this box and told, 'Make it look good!' That's not what we think design is. It's not just what it looks like and feels like. Design is how it works.''
</blockquote>
<p>
Avoid creating software that's beautiful on the inside but ugly on the outside. <b>Be vain. Make something that looks as good as it works.</b> If you pay attention to the presentation of your software, you just may find the rest of the world is a lot more willing to pay attention, too.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-12-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/presentation-be-vain/</guid>
</item>
</channel>
</rss>
