<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Problem With Logging</title>
<link>https://blog.codinghorror.com/the-problem-with-logging/</link>
<content>
                <!--kg-card-begin: markdown--><p>
A recent Stack Overflow post described <a href="http://stackoverflow.com/questions/153524/code-to-logging-ratio#153547">one programmer's logging style</a>. Here's what he logs:
</p>
<p>
</p>
<blockquote>
<p><strong>INFO Level</strong></p>
<ul>
<li>The start and end of the method</li>
<li>The start and end of any major loops</li>
<li>The start of any major case/switch statements</li>
</ul>
<p><strong>DEBUG Level</strong></p>
<ul>
<li>Any parameters passed into the
method</li>
<li>Any row counts from result sets I retrieve</li>
<li>Any datarows that may contain suspicious data when being passed down to the method </li>
<li>Any "generated" file paths, connection strings, or other values that could get mungled up when being "pieced together" by the environment.</li>
</ul>
<p><strong>ERROR Level</strong></p>
<ul>
<li>Handled exceptions</li>
<li>Invalid login attempts (if security is an issue)</li>
<li>Bad data that I have intercepted forreporting</li>
</ul>
<p><strong>FATAL Level</strong></p>
<ul>
<li>Unhandled exceptions.</li>
</ul>
</blockquote>
<p>
I don't mean to single out <a href="http://www.dillieodigital.net/">the author</a> here, but this strikes me as a bit .. excessive.
</p>
<p>
Although I've never been a particularly big logger, myself, one of my teammates on Stack Overflow is. So when building Stack Overflow, we included <a href="http://logging.apache.org/log4net/index.html">log4net</a>, and logged a bunch of information at the various levels. I wasn't necessarily a big fan of the approach, but I figured what's the harm.
</p>
<p>
Logging does have a certain seductive charm. <b>Why not log as much as you can whenever you can?</b> Even if you're not planning to use it today, who knows, it might be useful for troubleshooting tomorrow. Heck, just log everything! What could it possibly hurt?
</p>
<p>
Oh, sure, logging seems harmless enough, but let me tell you, it can deal some <i>serious</i> hurt. We ran into a particularly nasty recursive logging bug:
</p>
<p>
</p>
<ul>
<li>On thread #1, our code was doing Log (lock) / DB stuff (lock)
</li>
<li>On thread #2, our code was doing DB stuff (lock) / log stuff (lock)
</li>
</ul>
<p>
If these things happened close together enough under heavy load, this resulted in -- you guessed it -- a classic out-of-order deadlock scenario. I'm not sure you'd ever see it on a lightly loaded app, but on our website it happened about once a day on average.
</p>
<p>
I don't blame log4net for this, I blame our crappy code. We spent days troubleshooting these deadlocks by .. wait for it .. <b>adding more logging!</b> Which naturally made the problem worse and even harder to figure out. We eventually were forced to <a href="http://blogs.msdn.com/tess/archive/2008/05/21/debugdiag-1-1-or-windbg-which-one-should-i-use-and-how-do-i-gather-memory-dumps.aspx">take memory dumps</a> and use dump analysis tools. With the generous assistance of <a href="http://samuraiprogrammer.com/community/Default.aspx">Greg Varveris</a>, we were finally able to identify the culprit: our logging strategy. How ironic. And I mean <i>real</i> irony, <a href="http://www.youtube.com/watch?v=nT1TVSTkAXg">not the fake Alanis Morrissette kind</a>.
</p>
<p>
Although I am a strong believer in logging exceptions, I've never been a particularly big fan of logging in the general "let's log everything we possibly can" sense:
</p>
<p>
</p>
<ol>
<li>
<b>Logging means more code</b>. If you're using a traditional logging framework like log4net, every logged event is at least one additional line of code. The more you log, the larger your code grows. This is a serious problem, because <a href="http://www.codinghorror.com/blog/archives/000878.html">code is the enemy</a>. Visible logging code is clutter -- <a href="http://www.codinghorror.com/blog/archives/001150.html">like excessive comments</a>, it actively obscures the code that's doing the real work in the application. <br><br>
</li>
<li>
<b>Logging isn't free.</b> Most logging frameworks are fairly efficient, but they aren't infinitely fast. Every log row you write to disk has an overall performance cost on your application. This can also be tricky if you're dissecting complex objects to place them in the log; that takes additional time.<br><br>
</li>
<li>
<b>If it's worth saving to a logfile, it's worth showing in the user interface</b>. This is the paradox: if the information you're logging is at all valuable, it deserves to be surfaced in the application itself, not buried in an anonymous logfile somewhere. Even if it's just for administrators. Logfiles are all too often where useful data goes to die, alone, unloved and ignored. <br><br>
</li>
<li>
<b>The more you log, the less you can find.</b> Log enough things and eventually your logs are so noisy nobody can find anything. It's all too easy to bury yourself in an avalanche of log data. Heck, that's the default: any given computer is perfectly capable of generating more log data than any of us could possibly deal with in our lifetime. The hidden expense here isn't the logging, it's the brainpower needed to make sense of these giant logs. I don't care how awesome your log parsing tools are, nobody looks forward to mining a gigabyte of log files for useful diagnostic information. <br><br>
</li>
<li>
<b>The logfile that cried Wolf.</b> Good luck getting everyone on your team to agree on the exact definitions of FATAL, ERROR, DEBUG, INFO, and whatever other logging levels you have defined. If you decide to log only the most heinous serial-killer mass-murderer type problems, evil has a lot less room to lurk in your logfiles -- and it'll be a heck of a lot less boring when you <i>do</i> look.
</li>
</ol>
<p>
So <b>is logging a giant waste of time?</b> I'm sure some people will read about this far and draw that conclusion, no matter what else I write. I am not anti-logging. I am anti-<i>abusive</i>-logging. Like any other tool in your toolkit, when used properly and appropriately, it can help you create better programs. The problem with logging isn't the logging, per se -- it's the seductive OCD "just one more bit of data in the log" trap that programmers fall into when <i>implementing</i> logging. Logging gets a bad name because it's so often abused. It's a shame to end up with all this extra code generating volumes and volumes of logs that aren't helping anyone.
</p>
<p>
We've since removed all logging from Stack Overflow, relying exclusively on exception logging. Honestly, I don't miss it at all. I can't even think of a <i>single</i> time since then that I'd wished I'd had a giant verbose logfile to help me diagnose a problem.
</p>
<p>
When it comes to logging, the right answer is not "yes, always, and as much as possible." <b>Resist the tendency to log everything.</b> Start small and simple, logging only the most obvious and critical of errors. Add (or ideally, inject) more logging only as demonstrated by specific, verifiable needs.
</p>
<p>
If you aren't careful, those individual log entries, as wafer thin as they might be, have a disturbing tendency to make your logs <a href="http://www.youtube.com/results?search_query=mr+creosote">end up like the unfortunate Mr. Creosote</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-12-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-problem-with-logging/</guid>
</item>
</channel>
</rss>
