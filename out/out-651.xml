<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Getting the Most Out of PNG</title>
<link>https://blog.codinghorror.com/getting-the-most-out-of-png/</link>
<content>
                <!--kg-card-begin: markdown--><p>When it comes to image formats on the internet, it's generally a three-way tie between <a href="http://en.wikipedia.org/wiki/JPEG">JPEG</a>, <a href="http://en.wikipedia.org/wiki/GIF">GIF</a>, and <a href="http://en.wikipedia.org/wiki/PNG">PNG</a>. Deciding which image format to use is relatively straightforward; you choose lossy JPEG when you're saving continuous-tone photographic images, and you choose between lossless GIF or lossless PNG when you're saving images with large blocks of the same or similar colors. <a href="http://blog.codinghorror.com/screenshots-jpeg-vs-gif/">See my comparison of GIF/PNG and JPEG</a> if you're not clear on what the difference is. But the choice between GIF and PNG is no contest. PNG is a more modern and vastly improved version of GIF that (almost) completely obsoletes it. <b>You should <i>always</i> choose PNG over GIF</b>, except in the following two circumstances:</p>
<ul>
<li>You want an animated graphic. PNG doesn't support animation. GIF does.</li>
<li>Your image is <em>extremely</em> small, on the order of a few hundred bytes. In my experience, GIF filesizes are smaller in this scenario.</li>
</ul>
<p>In every other way, PNG is the natural heir to GIF. It's copyright-free, it can store all bit depths, it can represent alpha channels, and it offers more efficient compression. But as great as PNG is, there are a few things you should know about PNG to get the most out of it.</p>
<p>Let's start with a representative image. I took a quick screenshot of this website, along with all the browser chrome, transparency, and shadows.  ClearType font rendering is on, and there's a nice mix of text, graphics, and UI. It's a perfect candidate for the lossless PNG file format, because there are large areas of the same colors and hard transitions between them. We want nice, crisp transitions between the white and dark areas of the screenshot.</p>
<img alt="small screenshot of Coding Horror in IE7" height="378" src="https://blog.codinghorror.com/content/images/uploads/2007/03/6a0120a85dcdae970b0128776fffd9970c-pi.png" width="493">
<p>The actual size of the screenshot is 1233 x 946. When I save this file directly from Paint Shop Pro as a 24-bit PNG file, I get the following file sizes:</p>
<table width="300">
<tr>
<td>PNG, interlaced</td>
<td align="right">288 KB</td>
</tr>
<tr>
<td>PNG, non-interlaced</td>
<td align="right">212 KB</td>
</tr>
</table>
<p>So here's our first lesson: <b>never save interlaced PNG files</b>.</p>
<ul>
<li>Interlaced PNGs are 35% larger for the single purpose of <a href="http://blog.codinghorror.com/progressive-image-rendering/">progressive rendering</a>.</li>
<li>Progressive rendering is confusing; the image gets less and less blurry over time. As <a href="http://philip.greenspun.com/panda/images">Philip Greenspun so aptly pointed out</a>, readers can't tell when an image is "done".</li>
<li>Standard PNGs have a perfectly acceptable progressive rendering solution without interlacing. They render in obvious and simple fashion, from top to bottom.</li>
</ul>
<p>212 KB is an impressively small filesize for such a large and detailed image. It's a testament to the efficiency of the PNG image format. But we can do better. If we run <a href="http://advsys.net/ken/utils.htm#pngout">Ken Silverman's PNGOUT</a>* on the files, we can crunch them down even smaller:</p>
<table width="300">
<tr>
<td>PNG, interlaced</td>
<td align="right">190 KB</td>
</tr>
<tr>
<td>PNG, non-interlaced</td>
<td align="right">190 KB</td>
</tr>
</table>
<p>First, note that PNGOUT strips out any interlacing. If you have interlaced PNG images, you can expect a very substantial reduction in file size. But even without interlacing, PNGOUT reduces the file size by 22 KB, or nearly 10 percent. I know it doesn't sound like much, but PNG is by definition lossless compression. JPEG is lossy, so as file sizes decrease, <a href="http://blog.codinghorror.com/a-comparison-of-jpeg-compression-levels-and-recompression/">more and more of the image is lost</a>. With PNG, we haven't lost any detail in our images, we've just made them smaller. Folks, <b>this is free bandwidth!</b> It doesn't get much better than that.</p>
<p>To see how effective PNGOUT really is, I ran it on a subset of my /images folder. The trick here is that these images are <i>already</i> optimized; I run <a href="http://optipng.sourceforge.net/">OptiPNG</a> on every file in this folder periodically.</p>
<table width="350">
<tr>
<td></td>
<td align="right">OptiPNG</td>
<td align="right">PNGOUT</td>
</tr>
<tr>
<td>267 PNG files</td>
<td align="right">4.40 MB</td>
<td align="right">4.04 MB</td>
</tr>
</table>
<p>It took a while to run, but we get a further 9% reduction in PNG image size beyond what OptiPNG could do. How is this possible?</p>
<p>I thought the name <a href="http://en.wikipedia.org/wiki/Ken_Silverman">Ken Silverman</a> sounded familiar. Ken, the author of PNGOUT, is the wunderkind behind the original <a href="http://en.wikipedia.org/wiki/Duke_Nukem_3D">Duke Nukem 3D</a> build <a href="http://advsys.net/ken/build.htm">rendering engine</a>, which he wrote at the age of 18.</p>
<img alt="Duke Nukem: always bet on Duke" border="0" height="338" src="https://blog.codinghorror.com/content/images/uploads/2007/03/6a0120a85dcdae970b0128776ffffe970c-pi.jpg" width="372">
<p>Ken is so good, even <a href="http://en.wikipedia.org/wiki/John_Carmack">John Carmack</a> – the author of Doom and Quake, who is widely regarded as a programming god – <a href="http://advsys.net/ken/carmken.htm">respects him</a>. No wonder his little PNG optimizer decimates all the other ones. Always bet on Duke.</p>
<p><b>If you're running a website of any size, and you use PNG images in any quantity, you should <a href="http://advsys.net/ken/utils.htm">run them through PNGOUT</a> to reduce their size.</b> PNGOUT can also convert your existing GIF images to the superior PNG format along the way. And it's so easy to do; here's the Windows command prompt syntax to optimize all PNG images in a folder:</p>
<pre>
for %i in (*.png) do pngout "%i" /y
</pre>
<p>The PNGOUT optimization process isn't particularly speedy, but it hardly matters. This one-time optimization could reduce your image bandwidth usage from 10 to 30 percent. That's an offer I can't refuse.</p>
<p>(* thanks to Kevin Breitenstein for pointing this out to me)</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-03-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/getting-the-most-out-of-png/</guid>
</item>
</channel>
</rss>
