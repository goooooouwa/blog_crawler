<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Was The Windows Registry a Good Idea?</title>
<link>https://blog.codinghorror.com/was-the-windows-registry-a-good-idea/</link>
<content>
                <!--kg-card-begin: markdown--><p>One of the hot new features introduced with Windows 95 was the <a href="http://en.wikipedia.org/wiki/Windows_Registry">Windows Registry</a>. The Windows Registry offered a centralized database-like location to store application and system settings. No more plain text .INI files splattered all over your system. Instead, issue a few easy API calls and your application settings are safely nestled away deep inside the registry hive.</p>
<p>But after living with the Windows Registry for more than a decade, <strong>I'm starting to wonder if we were better off with those .INI files</strong>.</p>
<p><img class="at-xid-6a0120a85dcdae970b012877700d3d970c" src="https://blog.codinghorror.com/content/images/uploads/2007/08/6a0120a85dcdae970b012877700d3d970c-pi.png" border="0" alt="Windows Registry Editor, [X]" width="678" height="411"></p>
<p>I understand the need to store truly system-wide settings in one place. Let the operating system store settings however it deems fit. The real problem with the registry is that it was exposed to the outside world. Instead of being a secure, central hive for only the most essential and global settings, over time the registry has slowly become <strong>a trash heap of miscellaneous junk settings for every rinky-dink application on the planet</strong>.</p>
<p>Woe to the poor computer user who naively attempts to manipulate the filesystem without first supplicating to the Registry Gods. Manipulating the filesystem is utterly obvious, completely intuitive, and unfortunately also the fastest way to break an application in Windows. You have to reconcile almost everything you do in the filesystem with that opaque, unforgiving binary blob of data known as the Windows Registry.</p>
<p>For instance, when I upgrade and reinstall Windows, most of the games I have installed on my secondary drive are instantly broken because they store cd-key and (redundant) path information in the registry. The game vendors' support teams will tell you to reinstall all your games and patches. Personally, I'd rather search forums and spelunk through the registry to manually recreate the two or three registry keys the game is looking for.</p>
<p>My life would be a heck of a lot easier if per-application settings were stored in a place I could easily see them, manipulate them, and back them up. Like, say... in INI files.</p>
<p>There is an alternative, though. If Windows applications weren't so busy mindlessly piling all their settings on the registry garbage dump with everyone else, they <em>could</em> elect to follow the new, much saner Windows Vista conventions for storing application-specific data:</p>
<pre>/Users/Jeff/AppData/Local
/Users/Jeff/AppData/LocalLow
/Users/Jeff/AppData/Roaming
</pre>
<p><strong>Local</strong> and <strong>LocalLow</strong> are for bits of application data that are truly machine-specific. <strong>Roaming</strong> is for non-machine specific settings that will follow the user. That's where the lion's share of the application settings will be. It's all explained in the <a href="http://download.microsoft.com/download/3/b/a/3ba6d659-6e39-4cd7-b3a2-9c96482f5353/Managing%20Roaming%20User%20Data%20Deployment%20Guide.doc">Roaming User Data Deployment Guide</a> (Word doc). However, these are still user-specific settings, obviously, as they're under the <code>/Users</code> folder. I can't find any new Windows filesystem convention for system level, non-user-specific settings. I suppose that's still Ye Olde Registry by default.</p>
<p>It is possible to write Windows applications that don't use the registry in any way. These are some of my favorite applications. But they're also the most rare and precious of all applications in the Windows software ecosystem.</p>
<p>Over time, it's fair to say that <strong>I've grown to hate the Windows Registry</strong>. How do I hate it? <a href="http://en.wikipedia.org/wiki/Windows_Registry#Disadvantages">Let me count the ways</a>:</p>
<ul>
<li>The registry is a <strong>single point of failure</strong>. That's why every single registry editing tip you'll ever find starts with a <span style="color: red;">big fat screaming disclaimer about how you can break your computer with regedit</span>.
</li>
<li>The registry is <strong>opaque and binary</strong>. As much as I dislike <a href="http://www.codinghorror.com/blog/archives/000647.html">the angle bracket tax</a>, at least XML config files are reasonably human-readable, and they allow as many comments as you see fit.
</li>
<li>The registry has to be <strong>in sync with the filesystem</strong>. Delete an application without "uninstalling" it and you're left with stale registry cruft. Or if an app has a poorly written uninstaller. The filesystem is no longer the statement of record-- it has to be kept in sync with the registry somehow. It's a total violation of <a href="http://www.codinghorror.com/blog/archives/000805.html">the DRY principle</a>.
</li>
<li>The registry is <strong>monolithic</strong>. Let's say you wanted to move an application to a different path on your machine, or even to a different machine altogether. Good luck extracting the relevant settings for that one particular application from the giant registry <a href="http://www.codinghorror.com/blog/archives/000719.html">tarball</a>. A given application typically has dozens of settings strewn all over the registry. </li>
</ul>
<p>What's depressing about all of this is how prescient the UNIX conventions are in retrospect. How many billions of man-hours could we have saved by now if some early Windows NT 3.0 or 3.5 developers had decided to turn off public access to the registry, and transparently redirected the public registry API calls so they followed simpler, UNIX-like filesystem storage conventions instead?</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-08-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/was-the-windows-registry-a-good-idea/</guid>
</item>
</channel>
</rss>
