<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Unbreakable Links Revisited</title>
<link>https://blog.codinghorror.com/unbreakable-links-revisited/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://blog.outer-court.com/">Philipp Lenssen</a> pointed out that my concept of <a href="http://www.codinghorror.com/blog/archives/000062.html">Unbreakable Links</a> is, unsurprisingly, not a new one. It's also known as
</p>
<ul>
<li>
<a href="http://blog.outer-court.com/memomarker/">Memomark</a>
</li>
<li>
<a href="http://www.hyperorg.com/blogger/mtarchive/000072.html">Google URL</a>
</li>
<li>
<a href="http://irish.typepad.com/glossary/2004/08/googlenym.html">Googlenym</a>
</li>
<li>
<a href="http://www.dlib.org/dlib/july00/wilensky/07wilensky.html">Robust Hyperlinks</a>
</li>
</ul>
<p>
All of these terms really refer to the same thing: <b>using a search engine to build an unique URL</b>. However, there are some not-so-obvious problems you'll encounter when building links this way. To work around the problems, the <b>Robust Hyperlinks</b> paper proposes using a combination of techniques:
</p>
<p>
</p>
<blockquote><i>
<ol>
<li>A Unique Identifier (UID) is a name unique within the document, as per ID attributes in SGML/XML. These survive the most violent document changes, except its own deletion.
<p>
</p>
</li>
<li>A Tree Walk describes the path from the root of the document, through internal structural nodes, to a point within media content at a leaf.
<p>
In practice, tree walks are the central component of robust locations. Since tree walks incrementally refine the structural position in the document as the walk proceeds from root to leaf, they are robust to deletions of content that defeat unique ID and context locations. Thus, tree walks are especially helpful for documents such as those that transclude dynamic content, as with stock quotes, where the content itself changes while the structural position remains constant.
</p>
<p>
We describe tree walks with a sequence of node child numbers and associated node tags (generic identifiers), terminating with an offset into a media element. This is both a simpler, less expressive, and more redundant, representation than is allowed by XPointer. For example, consider the following tree walk into a particular HTML document:
</p>
<p>
21/Professor/8 0/<text> 0/ADDRESS 1/H3 0/BODY 0/HTML
<p>
</p>
<li>Context is a small amount of previous and following information from the document tree. We propose a context record containing a sequence of document content prior to the location, and a sequence of document content following the location. For example, for the location described by the tree walk above, let us suppose the word "Professor" is found in a sentence fragment that reads "congratulations on her promotion to Professor in the Computer Science Division". The context descriptor could be:
<p>
her+promotion+to+Professo r+in+the+Computer+Science
</p>
<p>
</p>
</li></text></p>
</li>
</ol></i></blockquote>
<p>
They also propose appending this information to the URL in a querystring-- so you have both an absolute link and a relative fallback:
</p>
<blockquote>
<i>
Given that lexical signatures are a good way to augment URLs, we are left with the issue of how to associate these with hyperlinks. Our primary requirement is that the solution fit into the existing Web infrastructure moderately well. Our proposal is to append a signature to a URL as if it were a query term. That is, if the URL is http://www.something.com/a/b/c, and the designated resource has the signature w1,...,w5, then the robust URL is
</i><p>
http://www.something.com/a/b/c?lexical-signature="w1+w2+w3+w4+w5"
</p>
</blockquote>
<p>
I do think, at some point in the future, <b>all links will be constructed this way</b>. The existing absolute link system breaks down over time, and I think it's fairly obvious by now that absolute keyword search is the most effective navigation metaphor for the web. My apologies to <a href="http://docs.yahoo.com/info/misc/history.html">Yet Another Hierarchically Organized Oracle</a>, but that style of tree-based directory navigation was always driven by the lack of a competent search engine, not actual choice.
</p>
<p>
Try building your own unbreakable link with <a href="http://www.codinghorror.com/linktron5k/">The Incredible LinkTron 5000(tm)!</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-08-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/unbreakable-links-revisited/</guid>
</item>
</channel>
</rss>
