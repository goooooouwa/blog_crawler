<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Equipping our ASCII Armor</title>
<link>https://blog.codinghorror.com/equipping-our-ascii-armor/</link>
<content>
                <!--kg-card-begin: markdown--><p>
On one of our e-commerce web sites, we needed a unique transaction ID to pass to a third party reporting tool on the checkout pages. We already had a GUID on the page for internal use. And you know <a href="http://www.codinghorror.com/blog/archives/000399.html">how much we love GUIDs</a>!
</p>
<p>
</p>
<pre><span style="color:red">22da5537-de54-459d-9b33-f40f2101143b</span></pre>
<p>
A GUID is 128 bits, or 16 bytes. And the third party can accept 20 bytes.
</p>
<p>
This seems workable until you realize that those 20 bytes have to be represented as a plain text string to be transmitted via HTTP in a form post or querystring.
</p>
<p>
So the question is, <b>how do we represent a 128-bit integer in a plain text string that fits in 20 characters?</b> In other words, we need to <a href="http://en.wikipedia.org/wiki/ASCII_Armor">equip our ASCII Armor</a>.
</p>
<p>
There's a <b>Guid.ToByteArray()</b> method which returns an array of 16 bytes (0-255). So we could just use ASCII values 0-255 to represent each byte, right? But wait a minute. ASCII 13 is carriage return! And good luck sending ASCII 0 (aka null) to anyone. Hmm.
</p>
<p>
We're forced to use only <a href="http://web.cs.mun.ca/~michael/c/ascii-table.html">printable ASCII characters</a>. Which means we'll have to use more bytes to represent the same data; it's unavoidable. Let's experiment with a few forms of ASCII armor and see how close we can get.
</p>
<p>
A <b>Hex encoded</b> GUID..
</p>
<p>
</p>
<pre>Dim g As Guid = Guid.NewGuid
Dim sb As New Text.StringBuilder
For Each b As Byte In g.ToByteArray
sb.Append(String.Format("{0:X2}", b))
Next
Console.WriteLine(sb.ToString)
</pre>
<p>
..  uses ASCII values 0-9, A-F and results in a <b>32 byte</b> string:
</p>
<p>
</p>
<pre><span style="color:red">EBB7EF914C29A6459A34EDCB61EB8C8F</span></pre>
<p>
A <b><a href="http://www.codeproject.com/dotnet/TextCoDec.asp">UUEncoded</a></b> GUID..
</p>
<p>
</p>
<pre>Dim u As New UUEncode
Dim g As Guid = Guid.NewGuid
Dim s As String
s = u.Encode(g.ToByteArray)
Console.WriteLine(s)
</pre>
<p>
.. uses ASCII values 32-95 (decimal) and results in a <b>25 byte</b> string:
</p>
<p>
</p>
<pre><span style="color:red">0@-_;,9X-@D2BTV!0V$/TP``</span></pre>
<p>
A <b><a href="http://en.wikipedia.org/wiki/Base64">Base64 encoded</a></b> GUID..
</p>
<p>
</p>
<pre>Dim g As Guid = Guid.NewGuid
Dim s As String
s = Convert.ToBase64String(g.ToByteArray)
Console.WriteLine(s)
</pre>
<p>
.. uses ASCII values a-z, A-Z, 0-9 and results in a <b>22 byte</b>* string:
</p>
<p>
</p>
<pre><span style="color:red">7v26IM9P2kmVepd7ZxuXyQ==</span></pre>
<p>
An <b><a href="http://en.wikipedia.org/wiki/Ascii85">ASCII85 encoded</a></b> GUID...
</p>
<p>
</p>
<pre>Dim a As New Ascii85
Dim g As Guid = Guid.NewGuid
Dim s As String
s = a.Encode(g.ToByteArray)
Console.WriteLine(s)
</pre>
<p>
.. uses ASCII values 33-118 (decimal) and results in a <b>20 byte</b> string:
</p>
<p>
</p>
<pre><span style="color:red">[Rb*hlkkXVW+q4s(YSF0</span></pre>
<p>
So it <u>is</u> possible to fit a complete GUID in 20 printable ASCII characters using the latest and greatest <a href="http://en.wikipedia.org/wiki/ASCII_Armor">ASCII Armor</a>. But just barely!
</p>
<p>
In the process of writing this entry, I couldn't find any C# or VB.NET implementions of <a href="http://en.wikipedia.org/wiki/Ascii85">ASCII85</a>, so I wrote one. I'll have source code up for that shortly.
</p>
<p>
* The trailing "==" in Base64 is an end of line marker and should not count towards the character total.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-10-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/equipping-our-ascii-armor/</guid>
</item>
</channel>
</rss>
