<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Greatest Invention in Computer Science</title>
<link>https://blog.codinghorror.com/the-greatest-invention-in-computer-science/</link>
<content>
                <!--kg-card-begin: markdown--><p>
What do you think the single greatest invention in computer science is? Besides the computer itself, I mean.
</p>
<p>
Seriously, before reading any further, pause here for a moment and consider the question.
</p>
<p>
I've talked before about <a href="http://www.codinghorror.com/blog/archives/000686.html">how young so-called modern computer programming languages really are</a>, and it bears repeating for context.
</p>
<p>
</p>
<blockquote>
<p>
C is roughly as old as I am; FORTRAN is as old as my parents. But what about the new kids on the block? The TIOBE software <a href="http://www.tiobe.com/tpci.htm">TCPI metrics page</a> provides some data on language popularity going back to the year 2001. Consider the tender age of many of the newest, hippest programming languages:
</p>
<p>
</p>
<ul>
<li>
<a href="http://en.wikipedia.org/wiki/Perl">Perl</a> (1987)
</li>
<li>
<a href="http://en.wikipedia.org/wiki/Python_programming_language">Python</a> (1991)
</li>
<li>
<a href="http://en.wikipedia.org/wiki/Erlang_programming_language">Erlang</a> (1991)
</li>
<li>
<a href="http://en.wikipedia.org/wiki/Ruby_programming_language">Ruby</a> (1993)
</li>
<li>
<a href="http://en.wikipedia.org/wiki/Java_programming_language">Java</a> (1995)
</li>
<li>
<a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript</a> (1995)
</li>
<li>
<a href="http://en.wikipedia.org/wiki/PHP">PHP</a> (1995)
</li>
</ul>
<p>
Ruby is barely a teenager. JavaScript and PHP haven't even <i>hit</i> their teens yet.
</p>
</blockquote>
<p>
For all our talk about fancy new programming language features, I sometimes think we forget the one fundamental building block underlying all of them: the humble routine. Take it from Steve McConnell, who urges us to <a href="http://stevemcconnell.com/ieeesoftware/bp16.htm">Use Routines, Routinely</a>:
</p>
<p>
</p>
<blockquote>
Aside from the invention of the computer, <b>the routine is arguably the single greatest invention in computer science</b>. It makes programs easier to read and understand. It makes them smaller (imagine how much larger your code would be if you had to repeat the code for every call to a routine instead of invoking the routine). And it makes them faster (imagine how hard it would be to make performance improvements in similar code used in a dozen places rather than making all the performance improvements in one routine). In large part, <b>routines are what make modern programming possible.</b>
</blockquote>
<p>
If you're not old enough to remember life before routines, I thought James Shore had a great example of the stark difference in his excellent article <a href="http://jamesshore.com/Articles/Quality-With-a-Name.html">Quality With a Name</a>:
</p>
<p>
Before structured programming:
</p>
<p>
</p>
<pre>
1000 NS% = (80 - LEN(T$)) / 2
1010 S$ = ""
1020 IF NS% = 0 GOTO 1060
1030 S$ = S$ + " "
1040 NS% = NS% - 1
1050 GOTO 1020
1060 PRINT S$ + T$
1070 RETURN
</pre>
<p>
After structured programming:
</p>
<p>
</p>
<pre>
public void PrintCenteredString(string text) {
int center = (80 - text.Length) / 2;
string spaces = "";
for (int i = 0; i &lt; center; i++) {
spaces += " ";
}
Print(spaces + text);
}
</pre>
<p>
The humble routine is the backbone of all programming in any modern language. I'm sure you're the very model of a modern programmer, so I won't bore you with a long explanation of why routines are a good idea. <a href="http://stevemcconnell.com/ieeesoftware/bp16.htm">The original 1998 IEEE McConnell article</a> covers the rationales behind routines quite well. There's also a greatly expanded version of that material in Chapter 7 of <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete 2</a>.
</p>
<p>
Routines are so fundamental to today's programming that they are essentially invisible. <b>That's the problem with routines: they only take a minute to learn, but a lifetime to master.</b> If bad unstructured programming was possible, so is bad structured programming. <a href="http://www.codinghorror.com/blog/archives/000272.html">You can write FORTRAN in any language.</a> Wrestling with the ineffable essence of a routine is, almost to a first approximation, what programming now <i>is</i>:
</p>
<p>
</p>
<ul>
<li>How long should this routine be? How long is too long? How short is too short? When is code "too simple" to be in a routine?
</li>
<li>What parameters should be passed to this routine? What data structures or data types? In what order? How will they be used? Which will be modified as a result of the routine?
</li>
<li>What's a good name for this routine? Naming is hard. <a href="http://www.codinghorror.com/blog/archives/000553.html">Really hard</a>.
</li>
<li>How is this routine related to other nearby routines? Do they happen at the same time, or in the same order? Do they share common data? Do they really belong together? What order should they be in?
</li>
<li>How will I know if the code in this routine succeeded? Should it return a success or error code? How will exceptions, problems, and error conditions be handled?
</li>
<li>Should this routine <i>even exist at all?</i>
</li>
</ul>
<p>
Good programmers -- regardless of whatever language they happen to be working in -- understand the importance of crafting each routine with <a href="http://secretgeek.net/upsert_revisited.asp">the utmost care</a>. The routines in your code should be treated like tiny, highly polished diamonds, each one more exquisitely polished and finely cut than the last.
</p>
<p>
I'll grant you this isn't a particularly deep insight. It's not even original advice. But if you believe, as I do, in constantly <a href="http://www.codinghorror.com/blog/archives/000549.html">practicing the fundamentals</a>, <b>you'll never stop mastering the art of writing the perfect routine.</b>
</p>
<p>
It is, after all, the single greatest invention in computer science.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-06-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-greatest-invention-in-computer-science/</guid>
</item>
</channel>
</rss>
