<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>I Repeat: Do Not Listen to Your Users</title>
<link>https://blog.codinghorror.com/i-repeat-do-not-listen-to-your-users/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Paul Buchheit on
<a href="http://paulbuchheit.blogspot.com/2008/02/most-import-thing-to-understand-about.html">listening to users</a>:
</p>
<p>
</p>
<blockquote>
I wrote the first version of Gmail in one day. It was not very impressive. All I did was stuff my own email into the Google Groups (Usenet) indexing engine. I sent it out to a few people for feedback, and they said that it was somewhat useful, but it would be better if it searched over their email instead of mine. That was version two. After I released that people started wanting the ability to respond to email as well. That was version three. That process went on for a couple of years inside of Google before we released to the world.
<p>
Startups don't have hundreds of internal users, so it's important to release to the world much sooner. When <a href="http://friendfeed.com/">FriendFeed</a> was semi-released (private beta) in October, the product was only about two months old (and 99.9% written by two people, Bret and Jim). We've made a lot of improvements since then, and the product that we have today is much better than what we would have built had we not launched. The reason? <b>We have users, and we listen to them, and we see which things work and which don't.</b>
</p>
</blockquote>
<p>
Listening to users is a tricky thing. Users often don't know what they want, and even if they did, the <a href="http://www.codinghorror.com/blog/archives/001048.html">communication is likely to get garbled</a> somewhere between them and you. By no means should you <i>ignore</i> your users, though. Most people will silently and forever walk away if your software or website doesn't meet their needs. The users who care enough to give you feedback deserve your attention and respect. They're essentially taking it upon themselves to design your product. If you don't listen attentively and politely respond to all customer feedback, you're setting yourself up for eventual failure.
</p>
<p>
It's rude not to listen to your users. So how do we reconcile this with the first rule of usability-- <a href="http://www.useit.com/alertbox/20010805.html"><b>Don't Listen to Users</b>?</a>
</p>
<p>
</p>
<blockquote>
To discover which designs work best, watch users as they attempt to perform tasks with the user interface. This method is so simple that many people overlook it, assuming that there must be something more to usability testing. [It] boils down to the basic rules of usability:
<p>
</p>
<ul>
<li>Watch what people actually do.
</li>
<li>Do not believe what people <i>say</i> they do.
</li>
<li>Definitely don't believe what people predict they <i>may</i> do in the future.
</li>
</ul>
</blockquote>
<p>
I think Paul had it right, but it's easy to miss. The relevant phrase in Paul's post is <b>we see which things work</b>, which implies measurement and <i>correlation</i>. There's no need to directly watch users (although it never hurts) when you have detailed logs showing what they actually did. Collect user feedback, then correlate it with <a href="http://www.useit.com/alertbox/application-mistakes.html">data on what those users are actually doing</a>:
</p>
<p>
</p>
<blockquote>
Don't just implement feature requests from "user representatives" or "business analysts." The most common way to get usability wrong is to <b>listen to what users say rather than actually watching what they do.</b> Requirement specifications are always wrong. You must prototype the requirements quickly and show users something concrete to find out what they really need.
</blockquote>
<p>
Acting on user feedback alone is questionable. No matter how well intentioned, you're guessing. Why guess when you can take actions based on cold, hard data? Acting on user feedback <i>and</i> detailed usage metrics for your application or website-- that's the gold standard.
</p>
<p>
Consider Valve software's <a href="http://www.steampowered.com/status/survey.html">hardware survey</a>. A particularly vocal set of gamers might demand support for extremely high widescreen resolutions such as 1920 x 1200 or 2560 x 1600. Understandable, since they've spent a lot of money on high-end gaming rigs. But what resolutions do most people actually play at?
</p>
<p>
<a href="http://www.steampowered.com/status/survey.html"><img alt="Valve hardware survey, display resolution" border="0" class="at-xid-6a0120a85dcdae970b0120a86db8d5970b" height="209" src="https://blog.codinghorror.com/content/images/uploads/2008/02/6a0120a85dcdae970b0120a86db8d5970b-pi.png" width="433"></a>
</p>
<p>
Based on this survey of 1.3 million Steam users, about 10% of gamers have high resolution, widescreen displays. There are other reasons you might want to satisfy this request, of course. Those 10% tend to be the most dedicated, influential gamers. But having actual data behind your user feedback lets you vet the actions you take, to ensure that you're spending your development budget wisely. The last thing you want to do is fritter away valuable engineering time on features that almost nobody is using, and having usage data is how you tell the difference.
</p>
<p>
Valve also collects an exhaustive set of gameplay statistics for their games, such as <a href="http://en.wikipedia.org/wiki/Team_Fortress_2">Team Fortress 2</a>.
</p>
<p>
</p>
<blockquote>
We've traditionally relied on things like written feedback from players to help decide which improvements to focus on. More recently, Steam has allowed us to collect more information than was previously possible. TF2 includes a reporting mechanism which tells us details about how people are playing the game. We're <a href="http://steampowered.com/status/tf2/tf2_stats.php">sharing the data we collect</a> because we think people will find it interesting, and because we expect to spot emergent problems earlier, and ultimately build better products and experiences as a result.
</blockquote>
<p>
The very first graph, of <b>time played per class</b>, illustrates one problem with Team Fortress 2 in a way that I don't think any amount of player feedback ever could.
</p>
<p>
</p>
<table cellpadding="4" cellspacing="4" width="225">
<tr>
<td>Scout</td>
<td align="right">17.5%</td>
</tr>
<tr>
<td>Engineer</td>
<td align="right">17.3%</td>
</tr>
<tr>
<td>Soldier</td>
<td align="right">15%</td>
</tr>
<tr>
<td>Demoman</td>
<td align="right">10.5%</td>
</tr>
<tr>
<td>Sniper</td>
<td align="right">10.1%</td>
</tr>
<tr>
<td>Heavy</td>
<td align="right">8.5%</td>
</tr>
<tr>
<td>Spy</td>
<td align="right">8%</td>
</tr>
<tr>
<td>Pyro</td>
<td align="right">7%</td>
</tr>
<tr>
<td>Medic</td>
<td align="right"><font color="red">5.5%</font></td>
</tr>
</table>
<p>
The medic class is severely underrepresented in actual gameplay. I suppose this is because Medics don't engage in much direct combat, so they're not as exciting to play as, say, a Demoman or Soldier. That's unfortunate, because the healing abilities of the medic class are frequently critical to winning a round.  So what did Valve do? They released <a href="http://www.ubercharged.net/2008/01/29/new-medic-achievements-already-hidden-on-your-pc/">a giant set of medic-specific achievements</a> to encourage players to choose the Medic class more often. That's iterative game design based on actual, real world gameplay data.
</p>
<p>
Using detailed gameplay metrics to refine game design isn't new; <a href="http://www.wired.com/gaming/virtualworlds/magazine/15-09/ff_halo?currentPage=all">Bungie ran both Halo 2 and 3 through comprehensive usability lab tests</a>.
</p>
<p>
</p>
<blockquote>
<img alt="Halo 3 Valhalla death map" border="0" class="at-xid-6a0120a85dcdae970b0120a86db8f5970b" height="205" src="https://blog.codinghorror.com/content/images/uploads/2008/02/6a0120a85dcdae970b0120a86db8f5970b-pi.jpg" width="350">
<p>
In April, Bungie found a nagging problem with Valhalla, one of Halo 3's multiplayer levels: Player deaths (represented in dark red on this "heat map" of the level) were skewing toward the base on the left, indicating that forces invading from the right had a slight advantage. After reviewing this image, designers tweaked the terrain to give both armies an even chance.
</p>
</blockquote>
<p>
Again-- try to imagine how you'd figure out this fundamental map imbalance based on player feedback. I'm not sure if it's even possible.
</p>
<p>
<b>Make sure your application or website is capturing user activity in a useful, meaningful way</b>. User feedback is important. Don't get me wrong. But never take action <i>solely</i> based on user feedback. Always have some kind of user activity data to corroborate and support the valuable user feedback you're getting.  Ignoring your user feedback may be setting yourself up for eventual failure, but blindly acting on every user request is <i>certain</i> failure.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-02-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-repeat-do-not-listen-to-your-users/</guid>
</item>
</channel>
</rss>
