<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Hardware Assisted Brute Force Attacks: Still For Dummies</title>
<link>https://blog.codinghorror.com/hardware-assisted-brute-force-attacks-still-for-dummies/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Evidently <a href="http://technology.newscientist.com/article.ns?id=dn12825">hardware assisted brute force password cracking</a> has arrived:
</p>
<p>
</p>
<blockquote>
A technique for cracking computer passwords using inexpensive off-the-shelf computer graphics hardware is causing a stir in the computer security community.
<p>
Elcomsoft, a software company based in Moscow, Russia, has filed a US patent for the technique. It takes advantage of the "massively parallel processing" capabilities of a graphics processing unit (GPU) - the processor normally used to produce realistic graphics for video games.
</p>
<p>
Using an $800 graphics card from nVidia called the GeForce 8800 Ultra, Elcomsoft increased the speed of its password cracking by a factor of 25, according to the company's CEO, Vladimir Katalov. The toughest passwords, including those used to log in to a Windows Vista computer, would normally take months of continuous computer processing time to crack using a computer's central processing unit (CPU). By harnessing a $150 GPU - less powerful than the nVidia 8800 card - Elcomsoft says they can be cracked in just three to five days. Less complex passwords can be retrieved in minutes, rather than hours or days.
</p>
</blockquote>
<p>
GPUs, with their <a href="http://www.codinghorror.com/blog/archives/000732.html">massive built-in paralellism</a>, were <a href="http://www.codinghorror.com/blog/archives/000823.html">built to do things like this</a>. I'm encouraged that we're finally able to harness all that video silicon to do useful things beyond rendering Doom at 60 frames per second with anti-aliasing and <a href="http://www.codinghorror.com/blog/archives/000484.html">anisotropic filtering</a>.
</p>
<p>
There's a bit more detail on the elecom approach in their <a href="http://www.elcomsoft.com/EDPR/gpu_en.pdf">one-page PDF</a>. They provide actual numbers there.
</p>
<p>
</p>
<blockquote>
Using the "brute force" technique of recovering passwords, it was possible, though time-consuming, to recover passwords from popular applications. For example, the logon password for Windows Vista might be an eight-character  string composed of uppercase and lowercase alphabetic characters. There would about 55 trillion (52 to the eighth power) possible passwords. Windows Vista uses NTLM hashing by default, so using a modern dual-core PC you could test up to 10,000,000 passwords per second, and perform a complete analysis in about two months. <b>With ElcomSoft's new technology, the process would take only three to five days, depending upon the CPU and GPU</b>.
<p>
Preliminary tests using Elcomsoft Distributed Password Recovery show that <b>the [brute force password cracking] speed has increased by a factor of twenty, simply by hooking up with a $150 video card's onboard GPU</b>. ElcomSoft expects to find similar results as this new technology is incorporated into their password recovery products for Microsoft Office, PGP, and dozens of other popular applications.
</p>
</blockquote>
<p>
It's fun, and it makes for a <a href="http://www.pbs.org/wnet/insidelocalnews/behind_leads.html">shocking</a> "Password Cracking Supercomputers On Every Desktop Make Passwords Irrelevant" headline, but password cracking supercomputers on every desktop <i>doesn't</i> mean the end of password-protected civilization as we know it.  Let's do the math.
</p>
<p>
<b>How many passwords can we attempt per second?</b>
</p>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td>Dual Core CPU</td>
<td align="right">10,000,000</td>
</tr>
<tr>
<td>GPU</td>
<td align="right">200,000,000</td>
</tr>
</table>
<p>
<b>How many password combinations do we have to try?</b>
</p>
<p>
52<sup>8</sup> = 53,459,728,531,456
</p>
<p>
That's a lot of potential passwords. Let's stop playing Quake Wars for a few days and get cracking:
</p>
<p>
</p>
<pre>
53,459,728,531,456 /  10,000,000 pps / 60 / 60 / 24 = 61.9 days
53,459,728,531,456 / 200,000,000 pps / 60 / 60 / 24 =  3.1 days
</pre>
<p>
As promised by elecom, that works out to a little over <b>three days at the GPU crack rate</b>, and two months at the CPU crack rate. Oooh. Scary. Worried yet? If so, you shouldn't be. Watch what happens when I add four additional characters to the password:
</p>
<p>
</p>
<pre>
52<sup>12</sup> / 200,000,000 pps / 60 / 60 / 24 =  22,620,197 days
</pre>
<p>
For those of you keeping score at home, with a 12 character password this hardware assisted brute-force attack would take <b>61,973 years</b>. Even if we increased the brute force attack rate by <i>a factor of a thousand</i>, it would <i>still</i> take 62 years.
</p>
<p>
Elecom's idea of an 8 character password is awfully convenient, too. Only lowercase and uppercase letters, a total of 52 possible choices per character. Who has passwords without at least one number? <a href="http://www.schneier.com/blog/archives/2006/12/realworld_passw.html">Even MySpace users are smarter than that</a>. If you include a number in your 8 character password, or a non-alphanumeric character like "%", attack times increase substantially. Not enough to mitigate the potential attack completely, mind you, but you'd definitely put a serious dent in any brute forcing effort by switching out a character or two.
</p>
<p>
</p>
<pre>
62<sup>8</sup> / 200,000,000 pps / 60 / 60 / 24 =  13 days
72<sup>8</sup> / 200,000,000 pps / 60 / 60 / 24 =  42 days
</pre>
<p>
Personally, <a href="http://www.codinghorror.com/blog/archives/000342.html">I think it's easier to go with a pass phrase</a> than a bunch of random, difficult to remember gibberish characters as a password. Even if your pass phrase is in all lower-case-- a mere 26 possible characters -- that exponent is <i>incredibly</i> potent.
</p>
<p>
</p>
<pre>
26<sup>10</sup> / 200,000,000 pps / 60 / 60 / 24 =  8 days
26<sup>12</sup> / 200,000,000 pps / 60 / 60 / 24 =  15 years
26<sup>14</sup> / 200,000,000 pps / 60 / 60 / 24 =  10,228 years
</pre>
<p>
By the time you get to a mere 14 characters-- even if they're all lowercase letters-- you can pretty much forget about anyone brute forcing your password. Ever.
</p>
<p>
So what have we learned?
</p>
<p>
Brute force attacks, even fancy hardware-assisted brute force attacks, are <a href="http://www.codinghorror.com/blog/archives/000631.html">still for dummies</a>. If this is the best your attackers can do, they're too stupid to be dangerous. Brute forcing is almost always a waste of time, when <a href="http://www.codinghorror.com/blog/archives/000852.html">vastly more effective social vectors</a> and <a href="http://www.codinghorror.com/blog/archives/000949.html">superior technical approaches</a> are readily available.
</p>
<p>
<b>Hardware-assisted brute force attacks will never be a credible threat. But short, simple passwords are still dangerous.</b> <i>If</i> your password is only 8 alphabet characters, and <i>if</i> it's exposed in a way that allows brute force hardware assisted attack, you could be in trouble. All you need to do to sleep soundly at night (well, at least as far as brute force attacks are concerned) is choose a slightly longer password. It's much safer to think of your security in terms of passphrases instead of passwords. And unlike "secure" 8 character passwords, passphrases are easy to remember, too. Have you considered <a href="http://www.codinghorror.com/blog/archives/000360.html">helping me evangelize passphrases?</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-10-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/hardware-assisted-brute-force-attacks-still-for-dummies/</guid>
</item>
</channel>
</rss>
