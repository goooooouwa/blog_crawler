<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>I want my WSH.NET!</title>
<link>https://blog.codinghorror.com/i-want-my-wshnet/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Speaking of ghetto languages, when exactly is the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/vtoriMicrosoftWindowsScriptTechnologies.asp">Windows Script Host</a> going to be updated with a modern language-- like, say, .NET? <b>I want my WSH.NET!</b>
</p>
<p>
I still use WSH to write quick and dirty command line utilities that don't justify a full blown .NET console executable. Like UNIX shell scripts, there's a lot of power there for relatively little effort. And I don't have to fire up the VS.NET 2003 IDE to do it, either. Unfortunately, VBScript-- the shared script language of classic ASP and the Windows Scripting Host-- is rapidly being left behind in an increasingly .NET-centric world. The worst thing is, it's <i>just</i> similar enough to fool you into trying some VB.NET syntax, even though you know better.
</p>
<p>
It seems like a relatively simple exercise to build WSH.NET, and in fact, several third parties offer stopgaps that deliver script-alike execution of .NET code in plaintext files:
</p>
<ul>
<li>
<a href="http://www.alintex.com/products.aspx">Alintex Script .NET</a>
</li>
<li>
<a href="http://www.codeproject.com/dotnet/nscript.asp">NScript @ Code Project</a>
</li>
<li>
<a href="http://www.arcticlabs.com/documentation/dotnetscripthost/">ToolSack .NET Script Host</a>
</li>
<li>
<a href="http://www.dotnetframework.de/(wvcma52ktvclyyjb0kgwn0n2)/default2.aspx?start=http://www.dotnetframework.de/scripting/dotnetscripting/dsh.en.asp">DOTNET Scripting Host</a>
</li>
</ul>
However, <b>this isn't the same as a Microsoft blessing</b>. These little tools are all incompatible with each other, require an explicit installation step, and have quirks of their own. I have no idea why Microsoft hasn't stepped up to the plate with a proper WSH.NET implementation. I did find <a href="http://groups.google.com/groups?q=wsh.net&amp;hl=en&amp;lr=&amp;selm=ux2Q%24VyWBHA.1776%40tkmsftngp05&amp;rnum=1">this cryptic post</a> dated late 2001 by Andrew Clinick of Microsoft:
<p>
</p>
<blockquote>
<i>
WSH 5.x will remain with us for a long time to come (not least because it's
built into the operating system)  We are working on plans for WSH.NET but
don't have concrete info we can share at present.
</i><p>
To answer the question a bit more does .NET make WSH obsolete?  No.  It
would be great to use VB .NET and JScript .NET in WSH and that's something
we're working on but in the mean time having to compile exe's etc is more
difficult than just writing a script and running it.  We're working on
making that much simpler in WSH.NET
</p>
</blockquote>
<p>
Whatever those "plans" were, 3 years later, we're still waiting.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-10-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-want-my-wshnet/</guid>
</item>
</channel>
</rss>
