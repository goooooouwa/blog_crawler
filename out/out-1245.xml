<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Some Lessons From Forth</title>
<link>https://blog.codinghorror.com/some-lessons-from-forth/</link>
<content>
                <!--kg-card-begin: markdown--><p>It's easy to get caught up in the "newer is better" mindset of software development and forget that <a href="http://www.codinghorror.com/blog/archives/000189.html">ideas are more important than code</a>. Not everything we do is obsolete in four years. The <a href="http://www.forth.com/resources/evolution/evolve_1_2.html#1.2">Evolution of Forth</a>, which outlines Charles Moore's guiding principles in creating and implementing the <a href="http://en.wikipedia.org/wiki/Forth_programming_language">FORTH</a> language, is an excellent illustration of the timelessness of ancient computer wisdom:</p>
<ol>
<li>
<strong>Keep it simple</strong><br><p>As the number of capabilities you add to a program increases, the complexity of the program increases exponentially. The problem of maintaining compatibility among these capabilities, to say nothing of some sort of internal consistency in the program, can easily get out of hand. You can avoid this if you apply the Basic Principle. You may be acquainted with an operating system that ignored the Basic Principle. It is very hard to apply. All the pressures, internal and external, conspire to add features to your program. After all, it only takes a half-dozen instructions, so why not? The only opposing pressure is the Basic Principle, and if you ignore it, there is no opposing pressure.</p>
</li>
<li>
<strong>Do not speculate</strong><br><p>Do not put code in your program that might be used. Do not leave hooks on which you can hang extensions. The things you might want to do are infinite; that means that each has 0 probability of realization. If you need an extension later, you can code it later – and probably do a better job than if you did it now. And if someone else adds the extension, will he notice the hooks you left? Will you document this aspect of your program?</p>
</li>
<li>
<strong>Do it yourself</strong><br><p>The conventional approach, enforced to a greater or lesser extent, is that you shall use a standard subroutine. I say that you should write your own subroutines. Before you can write your own subroutines, you have to know how. This means, to be practical, that you have written it before; which makes it difficult to get started. But give it a try. After writing the same subroutine a dozen times on as many computers and languages, you'll be pretty good at it.</p>
</li>
</ol>
<p>I covered the first two points before in <a href="http://www.codinghorror.com/blog/archives/000111.html">KISS and YAGNI</a>. Point 3 is more subtle. It seems to fly in the face of <a href="http://www.artima.com/intv/dry.html">don't repeat yourself</a>, but what he's really saying – and I agree – is that <strong>you have to make your own mistakes to truly learn</strong>. There's a world of difference between someone explaining "you should always index your tables because it's a best practice", and having your app get progressively slower as records are added to the table.* You learn "why" a lot faster when you're actually experiencing it instead of passively reading about it.</p>
<p>Moore characterizes <strong>simplicity as a force that must be applied</strong> instead of a passive goal. And he's right – all too often, I see developers failing to make the hard choices necessary to keep their applications simple. It's easier to <a href="http://www.codinghorror.com/blog/archives/000109.html">just say yes</a> to everything.</p>
<p><small>* you laugh, but I've worked with developers who did this.</small></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/some-lessons-from-forth/</guid>
</item>
</channel>
</rss>
