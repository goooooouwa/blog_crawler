<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Shortening Long File Paths</title>
<link>https://blog.codinghorror.com/shortening-long-file-paths/</link>
<content>
                <!--kg-card-begin: markdown--><p>
We're working on a little shell utility that displays paths in a menu. Some of these paths can get rather long, so I cooked up this little regular expression to shorten them. It's a replacement, so you call it like this:
</p>
<p>
</p>
<p><font face="Monospace" size="-1">
<font color="Black"></font><font color="Navy">static</font><font color="Black"> </font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">PathShortener</font><font color="Black">(</font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">path</font><font color="Black">)<br>
{<br>
    </font><font color="Navy">const</font><font color="Black"> </font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">pattern</font><font color="Black"> = @"^(w+:|)([^]+[^]+).*([^]+[^]+)$";<br>
    </font><font color="Navy">const</font><font color="Black"> </font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">replacement</font><font color="Black"> = "$1$2...$3";<br>
    </font><font color="Navy">if</font><font color="Black"> (</font><font color="Olive">Regex</font><font color="Black">.</font><font color="Maroon">IsMatch</font><font color="Black">(</font><font color="Maroon">path</font><font color="Black">, </font><font color="Maroon">pattern</font><font color="Black">))<br>
    {<br>
        </font><font color="Navy">return</font><font color="Black"> </font><font color="Olive">Regex</font><font color="Black">.</font><font color="Maroon">Replace</font><font color="Black">(</font><font color="Maroon">path</font><font color="Black">, </font><font color="Maroon">pattern</font><font color="Black">, </font><font color="Maroon">replacement</font><font color="Black">);<br>
    }<br>
    </font><font color="Navy">else<br>
</font><font color="Black">    {<br>
        </font><font color="Navy">return</font><font color="Black"> </font><font color="Maroon">path</font><font color="Black">;<br>
    }          <br>
}</font>
</font></p>
<p>
So, for these paths:
</p>
<p>
</p>
<pre>
C:Documents and SettingsjatwoodMy DocumentsVisual Studio 2005SimpleEncryptionUnitTestsUnitTests.vb
wumpuspublicHilo DeliverablesHilo FinalIntroductionCodeIntroApp_Themescellphonephoto-small.jpg
</pre>
<p>
The result is:
</p>
<p>
</p>
<pre>
C:Documents and Settingsjatwood...UnitTestsUnitTests.vb
wumpuspublic...cellphonephoto-small.jpg
</pre>
<p>
The general strategy is to <b>keep the first two folders at the beginning, replace the middle with an ellipsis, and leave the final folder and filename on the end.</b>
</p>
<p>
After spending an hour dinking around with this and testing it on a bunch of paths, a colleague pointed me to the Windows API call <a href="http://www.pinvoke.net/default.aspx/shlwapi/PathCompactPathEx.html">PathCompactPathEx</a>, which (almost) does the same thing. Doh!
</p>
<p>
</p>
<p><font face="Monospace" size="-1">
[<font color="Olive">DllImport</font><font color="Black">("shlwapi.dll", </font><font color="Maroon">CharSet</font><font color="Black"> = </font><font color="Olive">CharSet</font><font color="Black">.</font><font color="Maroon">Auto</font><font color="Black">)]<br>
</font><font color="Navy">static</font><font color="Black"> </font><font color="Navy">extern</font><font color="Black"> </font><font color="Navy">bool</font><font color="Black"> </font><font color="Maroon">PathCompactPathEx</font><font color="Black">([</font><font color="Olive">Out</font><font color="Black">] </font><font color="Olive">StringBuilder</font><font color="Black"> </font><font color="Maroon">pszOut</font><font color="Black">, </font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">szPath</font><font color="Black">, </font><font color="Navy">int</font><font color="Black"> </font><font color="Maroon">cchMax</font><font color="Black">, </font><font color="Navy">int</font><font color="Black"> </font><font color="Maroon">dwFlags</font><font color="Black">);<br>
<br>
</font><font color="Navy">static</font><font color="Black"> </font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">PathShortener</font><font color="Black">(</font><font color="Navy">string</font><font color="Black"> </font><font color="Maroon">path</font><font color="Black">, </font><font color="Navy">int</font><font color="Black"> </font><font color="Maroon">length</font><font color="Black">)<br>
{<br>
    </font><font color="Olive">StringBuilder</font><font color="Black"> </font><font color="Maroon">sb</font><font color="Black"> = </font><font color="Navy">new</font><font color="Black"> </font><font color="Olive">StringBuilder</font><font color="Black">();<br>
    </font><font color="Maroon">PathCompactPathEx</font><font color="Black">(</font><font color="Maroon">sb</font><font color="Black">, </font><font color="Maroon">path</font><font color="Black">, </font><font color="Maroon">length</font><font color="Black">, 0);<br>
    </font><font color="Navy">return</font><font color="Black"> </font><font color="Maroon">sb</font><font color="Black">.</font><font color="Maroon">ToString</font><font color="Black">();<br>
}<br>
</font>
</font></p>
<p>
As you can see from <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/shlwapi/path/pathcompactpathex.asp">the API definition for PathCompactPathEx</a>, this works a little differently. It lets you set an absolute length for the path, and displays as many characters as it can with a "best fit" placement of the ellipsis. Here's the output for our two paths:
</p>
<p>
</p>
<pre>
C:Documents and Settingsjatwood...UnitTests.vb
wumpuspublicHilo Deliverab...photo-small.jpg
</pre>
<p>
So, which to choose? <b>CompactPathEx guarantees that the paths will always be exactly (x) characters while displaying as much as it can, but it may not be able to split cleanly.</b> My regex always splits cleanly, but makes no guarantees on length.
</p>
<p>
And obviously, if you're not running Windows, or if you don't care for p/invoke, the API call is clearly out.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-08-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/shortening-long-file-paths/</guid>
</item>
</channel>
</rss>
