<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Hardest Interview Puzzle Question Ever</title>
<link>https://blog.codinghorror.com/the-hardest-interview-puzzle-question-ever/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Have you ever been to an interview for a programming job where they <b>asked you one of those interview puzzle questions?</b> I have. The one I got was:
</p>
<p>
</p>
<blockquote>
How much of your favorite brand of soda is consumed in this state?
</blockquote>
<p>
And no, the correct answer is not <i>who cares</i>, unless the thing you don't care about is getting the job you're interviewing for. I didn't know it at the time, but this is a Fermi Question. (To prevent spoilers, the answer can be found in <a href="http://www.codinghorror.com/blog/archives/000627.html">a previous blog post</a>.)
</p>
<p>
Puzzle questions were all the rage in programming interviews in the 90s and early aughts. This is documented in the book <a href="http://www.amazon.com/dp/0316919160/?tag=codihorr-20">How Would You Move Mount Fuji?</a> with a specific emphasis on Microsoft's hiring practices.
</p>
<p>
<a href="http://www.amazon.com/dp/0316919160/?tag=codihorr-20"><img alt="How Would You Move Mount Fuji? Microsoft's Cult of the Puzzle - How the World's Smartest Company Selects the Most Creative Thinkers." class="at-xid-6a0120a85dcdae970b012877709983970c" height="450" src="https://blog.codinghorror.com/content/images/uploads/2009/03/6a0120a85dcdae970b012877709983970c-pi.png" style="border: 1px solid silver;" width="289"></a>
</p>
<p>
It is prudent to <a href="http://www.techinterview.org/">study common interview puzzle questions</a> if you know you'll be interviewing at a company that asks these sorts of questions. And if you think you're ace at programming puzzle questions, then I challenge you to point your massive brain at this, <a href="http://www.cartalk.com/content/read-on/2008/08.23.2.html">the hardest interview puzzle question ever</a>:
</p>
<p>
</p>
<blockquote>
A hundred prisoners are each locked in a room with three pirates, one of whom will walk the plank in the morning. Each prisoner has 10 bottles of wine, one of which has been poisoned; and each pirate has 12 coins, one of which is counterfeit and weighs either more or less than a genuine coin. In the room is a single switch, which the prisoner may either leave as it is, or flip. Before being led into the rooms, the prisoners are all made to wear either a red hat or a blue hat; they can see all the other prisoners' hats, but not their own. Meanwhile, a six-digit prime number of monkeys multiply until their digits reverse, then all have to get across a river using a canoe that can hold at most two monkeys at a time. But half the monkeys always lie and the other half always tell the truth. Given that the Nth prisoner knows that one of the monkeys doesn't know that a pirate doesn't know the product of two numbers between 1 and 100 without knowing that the N+1th prisoner has flipped the switch in his room or not after having determined which bottle of wine was poisoned and what color his hat is, what is the solution to this puzzle?
</blockquote>
<p>
In other words, <a href="http://www.codinghorror.com/blog/archives/000226.html">I hate puzzle questions</a>.*
</p>
<p>
</p>
<blockquote>
I'm also not a huge fan of those abstract impossible questions, eg, "how many optometrists are there in Seattle?", but I suppose that's a matter of taste. If you absolutely must, at least ask an impossible question that has some relevance to a problem your very real customers might encounter. <b>I just can't muster any enthusiasm for completely random arbitrary puzzles in the face of so many actual, real world problems.</b>
</blockquote>
<p>
And yes, I totally failed that interview. Which was disappointing, because it was kind of a cool job.
</p>
<p>
Not that <a href="http://www.codinghorror.com/blog/archives/000226.html">my proposal for interviewing programmers</a> was any more popular, though I do think it's much better.
</p>
<p>
</p>
<blockquote>
I have my own theory about the ideal way to interview developers: <b>have the candidate give a 10 minute watercooler presentation to your team on something they've worked on</b>. I think this is a far better indicator of success than a traditional interview. You'll quickly ascertain:
<p>
</p>
<ul>
<li>Is this person passionate about what they are doing?
</li>
<li>Can they communicate effectively to a small group?
</li>
<li>Do they have a good handle on their area of expertise?
</li>
<li>Would your team enjoy working with this person?
</li>
</ul>
</blockquote>
<p>
You'd certainly want to complement this type of interview with some actual hands on programming, to make sure the applicant isn't full of crap -- although I'm pretty sure that you can't B.S. your way through a technical presentation to a handful of your peers if you truly have no idea what you're talking about. (And if you can, you should be CEO of a startup by now.)
</p>
<p>
<b>What I'm optimizing for here is the ability to communicate</b>. Most programmers, once they <a href="http://www.codinghorror.com/blog/archives/000781.html">pass the FizzBuzz level of competency</a>, are decent enough. But coding chops aren't enough. To go from good to great, you must be able to communicate effectively: with your teammates, your manager, the users, and ultimately the world.
</p>
<p>
My wife and I just finished a five day hospital stay for <a href="http://www.codinghorror.com/blog/archives/001242.html">the birth of our first child</a>. During our stay, we were assisted by a parade of different nurses, at least two different nurses every day, sometimes more as we progressed to different areas of the hospital and through daily shift changes. The quality of care at this particular hospital is generally quite high, but we were flummoxed by the disparity in care between the <i>worst</i> nurses and the <i>best</i> nurses. After a few days, I finally figured out the common characteristic -- <b>the worst nurses were invariably the worst communicators!</b> The fact that these nurses couldn't effectively <i>communicate</i> with us:
</p>
<p>
</p>
<ul>
<li>why they needed to do something
</li>
<li>what the options were
</li>
<li>offer advice
</li>
<li>troubleshoot our problems
</li>
</ul>
Meant they ended up feeling like rigid, inflexible proceduralists who didn't care or constantly had to appeal to authority. Of course, this wasn't true. I'm sure they were perfectly competent registered nurses. But in the absence of reasonable communication, it sure <i>seemed</i> that way. To be fair, these nurses were frequently (but not always!) non-native English speakers.
<p>
Hiring is difficult under the best of conditions. But an interview process that relies too heavily on puzzle questions is risky. Sure, you may end up with programmers who can solve (or memorize, I guess) the absolute gnarliest puzzle questions you throw at them. But isn't <b>effectively communicating those solutions to the rest of the team</b> important, too? For many programmers, <i>that's</i> the hardest part of the puzzle.
</p>
<p>
*  although I expect aficionados of the style should be able to identify all the classic interview puzzle questions represented here.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-03-16T13:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-hardest-interview-puzzle-question-ever/</guid>
</item>
</channel>
</rss>
