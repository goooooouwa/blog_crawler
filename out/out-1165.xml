<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Give me parameterized SQL, or give me death</title>
<link>https://blog.codinghorror.com/give-me-parameterized-sql-or-give-me-death/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I have fairly strong feelings when it comes to the <a href="http://www.codinghorror.com/blog/archives/000117.html">stored procedures versus dynamic SQL argument</a>, but one thing is clear: you should never, ever use concatenated SQL strings in your applications. <b>Give me parameterized SQL, or give me death.</b> There are two good reasons you should never do this.
</p>
<p>
First, consider this naive concatenated SQL:
</p>
<p>
</p>
<pre>
SELECT email, passwd, login_id, full_name
FROM members
WHERE email = '<span style="color:red;">x</span>';
</pre>
<p>
Code like this <b>opens your app to SQL injection attacks</b>, and it's a huge, gaping vulnerability. Steve Friedl's <a href="http://www.unixwiz.net/techtips/sql-injection.html">SQL Injection Attacks by Example</a> provides an excellent visual blow-by-blow of what <i>can</i> happen when you write code this naive. Here's the Reader's Digest version:
</p>
<p>
</p>
<pre>
SELECT email, passwd, login_id, full_name
FROM members
WHERE email = '<span style="color:red;">x' OR full_name LIKE '%Bob%</span>';
</pre>
<p>
I know what you're thinking. No, escaping the strings doesn't protect you; see <a href="http://www.unixwiz.net/techtips/sql-injection.html">Steve's article</a>.
</p>
<p>
Second, <b>parameterized SQL performs better</b>. A <i>lot</i> better. Consider the parameterized version of the above:
</p>
<p>
</p>
<pre language="c#">
SqlConnection conn = new SqlConnection(_connectionString);
conn.Open();
string s = "SELECT email, passwd, login_id, full_name " +
"FROM members WHERE email = @email";
SqlCommand cmd = new SqlCommand(s);
cmd.Parameters.Add("@email", email);
SqlDataReader reader = cmd.ExecuteReader();
</pre>
<p>
This code offers the following pure performance benefits:
</p>
<p>
</p>
<ul>
<li>Fewer string concatenations
</li>
<li>No need to worry about any kind of manual string escaping
</li>
<li>A more generic query form is presented to db, so it's likely already hashed and stored as a pre-compiled execution plan
</li>
<li>Smaller strings are sent across the wire
</li>
</ul>
<p>
Non-parameterized SQL is <a href="http://www.acm.org/classics/oct95/">the GoTo statement</a> of database programming. Don't do it, and make sure your coworkers don't either.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-04-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/give-me-parameterized-sql-or-give-me-death/</guid>
</item>
</channel>
</rss>
