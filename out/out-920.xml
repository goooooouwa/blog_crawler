<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Doing It Like Everyone Else Does</title>
<link>https://blog.codinghorror.com/doing-it-like-everyone-else-does/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://weblogs.asp.net/jgalloway/">Jon Galloway</a> called me out in a comment yesterday for <a href="http://www.codinghorror.com/blog/archives/000532.html">advocating a non-standard approach</a>:
</p>
<p>
</p>
<blockquote>
Web forms have become a convention, and users have been trained for 10 years on how to fill out forms. Users would get confused, and some would bail out (abandon carts, etc.). Web forms work, and we know how to use them. Your form example violates the <a href="http://www.codinghorror.com/blog/archives/000377.html">"Don't Make Me Think"</a> principle on many levels.
</blockquote>
<p>
In a sense, he's right. When it comes to coding, as <a href="http://blogs.msdn.com/steverowe/archive/2005/09/28/475036.aspx">Steve Rowe points out</a>, <b>always favor consistency over cleverness</b>:
</p>
<p>
</p>
<blockquote>
The class isn't the main point of this post, however.  Rather, it is some advice that Peter gave a few times during the class.  Someone might ask a question like "Can't I do x in some funky way?" and he would answer, "You could, but no one would expect to see it so don't."  The point he was making is that we, as programmers, should stay away from being clever.  <b>We should, as much as possible, try to do things the same way everyone else does them.</b>  Why?  Because you won't be the only person to work on this code.  Even if you are, the next time you touch it might be a year or two from now.  If you did something clever, the next person to touch it will look at the code and not immediately understand.  This will have one of two consequences.  Either they will have to spend 10 minutes just trying to understand what it is you did or, worse, they will assume you made a mistake and "fix" it by making it less clever.  Neither of these results is desireable.  Unless you are writing one-off code for yourself you need to write it in a manner to make it easily understandable so that it can be easily maintained.
</blockquote>
<p>
It's clearly a bad idea to write code with a "how 'bout we try it <i>this</i> way" mentality, as <a href="http://weblogs.asp.net/alex_papadimoulis/archive/2005/05/25/408925.aspx">humorously noted by Alex Papadimoulis</a>:
</p>
<p>
</p>
<blockquote>
"A client has asked me to build and install a custom shelving system. I'm at the point where I need to nail it, but I'm not sure what to use to pound the nails in. <b>Should I use an old shoe or a glass bottle?</b>"
<p>
a) It depends. If you are looking to pound a small (20lb) nail in something like drywall, you'll find it much easier to use the bottle, especially if the shoe is dirty. However, if you are trying to drive a heavy nail into some wood, go with the shoe: the bottle with shatter in your hand.
</p>
<p>
b) There is something fundamentally wrong with the way you are building; you need to use real tools. Yes, it may involve a trip to the toolbox (or even to the hardware store), but doing it the right way is going to save a lot of time, money, and aggravation through the lifecycle of your product. You need to stop building things for money until you understand the basics of construction.
</p>
</blockquote>
<p>
However, when it comes to issues of user interface, consistency isn't <i>always</i> a virtue. <b>User interfaces should be internally consistent, but not necessarily consistent with every other application in the rest of the world.</b> That said, some UI elements become so ingrained into popular culture that they should be followed for consistency's sake. Some good examples are:
</p>
<p>
</p>
<ul>
<li>A search box in the upper-right hand corner
</li>
<li>A logo in the upper-left hand corner that takes you back home
</li>
<li>The "forward" and "back" buttons
</li>
</ul>
<p>
But not all user interface conventions are created equal. Some are timeless. Some are there by default, because nobody bothered to sufficiently question them. Some grow old and outlive their usefulness. <b>How do we discriminate between conventions that actually help us and those that are merely.. expected?</b>
</p>
<p>
The answer, of course, is to try multiple approaches and collect usage data to determine what works and what doesn't. This is (relatively) easy for web apps, which is why <a href="http://blog.outer-court.com/archive/2005-12-01.html#n20">Amazon</a>, <a href="http://blog.outer-court.com/archive/2006-02-08-n53.html">Yahoo</a> and <a href="http://blog.outer-court.com/archive/2005-11-29-n37.html">Google</a> are all notorious for doing it. They'll serve up experimental features to a tiny fraction of the user base, collect data on how those features are used, then feed that back into their decision making process.
</p>
<p>
If we built UI with an iron-clad guarantee that we would "do it like everyone else", would we have ever experienced the ultra simple Mom-friendly <a href="http://www.pvrblog.com/pvr/2004/12/the_pvrblog_int.html">Tivo UI</a>? Or Windows Media Center's amazing, utterly un-Windows-like ten foot UI? Would Office 12 be using the <a href="http://www.codinghorror.com/blog/archives/000397.html">innovative new ribbon</a> instead of traditional toolbars and menus? Heck, would we have ever made the transition from character mode to GUIs?
</p>
<p>
I think <b>UI experimentation is not only desirable, but necessary</b>. If we don't experiment, we can't evolve UI forward. However, you have to do it the right way:
</p>
<p>
</p>
<ol>
<li>Have a complete understanding of the current convention and how it arose
</li>
<li>Have a good, reasoned argument for deviating from the convention
</li>
<li>Collect usage data on your experiments
</li>
<li>Make decisions based on the usage data
</li>
</ol>
<p>
If you're not collecting usage data, or your reason is "it looks better this way", then you're doing it wrong, and you should stick with the conventions.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-03-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/doing-it-like-everyone-else-does/</guid>
</item>
</channel>
</rss>
