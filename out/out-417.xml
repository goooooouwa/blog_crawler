<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>UsWare vs. ThemWare</title>
<link>https://blog.codinghorror.com/usware-vs-themware/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<a href="http://www.telepath.com/~dennison/Ted/TED.html">Ted Dennison</a> left this astute comment in response to <a href="http://www.codinghorror.com/blog/archives/001063.html">Do Not Listen to Your Users</a>:
</p>
<p>
</p>
<blockquote>
Generally when I go talk to users, it is to educate myself enough to <i>become</i> a user like them. Then I can see what needs doing, what needs streamlining, reorganizing, rearranging, etc.
</blockquote>
<p>
This brought to mind Eric Sink's claim that there are <a href="http://www.ericsink.com/articles/Yours_Mine_Ours.html">three categories of software</a>:
</p>
<p>
</p>
<ol>
<li>
<b>MeWare</b><br>The developer creates software.  The developer uses it.  Nobody else does.
</li>
<li>
<b>ThemWare</b><br>The developer creates software.  Other people use it.  The developer does not.
</li>
<li>
<b>UsWare</b><br>The developer creates software.  Other people use it.  The developer uses it too.
</li>
</ol>
<p>
ThemWare is how most software gets developed, with predictably disastrous results:
</p>
<p>
</p>
<blockquote>
If I am building software that I don't use and don't know <i>how</i> to use for people I don't understand or even like, how good is my software going to be?
<p>
I probably see every feature in terms of how difficult it will be to implement, rather than how valuable it will be for my users. I probably find myself wanting to label or document the features using my jargon instead of theirs. I probably create features that are tedious or unintuitive for my users. I can't imagine why the user interface I designed doesn't make sense to them.
</p>
</blockquote>
<p>
I've found that <b>much of the best software is the best because the programmers are the users, too. It is UsWare.</b>
</p>
<p>
It behooves software developers to understand users, to walk a mile in their shoes. If we can bridge the gap between users and ourselves-- even if only a little-- we start slowly converting our mediocre ThemWare into vastly superior UsWare. To really care about the software you're writing, you have to become a user, at least in spirit.
</p>
<p>
Consuming the software you're creating is colloquially known as <b>dogfooding</b> in programming circles. Unless you're (un)lucky enough to be writing software intended for other software developers, <a href="http://www.codinghorror.com/blog/archives/000287.html">dogfooding can be a challenge</a>. But it's worth it. Dogfooding keeps software developers honest. <b>Why work against your users by producing ThemWare when you could work <i>alongside</i> them to build UsWare?</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-02-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/usware-vs-themware/</guid>
</item>
</channel>
</rss>
