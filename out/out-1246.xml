<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Ideas Are More Important Than Code</title>
<link>https://blog.codinghorror.com/ideas-are-more-important-than-code/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Do you have coworkers whose shelves groan under the weight of hundreds of pounds of technical books? I do. And I always try to gently convince them that <a href="http://sirsha.com/blog/archive/2005/01/06/920.aspx">maybe they should buy books by content instead of weight</a>:
</p>
<p>
</p>
<blockquote>
It took me a while, but I finally came to realize that books that are heavy on ideas and light on code end up having a longer shelf-life and make more of an impact. Books about tools are needed, but books that teach the "why" are so much better. Unlike those VB5.0 and .NET 1.0 books, theory changes slowly and incrementally. That is why some books are timeless. That is why some books with no code at all are constantly listed in developers' list of "must reads". Knowledge and theory never goes out of style, unless you stop improving on it.
</blockquote>
<p>
Similarly, in my <a href="http://www.codinghorror.com/blog/archives/000020.html">recommended reading list</a>, I urge developers to consider that reading <a href="http://www.amazon.com/exec/obidos/ASIN/0201835959/codihorr-20">The Mythical Man Month</a>-- which is over <b>20 years old</b>-- might be a better use of their time than poring over the latest thousand page technical tome du jour. This can be surprisingly difficult to get across to skeptical developers.
</p>
<p>
An alternate take on this topic is Chris Sells' <a href="http://www.sellsbrothers.com/spout/#Learning_to_Learn">the most important thing that I've ever learned is how to learn</a>:
</p>
<p>
</p>
<blockquote>
Still, teaching without the foundation of knowledge isn't effective. How do I gain that foundation of knowledge? I consume the available material and ask "why" a lot. If I look at a class hierarchy and it's design isn't immediately obvious to me, I ask why it was built that way and why was that way chosen over another. And to the answers to those questions, I keep asking why 'til I get to something I know already or until I get to a human reason. The reason for not stopping 'til I get to something I know is that I believe that all learning is only as affective as well as it can be tied to what you already know. How easily it is to learn something is directly related to how much you already know about related topics, so the more you know, the easier it is to learn more.
</blockquote>
<p>
It seems a bit myopic to me that Chris states <i>COM was too hard to learn "naturally"</i>, and emphasizes the value of asking "why", yet he can't seem to ask himself <b>why is COM this hard to learn and teach?</b>. Well designed systems are easy to understand. Anyone can develop a complex system that takes a week long training course to comprehend. Developing a complex system that a developer can master in a day, well, that's a lot more impressive.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-01-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/ideas-are-more-important-than-code/</guid>
</item>
</channel>
</rss>
