<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Background Compilation and Background Spell Checking</title>
<link>https://blog.codinghorror.com/background-compilation-and-background-spell-checking/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Dennis Forbes took issue with my recent post on <a href="http://www.codinghorror.com/blog/archives/000860.html">C# and the Compilation Tax</a>, offering this criticism, pointedly titled <a href="http://www.yafla.com/dforbes/2007/05/16.html">"Beginners and Hacks"</a>:
</p>
<p>
</p>
<blockquote>
Sometimes [background compilation and edit and continue] are there to coddle a beginner, carefully keeping them within the painted lines and away from the dangerous electrical sockets along the wall. That would explain why it was a more important feature in VB.NET than C#...not that VB.NET is any more trivial -- it's just a syntactic variant -- but it is the language that beginner programmers are generally guided into.
<p>
My experience has been that the best developers naturally start using less and less "helpers", to the extreme where you have incontestably great developers like <a href="http://www.xml.com/ldd/chapter/book/ch04.html">Linus Torvalds arguing against fundamental helpers like interactive debuggers</a>.
</p>
<p>
<b>I don't buy the infinite monkeys on an infinite number of keyboards model of software development</b>. I can only envision tools like continuous compilation and edit and continue as the hand-holding of beginners, and the crutch of hacks.
</p>
</blockquote>
<p>
Regardless of whether or not Dennis is buying it, <b>the infinite monkey software development model is what we're stuck with</b>. I'm an advocate of designing practical systems that accommodate <a href="http://www.newtechusa.com/ppi/talent.asp">what actually happens in the real world</a>-- rather than the way we <i>wish</i> things worked. The present model of software development is clearly <a href="http://en.wikipedia.org/wiki/Turtles_all_the_way_down">monkeys all the way down</a>. And if you're offended to be lumped in with the infinite monkey brigade, I'd say that's <i>incontestable</i> proof that you're one of us.
</p>
<p>
For every one Linus Torvalds, there are <a href="http://www.codinghorror.com/blog/archives/000072.html">ten thousand programmers who aren't Linus Torvalds</a>. I don't expect this ratio to change any time soon, so any effort directed at helping typical developers with better tooling is a significant advancement in the state of software development. Yes, you could throw <a href="http://en.wikipedia.org/wiki/Emacs">emacs</a> and volumes 1-5 of <a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html">The Art of Programming</a> at your development team. Or you can buy them the best, most advanced development tools on the market. Which approach do you think will be more effective?
</p>
<p>
Ian Griffiths expressed his discontent with background compilation in <a href="http://www.interact-sw.co.uk/iangblog/2007/05/15/language-choice">a completely different way</a>:
</p>
<p>
</p>
<blockquote>
I hate VB.NET's continuous bloody interference. I HADN'T FINISHED TYPING YET YOU STUPID COMPILER! CAN'T YOU SEE THAT? DOES IT LOOK TO YOU LIKE I'M DONE TYPING? DID IT NOT OCCUR TO YOU THAT THE REASON YOU'VE FOUND ALL THOSE ERRORS IS BECAUSE I'M NOT FINISHED YET?!! I'LL TELL YOU WHEN I WANT YOU TO CHECK MY WORK, AND NOT BEFORE!
<p>
There. I feel better now.
</p>
<p>
Yes, I'm sure rebuilding my C# applications every other keystroke, as Jeff apparently feels compelled to do, would have a negative effect on my productivity. How could it be otherwise when VB.NET's less than helpful attempts to do that automatically are so very distracting? <a href="http://www.codinghorror.com/blog/archives/000424.html">"It looks like you're writing a program. Would you like help?"</a> Oddly enough, I don't feel the need to disrupt my train of thought continuously. So I would prefer it if VB.NET didn't disrupt me automatically.
</p>
</blockquote>
<p>
I respect the opinions of Dennis and Ian greatly. If you don't have their blogs in your aggregator yet, you should. But I also respectfully disagree with both of them on this topic. If you find background compilation naggy-- or if you think it's strictly for beginners and hacks-- then <b>you must really, <i>really</i> hate background spell checking</b>:
</p>
<p>
<img alt="Microsoft Word grammar and spelling checker" border="0" class="at-xid-6a0120a85dcdae970b0120a86d91b3970b" height="402" src="https://blog.codinghorror.com/content/images/uploads/2007/06/6a0120a85dcdae970b0120a86d91b3970b-pi.png" width="533">
</p>
<p>
People absolutely <i>adore</i> background spell checking. It's one of those rare "you'll get it from me when you pry it out of my dead, cold hands" features that users will switch applications over. Automatic background red-squiggly-underline spell checking in HTML forms is one of the marquee features of Firefox 2.0. In fact, it's <a href="http://www.mozilla.com/en-US/firefox/features.html#experience">feature number two on the feature page</a>, right under tabbed browsing.
</p>
<p>
<b>I see very little difference between background spell checking and background compilation.</b> To me, they're no-brainers for the same reasons. I'm actually an excellent speller, to the point that I can (and do) work without a spell checker and rarely make mistakes. But having subtle background underlining effects when I've potentially made a spelling mistake is undeniably helpful to me, a self-professed excellent speller. I can ignore it when I know it's wrong and keep on plowing ahead. But more often than not, I've actually made a typo, and I no longer have to methodically read through my writing several times to find it. With background spell checking, all I need to do is quickly scan through the red squiggly underlined text.
</p>
<p>
Mike Pope, a professional writer for Microsoft, also <a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=1753">defends background spelling and grammar checking</a>:
</p>
<p>
</p>
<blockquote>
I use the spell checker and grammar checker in Word all the time. These things are tools for me, ways to help somewhat with the gruntwork of examining every letter of every word of every sentence in all the documents I edit. The spell checker finds words all the time that have been fumbled (often by me as I edit), although it finds many, many more that it thinks are errors but are just fine in context (e.g. lots of technical names). The grammar checker doesn't have as much opportunity to be helpful, but it's good at finding problems like subject-verb agreement when the subject of sentence has been edited but the verb has not.
<p>
But these tools are often looked at askance. As I've noted before (I think), professional editors can be snotty about the grammar checker in particularly, focusing on errors that the checker doesn't find, or constructions that confuse the grammar checker and make it believe it's found an error when there is none. Similarly, virtually everyone has examples where the spell checker has missed words. The spell checker is helpless in the face of their-they're-there confusion, for example.
</p>
</blockquote>
<p>
The funny thing about this debate is that I've lived the zero-tooling lifestyle. It sucks. Here's how I've composed every single blog entry I've ever written: <b>in a fixed-size HTML textbox</b>. In fact, I'm writing in it <i>right now</i>.
</p>
<p>
<img alt="Coding Horror editing menu" border="0" class="at-xid-6a0120a85dcdae970b0120a86d91be970b" height="277" src="https://blog.codinghorror.com/content/images/uploads/2007/06/6a0120a85dcdae970b0120a86d91be970b-pi.png" width="521">
</p>
<p>
Despite my spelling prowess, I've posted many spelling mistakes to this blog. Using the most primitive of tools to compose these blog posts isn't a glorious, sweeping validation of my expertise as a writer. If anything, it's an indication of my idiocy, or at least <b>my unwillingness to let better tools help me be a better writer</b>. It's absolutely nothing to be proud of. In fact, I'm a little ashamed to admit how neanderthal my blog tooling really is.
</p>
<p>
Neither background compilation nor background spell checking are <i>meant</i> to be crutches. Any reasonably competent person knows that tools are never substitutes for critical thinking about what you're writing or coding--  as Mike <a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=1753">so aptly points out</a>:
</p>
<p>
</p>
<blockquote>
Considering all this, the tools are pretty good at what they do. <b>But no matter how good they are, people need to understand the tools' limitations, or for perhaps more fundamentally, the tools are just tools, and they should never have the last say.</b> Don't let that computer boss you around.
</blockquote>
<p>
Intentionally choosing not to use better tools because you're afraid they will become a crutch is, at best, cruel and patronizing. And it's usually a bad business decision to boot. Turn off background compilation-- or background spell checking-- if you must, but <b>background spell checking is on by default in Word and Firefox 2.0</b>. Is it a perfect solution to the spelling problem? No. Far from it. But for the average user, it's an easy, automatic, unobtrusive way to see and correct common spelling errors. And background compilation, as in VB.NET, offers the same benefit for common coding errors.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-06-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/background-compilation-and-background-spell-checking/</guid>
</item>
</channel>
</rss>
