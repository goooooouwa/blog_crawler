<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Dealing With Bad Apples</title>
<link>https://blog.codinghorror.com/dealing-with-bad-apples/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Robert Miesen sent in this story of a project pathology:
</p>
<p>
</p>
<blockquote>
I was part of a team writing an web-based job application and screening system (a job kiosk the customer called it) and my team and our customer signed on to implementing this job kiosk using Windows, Apache, PHP5, and the ZendFramework -- everyone except one of our team members, who I will refer to as "Joe". Joe kept advocating the use of JavaScript throughout the technology deliberation phase, even though the customer made it quite clear that he expected the vast majority of the job kiosk to be implemented using a server-side technology and all the validation should be done using server-side technology.
<p>
The fact that the customer signed off on this, however, did nothing to deter Joe from advocating JavaScript -- abrasively. Every time our project hit a bump in the road, Joe would go off on some tirade on how much easier our lives would be if we were only writing this job kiosk in JavaScript. Joe would constantly bicker about how we were all doing this all wrong because we weren't doing it in JavaScript, not even bother to learn the technologies we were actually using, and, whenever fellow teammates would try and gently bring him back into the fold (usually via email), Joe would just flame the poor guy. At the height of Joe's pro-JavaScript bigotry, he would regularly belt off comments like, "Well, if we had only done it in JavaScript," to such an extent that the team would have been better off if he had just quit (or was reassigned or fired.)
</p>
</blockquote>
<p>
After reading this story, I had to resist the urge to lean forward, hand placed thoughtfully under my chin, brow furrowed, and ask -- <a href="http://thedailywtf.com/Articles/Straight_Shooter_for_Upper_Management.aspx">have you tried JavaScript?</a>
</p>
<p>
Robert thought this story was a cautionary tale about technology dependence, but I see something else: <b>a problem team member, a classic bad apple</b>.
</p>
<p>
<img alt="an apple goes bad" border="0" class="at-xid-6a0120a85dcdae970b0120a86df121970b" height="180" src="https://blog.codinghorror.com/content/images/uploads/2008/07/6a0120a85dcdae970b0120a86df121970b-pi.jpg" width="640">
</p>
<p>
I'm sure "Joe" had the best of intentions, but at the point where you're actively campaigning against the project, and working against your teammates -- <b>you're a liability to the project</b>.
</p>
<p>
The cost of problem personnel on a project is severe, as noted in Chapter 12 of McConnell's <a href="http://www.amazon.com/dp/1556159005/?tag=codihorr-20">Rapid Development: Taming Wild Software Schedules</a>.
</p>
<p>
</p>
<blockquote>
If you tolerate even one developer whom the other developers think is a problem, you'll hurt the morale of the good developers. You are implying that not only do you expect your team members to give their all; you expect them to do it when their co-workers are working against them.
<p>
In a review of 32 management teams, Larson and LaFasto found that <b>the most consistent and intense complaint from team members was that their team leaders were unwilling to confront and resolve problems associated with poor performance by individual team members.</b> (Larson and LaFasto 1989). They report that, "more than any other single aspect of team leadership, members are disturbed by leaders who are unwilling to deal directly and effectively with self-serving or noncontributing team members." They go on to to say that this is a significant management blind spot because managers nearly always think their teams are running more smoothly than their team members do.
</p>
</blockquote>
<p>
How do we identify problem personnel? It's not difficult as you might think. I had a friend of mine once describe someone on his team as -- and this is a direct quote -- "a cancer". At the point which you, or anyone else on your team, are using words like <i>cancer</i> to describe a teammate, you have a serious project pathology. You don't have to be friends with everyone on your team, <a href="http://www.codinghorror.com/blog/archives/001033.html">although it certainly helps</a>, but a level of basic personal and professional respect is mandatory for any team to function normally.
</p>
<p>
Steve outlines a few warning signs that you're dealing with a bad apple on your team:
</p>
<p>
</p>
<ol>
<li>They cover up their ignorance rather than trying to learn from their teammates. "I don't know how to explain my design; I just know that it works." or "My code is too complicated to test." (These are both actual quotes.)
<p></p>
</li>
<li>They have an excessive desire for privacy. "I don't need anyone to review my code."
<p></p>
</li>
<li>They are territorial. "No one else can fix the bugs in my code. I'm too busy to fix them right now, but I'll get to them next week."
<p></p>
</li>
<li>They grumble about team decisions and continue to revisit old discussions long after the team has moved on. "I still think we ought to go back and change the design we were talking about last month. The one we picked isn't going to work."
<p></p>
</li>
<li>Other team members all make wisecracks or complain about the same person regularly. Software developers often won't complain directly, so you have to ask if there's a problem when you hear many wisecracks.
<p></p>
</li>
<li>They don't pitch in on team activities. On one project I worked on, two days before our first major deadline, a developer asked for the day off. The reason? He wanted to spend the day at a men's clothing sale in a nearby city -- a clear sign he hadn't integrated with the team.
</li>
</ol>
<p>
Let me be quite clear on this point: if your team leader or manager isn't dealing with the bad apples on your project, <b>she isn't doing her job</b>.
</p>
<p>
You should never be afraid to remove -- or even fire -- people who do not have the best interests of the team at heart. You can develop skill, but you can't develop a positive attitude. The longer these disruptive personalities stick around on a project, the worse their effects get. They'll slowly spread poison throughout your project, in the form of code, relationships, and contacts.
</p>
<p>
Removing someone from a team is painful; it's not fun for anyone. But <b>realizing you should have removed someone six months ago</b> is far more painful.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-07-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dealing-with-bad-apples/</guid>
</item>
</channel>
</rss>
