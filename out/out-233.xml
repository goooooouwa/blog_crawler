<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Exception-Driven Development</title>
<link>https://blog.codinghorror.com/exception-driven-development/</link>
<content>
                <!--kg-card-begin: markdown--><p>
If you're waiting around for <b>users to tell you about problems with your website or application</b>, you're only seeing a tiny fraction of all the problems that are actually occurring. The proverbial tip of the iceberg.
</p>
<p>
<img alt="iceberg.jpg" border="0" class="at-xid-6a0120a85dcdae970b0120a86e1f8b970b" height="411" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b0120a86e1f8b970b-pi.jpg" width="639">
</p>
<p>
Also, if this is the case, I'm sorry to be the one to have to tell you this, but you kind of suck at your job -- which is to <b>know more about your application's health than your users do.</b> When a user informs me about a bona fide error they've experienced with my software, I am deeply embarrassed. And more than a little ashamed. I have failed to see and address the issue before they got around to telling me. I have neglected to <a href="http://www.codinghorror.com/blog/archives/001118.html">crash responsibly</a>.
</p>
<p>
The first thing any responsibly run software project should build is an <b>exception and error reporting facility</b>. Ned Batchelder likens this to <a href="http://nedbatchelder.com/text/fix-err-hand.html">putting an oxygen mask on yourself before you put one on your child</a>:
</p>
<p>
</p>
<blockquote>
When a problem occurs in your application, always check first that the error was handled appropriately. If it wasn't, always fix the handling code first. There are a few reasons for insisting on this order of work:
<p>
</p>
<ol>
<li>With the original error in place, you have a perfect test case for the bug in your error handling code. Once you fix the original problem, how will you test the error handling? Remember, one of the reasons there was a bug there in the first place is that it is hard to test it.
</li>
<li>Once the original problem is fixed, the urgency for fixing the error handling code is gone. You can say you'll get to it, but what's the rush? You'll be like the guy with the leaky roof. When it's raining, he can't fix it because it's raining out, and when it isn't raining, there's no leak!
</li>
</ol>
</blockquote>
<p>
You need to have a central place that all your errors are aggregated, a place that all the developers on your team know intimately and visit every day. On Stack Overflow, we use a custom fork of <a href="http://code.google.com/p/elmah/">ELMAH</a>.
</p>
<p>
<img alt="stackoverflow exception log" border="0" class="at-xid-6a0120a85dcdae970b0120a86e1f91970b" height="318" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b0120a86e1f91970b-pi.png" width="728">
</p>
<p>
We monitor these exception logs daily; sometimes hourly. <b>Our exception logs are a de-facto to do list for our team</b>. And for good reason. Microsoft has collected similar sorts of failure logs for years, both for themselves and other software vendors, under the banner of their Windows Error Reporting service. The <a href="https://winqual.microsoft.com/help/About_Windows_Error_Reporting_for_Hardware.htm">resulting data</a> is compelling:
</p>
<p>
</p>
<blockquote>
When an end user experiences a crash, they are shown a dialog box which asks them if they want to send an error report. If they choose to send the report, WER collects information on both the application and the module involved in the crash, and sends it over a secure server to Microsoft.
<p>
The mapped vendor of a bucket can then <a href="http://www.sherylcanter.com/articles/oreilly_20040316_wer.php">access the data for their products</a>, analyze it to locate the source of the problem, and provide solutions both through the end user error dialog boxes and by providing updated files on Windows Update.
</p>
<p>
Broad-based trend analysis of error reporting data shows that <b>80% of customer issues can be solved by fixing 20% of the top-reported bugs</b>. Even addressing 1% of the top bugs would address 50% of the customer issues. The same analysis results are generally true on a company-by-company basis too.
</p>
</blockquote>
<p>
Although <a href="http://www.codinghorror.com/blog/archives/000640.html">I remain a fan of test driven development</a>, the speculative nature of the time investment is one problem I've always had with it. <b>If you fix a bug that no actual user will ever encounter, what have you actually <i>fixed?</i></b> While there are <a href="http://www.codinghorror.com/blog/archives/000265.html">many other valid reasons to practice TDD</a>, as a pure bug fixing mechanism it's always seemed far too much like premature optimization for my tastes. I'd much rather spend my time fixing bugs that are problems in <i>practice</i> rather than theory.
</p>
<p>
You can certainly do both. But given a limited pool of developer time, I'd prefer to allocate it toward fixing problems real users are having with my software based on cold, hard data. That's what I call <b>Exception-Driven Development</b>. Ship your software, get as many users in front of it as possible, and intently study the error logs they generate. Use those exception logs to hone in on and focus on the problem areas of your code. Rearchitect and refactor your code so the top 3 errors can't happen any more. <a href="http://www.codinghorror.com/blog/archives/000788.html">Iterate rapidly</a>, deploy, and repeat the proces. This data-driven feedback loop is so powerful you'll have (at least from the users' perspective) a rock stable app in a handful of iterations.
</p>
<p>
Exception logs are possibly the most powerful form of feedback your customers can give you. It's feedback based on <i>shipping software</i> that you don't have to ask or cajole users to give you. Nor do you have to interpret your users' weird, semi-coherent ramblings about what the problems are. The actual problems, with stack traces and dumps, are collected for you, automatically and silently. <b>Exception logs are the ultimate in customer feedback.</b>
</p>
<p>
<a href="http://twitter.com/Carnage4Life/status/1534037187"><img alt="carnage4life: getting real feedback from customers by shipping is more valuable than any amount of talking to or about them beforehand" border="0" class="at-xid-6a0120a85dcdae970b0120a86e1f95970b" height="210" src="https://blog.codinghorror.com/content/images/uploads/2009/04/6a0120a85dcdae970b0120a86e1f95970b-pi.png" width="424"></a>
</p>
<p>
Am I advocating shipping buggy code? Incomplete code? Bad code? Of course not. I'm saying that the sooner you can get your code out of your editor and in front of real users, the more data you'll have to <i>improve</i> your software. Exception logs are a big part of that; so is usage data. And you should talk to your users, too. If you can bear to.
</p>
<p>
Your software will ship with bugs anyway. <a href="http://www.codinghorror.com/blog/archives/000099.html">Everyone's software does</a>. Real software crashes. Real software loses data. Real software is hard to learn, and hard to use. The question isn't how many bugs you will ship with, but <b><i>how fast can you fix those bugs?</i></b> If your team has been practicing exception-driven development all along, the answer is -- why, we can improve our software in no time at all! Just watch us make it better!
</p>
<p>
And that is sweet, sweet music to every user's ears.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-04-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/exception-driven-development/</guid>
</item>
</channel>
</rss>
