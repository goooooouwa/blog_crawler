<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Should All Web Traffic Be Encrypted?</title>
<link>https://blog.codinghorror.com/should-all-web-traffic-be-encrypted/</link>
<content>
                <!--kg-card-begin: markdown--><p>
The prevalence of free, open WiFi has made it <b>rather easy for a WiFi eavesdropper to steal your identity cookie for the websites you visit while you're connected to that WiFi access point</b>. This is something I talked about in <a href="http://www.codinghorror.com/blog/2010/11/breaking-the-webs-cookie-jar.html">Breaking the Web's Cookie Jar</a>. It's difficult to fix without making major changes to the web's infrastructure.
</p>
<p>
In the year since I wrote that, a number of major websites have "solved" the WiFi eavesdropping problem by either making encrypted HTTPS web traffic an <i>account option</i> or <i>mandatory</i> for all logged in users.
</p>
<p>
For example, I just noticed that Twitter, transparently to me and presumably all other Twitter users, <b>switched to an encrypted web connection by default</b>. You can tell because most modern browsers show the address bar in green when the connection is encrypted.</p>
<p>
<img alt="Twitter-https-encryption-indicators" title="Twitter-https-encryption-indicators" src="https://blog.codinghorror.com/content/images/uploads/2012/02/6a0120a85dcdae970b016762ddee60970b-800wi.png" border="0" width="401" height="228">
</p>
<p>
I initially resisted this as overkill, except for obvious targets like email (the <a href="http://www.codinghorror.com/blog/2008/06/please-give-us-your-email-password.html">skeleton key to all your online logins</a>) and banking.
</p>
<blockquote>
Yes, <b>you can naively argue that every website should encrypt all their traffic all the time</b>, but to me that's a "boil the sea" solution. I'd rather see a better, more secure identity protocol than ye olde HTTP cookies. I don't actually care if anyone sees the rest of my public activity on Stack Overflow; it's hardly a secret. But gee, I sure <i>do</i> care if they <a href="http://www.codinghorror.com/blog/2008/08/protecting-your-cookies-httponly.html">somehow sniff out my cookie and start running around doing stuff as me!</a> Encrypting everything just to protect that one lousy cookie header seems like a whole lot of overkill to me.
</blockquote>

<p>
Of course, there's no reason to encrypt traffic for anonymous, not-logged-in users, and Twitter doesn't. You get a plain old HTTP connection until you log in, at which point they automatically switch to HTTPS encryption. Makes sense.
</p>
<p>
It was totally painless for me, as a user, and it makes stealing my Twitter identity, or <a href="http://twitter.com/codinghorror">eavesdropping on my Twitter activity</a> (as fascinating as I know that must sound), dramatically more difficult. I can't really construct a credible argument <i>against</i> doing this, even for something as relatively trivial as my Twitter account, and it has some definite benefits. So perhaps Twitter has the right idea here; <b>maybe encrypted connections <i>should</i> be the default for all web sites</b>. As tinfoil hat as this seemed to me a year ago, now I'm wondering if that might actually be the right thing to do for the long-term health of the overall web, too.
</p>
<p>
<a href="http://hyperboleandahalf.blogspot.com/2010/06/this-is-why-ill-never-be-adult.html"><img alt="ENCRYPT ALL THE THINGS" title="ENCRYPT ALL THE THINGS" src="https://blog.codinghorror.com/content/images/uploads/2012/02/6a0120a85dcdae970b016301e98de2970d-800wi.png" border="0" width="320" height="240"></a>
</p>
<p>
Why not boil the sea, then? Let us <i>encrypt all the things!</i>
</p>
<h2>HTTPS isn't (that) expensive any more</h2>
<p>
Yes, in the hoary old days of the 1999 web, HTTPS was quite computationally expensive. But thanks to 13 years of Moore's Law, that's no longer the case. It's still <i>more work</i> to set up, yes, but <a href="http://www.imperialviolet.org/2010/06/25/overclocking-ssl.html">consider the real world case of GMail</a>:
</p>
<blockquote>
In January this year (2010), Gmail switched to using HTTPS for everything by default. Previously it had been introduced as an option, but now all of our users use HTTPS to secure their email between their browsers and Google, all the time. In order to do this we had to deploy <i>no additional machines and no special hardware</i>. On our production frontend machines, SSL/TLS accounts for less than 1% of the CPU load, less than 10KB of memory per connection and less than 2% of network overhead. Many people believe that SSL takes a lot of CPU time and we hope the above numbers (public for the first time) will help to dispel that.
</blockquote>

<h2>HTTPS means The Man can't spy on your Internet</h2>
<p>
Since all the traffic between you and the websites you log in to would now be encrypted, the ability of nefarious evildoers to either …
</p>
<ul>
<li>steal your identity cookie
</li>
<li>peek at what you're doing
</li>
<li>see what you've typed
</li>
<li>interfere with the content you send and receive
</li>
</ul>
<p>
… is, if not <a href="http://security.stackexchange.com/questions/6290/how-is-it-possible-that-people-observing-an-https-connection-being-established-w">completely eliminated</a>, drastically limited. Regardless of whether you're on open public WiFi or not.
</p>
<p>
Personally, I don't care too much if people see what I'm doing online since the whole point of a lot of what I do is to … <a href="http://www.codinghorror.com/blog/2007/04/when-in-doubt-make-it-public.html">let people see what I'm doing online</a>. But I certainly don't subscribe to the dangerous idea that "only criminals have things to hide"; everyone deserves the right to personal privacy. And there are lots of repressive governments out there who wouldn't hesitate at the chance to spy on what their citizens do online, or worse. Much, much worse. Why not improve the Internet for all of them at once?
</p>
<h2>HTTPS goes faster now</h2>
<p>
Security always comes at a cost, and encrypting a web connection is no different. HTTPS is going to be inevitably slower than a regular HTTP connection. But how <i>much</i> slower? It used to be that encrypted content wouldn't be cached in some browsers, but <a href="http://gent.ilcore.com/2011/02/chromes-10-caches.html?showComment=1297102528799#c5411401837359385517">that's no longer true</a>. And Google's SPDY protocol, intended as a drop-in replacement for HTTP, even goes so far as to <a href="http://dev.chromium.org/spdy/spdy-whitepaper">bake encryption in by default</a>, and not just for better performance:
</p>
<blockquote>
[It is a specific technical goal of SPDY to] make SSL the underlying transport protocol, for better security and compatibility with existing network infrastructure. Although SSL does introduce a latency penalty, we believe that the long-term future of the web depends on a secure network connection. In addition, the use of SSL is necessary to ensure that communication across existing proxies is not broken.
</blockquote>

<p>
There's also <a href="http://blog.chromium.org/2011/05/ssl-falsestart-performance-results.html">SSL False Start</a> which requires a modern browser, but reduces the <a href="http://www.semicomplete.com/blog/geekery/ssl-latency.html">painful latency</a> inherent in the expensive, but necessary, handshaking required to get encryption going. SSL encryption of HTTP will never be <i>free</i>, exactly, but it's certainly a lot faster than it used to be, and getting faster every year.
</p>
<p>
Bolting on encryption for logged-in users is by no means an easy thing to accomplish, particularly on large, established websites. You won't see me out there berating every public website for not offering encrypted connections yesterday because I know how much work it takes, and how much additional complexity it can add to an already busy team. Even though HTTPS is way easier now than it was even a few years ago, there are still plenty of tough gotchas: proxy caching, for example, becomes vastly harder when the proxies can no longer "see" what the encrypted traffic they are proxying is doing. Most sites these days are a broad mashup of content from different sources, and technically <i>all</i> of them need to be on HTTPS for a properly encrypted connection. Relatively underpowered and weakly connected mobile devices will pay a much steeper penalty, too.
</p>
<p>
Maybe not tomorrow, maybe not next year, but over the medium to long term, <b>adopting encrypted web connections as a standard for logged-in users</b> is the healthiest direction for the future of the web. We need to work toward making HTTPS easier, faster, and most of all, <i>the default</i> for logged in users.
</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] What's your next career move? <a href="http://careers.stackoverflow.com/" rel="nofollow">Stack Overflow Careers</a> has the best job listings from great companies, whether you're looking for opportunities at a startup or Fortune 500. You can search our <a href="http://careers.stackoverflow.com/jobs" rel="nofollow">job listings</a> or <a href="http://careers.stackoverflow.com/cv" rel="nofollow">create a profile</a> and let employers find you.
</td></tr>
</table>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2012-02-23T16:19:34.000Z</pubDate>
<guid>https://blog.codinghorror.com/should-all-web-traffic-be-encrypted/</guid>
</item>
</channel>
</rss>
