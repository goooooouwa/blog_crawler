<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Not All Bugs Are Worth Fixing</title>
<link>https://blog.codinghorror.com/not-all-bugs-are-worth-fixing/</link>
<content>
                <!--kg-card-begin: markdown--><p>
<img align="right" alt="triage-tag.png" border="0" class="at-xid-6a0120a85dcdae970b0128776fcb54970c" height="537" hspace="10" src="https://blog.codinghorror.com/content/images/uploads/2006/01/6a0120a85dcdae970b0128776fcb54970c-pi.png" vspace="5" width="408">
One thing that continually frustrates me when working with dedicated test teams is that, well, <i>they find too many bugs</i>.
</p>
<p>
Don't get me wrong. I want to be the first person to know about any bug that results in inconvenience for a user.  But <b>how do you distinguish between bugs that users are likely to encounter, and bugs that users will probably never see?</b>
</p>
<p>
The first thing you do is take that list of bugs from the testers and have yourself a <a href="http://www.bobcongdon.net/blog/2005/11/triage.html">triage meeting</a>:
</p>
<p>
</p>
<blockquote>
The term "triage" was <a href="http://en.wikipedia.org/wiki/Triage">borrowed from medical triage</a> where a doctor or nurse has to prioritize care for a large group of injured people. The main job of a software bug triage team is to decide which bugs need to be fixed (or conversely, which bugs we're willing to ship with).
<p>
Eric lists four questions that need to be answered during triage to decide whether a bug should be fixed or not:
</p>
<p>
</p>
<ol>
<li>
<b>Severity</b>: When this bug happens, how bad is the impact?
</li>
<li>
<b>Frequency</b>: How often does this bug happen?
</li>
<li>
<b>Cost</b>: How much effort would be required to fix this bug?
</li>
<li>
<b>Risk</b>: What is the risk of fixing this bug?
</li>
</ol>
</blockquote>
<p>
Triage isn't exactly my idea of a good time. But you have to do it, because you'll always have far more bugs than you have development time. Nobody has the luxury of fixing all the bugs in their software.
</p>
<p>
Testers produce two kinds of bugs:
</p>
<p>
</p>
<ol>
<li>A small subset of very serious bugs that everyone can immediately agree on. These are great. They're the kind of catches that make me thank my lucky stars that we have dedicated testers. You go, girl-slash-boy!
</li>
<li>Everything else. A vast, gray wasteland of pseudo-bugs that nobody can really agree on. Is it an inconvenience for the user? Would users really do things this way? Would a user ever run into this? Do we even care?
</li>
</ol>
<p>
It's a clear win for the bugs everyone agrees on. That's usually about ten to twenty percent of the bug list in my experience. But for everything else, there's a serious problem: <b>testers aren't real users</b>. I'd give a bug from a customer ten times the weight of a bug reported by a tester.
</p>
<p>
The source of the bug is just one factor to consider. Bug triage isn't a science. It's highly subjective and totally dependent on the specifics of your application. In <a href="http://www.shareware-beach.com/2005/12/bugs-are-a-business-decision/">Bugs Are a Business Decision</a>, Jan Goyvaerts describes how different triage can be for applications at each end of that spectrum:
</p>
<p>
</p>
<blockquote>
Last July I flew to Denver to attend the Shareware Industry Conference. I flew the leg from Taipei to Los Angeles on a Boeing 747 operated by China Airlines. This aircraft has two major software systems on board: the avionics software (flight computer), and the in-flight entertainment system. These two systems are completely independent of each other, developed by different companies, to different standards.
<p>
The avionics software is the software that flies the plane. No, the pilots don't fly the plane, the flight computer does. How many bugs would you tolerate in the avionics software? How many do you think Boeing left unfixed? How many people have ever been killed by software bugs in modern airliners? Zero. A flawed flight computer would immediately ground all 747s worldwide. Boeing would not recover.
</p>
<p>
The in-flight entertainment system is a completely different story. It's not essential to the plane. It only serves to make the passengers forget how uncomfortable those economy seats really are. If the entertainment system barfs all over itself, the cost is minimal. Passengers are already out of their money, and most will choose their next flight based on price and schedule rather than which movies are on those tiny screens, if any. I was actually quite pleased with Chine Airlines' system, which offered economy passengers individual screens and a choice of a dozen or so on-demand movies (i.e. each passenger can start viewing any movie at any time, and even pause and rewind). That is, until the system started acting up. It locked up a few times causing everybody's movie to pause for several minutes. Once, the crew had to reboot the whole thing. That silly Linux penguin mocked me for several minutes while the boot messages crept by. X11 showed off its X-shaped cursor right in the middle of the screen even longer. Judging from the crew's attitude about it, the reboot seemed like something that's part of their training.
</p>
</blockquote>
<p>
Bugs also cost money to fix. In <a href="http://software.ericsink.com/articles/Four_Questions.html">My Life as a Code Economist</a>, Eric Sink outlines all the decisions that go into whether or not a bug gets fixed at his company:
</p>
<p>
</p>
<blockquote>
Don't we all start out with the belief that software only gets better as we work on it?  The fact that we need regression testing is somehow like evidence that there is something wrong with the world.  After all, it's not like anybody on our team is intentionally creating new bugs.  We're just trying to make sure our product gets better every day, and yet, somewhere between 3.1.2 and 3.1.3, we made it worse.
<p>
But that's just the way it is.  Every code change is a risk.  A development cycle that doesn't recognize this will churn indefinitely and never create a shippable product.  At some point, if the product is ever going to converge toward a release, you have to start deciding which bugs aren't going to get fixed.
</p>
<p>
To put it another way, think about what you want to say to yourself when look in the mirror just after your product is released.  The people in group 2 want to look in the mirror and say this:
</p>
<p>
"Our bug database has ZERO open items.  We didn't defer a single bug.  We fixed them all.  After every bug fix, we regression tested the entire product, with 100% code coverage.  Our product is perfect, absolutely flawless and above any criticism whatsoever."
</p>
<p>
The group 1 person wants to look in the mirror and say this:
</p>
<p>
"Our bug database has lots of open items.  We have carefully reviewed every one of them and consider each one to be acceptable.  In other words, most of them should probably not even be called bugs.  We are not ashamed of this list of open items.  On the contrary, we draw confidence from this list because we are shipping a product with a quality level that is well known.  There will be no surprises and no mulligans.  We admit that our product would be even better if all of these items were "fixed", but fixing them would risk introducing new bugs.  We would essentially be exchanging these bugs which we find acceptable for the possibility of newly introduced bugs which might be showstoppers."
</p>
<p>
I'm not talking about shipping crappy products.  I'm not suggesting that anybody ship products of low quality.  I'm suggesting that decisions about software quality can be tough and subtle, and we need to be really smart about how to make those decisions. <b>Sometimes a "bug" should not be fixed.</b>
</p>
</blockquote>
<p>
To me, triage is about one thing: making life better for your users. And the best way to do that is to <b>base your triage decisions on data from actual usage</b> -- via <a href="http://www.codinghorror.com/blog/archives/000102.html">exception reporting</a>, user feedback, and beta testing. Otherwise, triage is just a bunch of developers and testers in a room, trying to <i>guess</i> what users might do.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-01-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/not-all-bugs-are-worth-fixing/</guid>
</item>
</channel>
</rss>
