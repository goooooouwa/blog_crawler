<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Modern Logo</title>
<link>https://blog.codinghorror.com/modern-logo/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Leon recently <a href="http://www.secretgeek.net/logotree.asp">posted</a> a link to a <a href="http://www.cs.nyu.edu/~michaels/blog/?p=6">great blog entry on rediscovering Logo</a>. You know, <a href="http://en.wikipedia.org/wiki/Logo_(programming_language)">Logo</a> -- the one with the turtle.
</p>
<p>
<img alt="Berkeley Logo screenshot" border="0" class="at-xid-6a0120a85dcdae970b012877702fc1970c" height="357" src="https://blog.codinghorror.com/content/images/uploads/2007/12/6a0120a85dcdae970b012877702fc1970c-pi.png" width="287">
</p>
<p>
I remember being exposed to Logo way back in high school. All I recall about Logo is the <a href="http://en.wikipedia.org/wiki/Turtle_graphics">turtle graphics</a>, and the primitive digital Etch-a-Sketch drawings you could create with it. What I didn't realize is that Logo is "an easier to read adaptation of the Lisp language.. [with] significant facilities for handling lists, files, I/O, and recursion", at least if the <a href="http://en.wikipedia.org/wiki/Logo_(programming_language)">Wikipedia entry on Logo</a> is to be believed.
</p>
<p>
Although I was eternally fascinated with programming, Logo held no interest for me. It seemed like a toy language, only useful for silly little graphical tricks and stunts with the turtle. But apparently there was a real language lurking underneath all that turtle graphics stuff. <a href="http://www.cs.berkeley.edu/~bh/">Brian Harvey</a> is a Berkeley professor who not only co-wrote Berkeley Lisp, but authored three books that, amazingly, <i>teach the whole of computer science using nothing but Logo</i>.
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.cs.berkeley.edu/~bh/v1-toc2.html">Computer Science Logo Style: Symbolic Computing</a><br>concentrates on natural language processing rather than the graphics most people associate with Logo.
</li>
<li>
<a href="http://www.cs.berkeley.edu/~bh/v2-toc2.html">Computer Science Logo Style: Advanced Techniques</a><br>discussions of more advanced Logo features alternate with sample projects using those features, with commentary on the structure and style of each.
</li>
<li>
<a href="http://www.cs.berkeley.edu/~bh/v3-toc2.html">Computer Science Logo Style: Beyond Programming</a><br>a brief introduction to six college-level computer science topics.
</li>
</ul>
<p>
If you have no time to skim the material, and you're still convinced Logo is a graphics language for little kids, check out <a href="http://www.cs.berkeley.edu/~bh/logo-sample.html">a sample Logo program</a> that Brian put together to impress us. I'm impressed, anyway.
</p>
<p>
Logo is much more than the thin wrapper over turtle graphics I thought it was in 1986. But turtle graphics still-- how shall I put this? -- <i>suck</i>. I took two new books with me over the holiday vacation, and both deal with something akin to the spiritual successor to Logo-- <a href="http://www.codinghorror.com/blog/archives/000777.html">the Processing environment</a>.
</p>
<p>
<a href="http://www.amazon.com/exec/obidos/ASIN/0262182629/codihorr-20"><img alt="Processing: A Programming Handbook for Visual Designers and Artists" border="0" class="at-xid-6a0120a85dcdae970b012877702fe4970c" height="374" src="https://blog.codinghorror.com/content/images/uploads/2007/12/6a0120a85dcdae970b012877702fe4970c-pi.jpg" width="290"></a>
Â 
<a href="http://www.amazon.com/exec/obidos/ASIN/0596514557/codihorr-20"><img alt="Visualizing Data" border="0" class="at-xid-6a0120a85dcdae970b012877703003970c" height="395" src="https://blog.codinghorror.com/content/images/uploads/2007/12/6a0120a85dcdae970b012877703003970c-pi.png" width="290"></a>
</p>
<p>
Both <a href="http://www.amazon.com/exec/obidos/ASIN/0262182629/codihorr-20">Processing: A Programming Handbook for Visual Designers and Artists</a> and <a href="http://www.amazon.com/exec/obidos/ASIN/0596514557/codihorr-20">Visualizing Data</a> paint a picture of the Processing environment that strongly reminds me of Logo. But Processing doesn't offer up a new Lisp syntax -- it sticks with good old-fashioned Java.
</p>
<p>
</p>
<blockquote>
If we didn't care about speed, it might make sense to use Python, Ruby, or many other scripting languages. That is especially true on the education side. If we didn't care about making a transition to more advanced languages, we'd probably avoid a C++ or Java-style syntax. But Java is a nice starting point for a sketching language because it's far more forgiving than C/C++ and also allows users to export sketches for distribution via the Web.
</blockquote>
<p>
The focus of the Processing environment is squarely on learning while doing, which is definitely one of the tenets of Logo.
</p>
<p>
</p>
<blockquote>
If you're already familiar with programming, it's important to understand how Processing differs from other development environments and languages. The Processing project encourages a style of work that builds code quickly, understanding that either the code will be used as a quick sketch or that ideas are being tested before developing a final project. This could be misconstrued as software engineering heresy. Perhaps we're not far from "hacking", but this is more appropriate for the roles in which Processing is used. Why force students or casual programmers to learn about graphics contexts, threading, and event handling methods before they can show something on the screen that interacts with the mouse? The same goes for advanced developers: why should they always need to start with the same two pages of code whenever they begin a project?
<p>
In another scenario, if you're doing scientific visualization, the ability to try things out quickly is a far higher priority than sophisticated code structure. Usually you don't know what the outcome will be, so you might build something one week to try an initial hypothesis and build something new the next week based on what was learned in the first week.
</p>
</blockquote>
<p>
It's an admirable philosophy, and it's especially appropriate for a domain-specific language. If you're interested in graphics and visualization -- if you're truly looking for a modern Logo-- leave the turtles behind and <a href="http://www.codinghorror.com/blog/archives/000777.html">check out Processing</a> instead.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-12-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/modern-logo/</guid>
</item>
</channel>
</rss>
