<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>It Came From Planet Architecture</title>
<link>https://blog.codinghorror.com/it-came-from-planet-architecture/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Coming from humble <a href="http://dc37.dawsoncollege.qc.ca/compsci/gmack/info/VBHistory.htm#Born">Visual Basic</a> 3.0 beginnings, by way of AmigaBasic, <a href="http://en.wikipedia.org/wiki/Applesoft_BASIC">AppleSoft Basic</a>, and <a href="http://www.myoldcomputers.com/museum/comp/adam.htm">Coleco Adam SmartBasic</a>, <b>I didn't get a lot of exposure to formal programming practice.</b>
</p>
<p>
One of the primary benefits of .NET is that it brings VB programmers into the fold-- we're now real programmers writing in a real language, using the same IDE as the C# and C++ guys. And like other real programmers, we are expected to use proper development <a href="http://www.microsoft.com/resources/practices/default.mspx">patterns and practices</a>, many of which were absorbed from <a href="http://community.java.net/patterns/">the Java world</a>. It's a great opportunity for the masses of VB.NET developers to improve their skills and become more productive. However, <b>there is a dark, non-productive side to the patterns and practices brigade</b>: something Joel Spolsky calls <a href="http://www.joelonsoftware.com/articles/fog0000000018.html">architecture astronauts</a>.
</p>
<p>
<img alt="an astronaut" border="0" class="at-xid-6a0120a85dcdae970b0120a85dd6fd970b" height="367" src="https://blog.codinghorror.com/content/images/uploads/2004/12/6a0120a85dcdae970b0120a85dd6fd970b-pi.jpg" width="508">
</p>
<p>
It's a phenomenon I strongly associate with the Java world:
</p>
<p>
</p>
<blockquote>When you go too far up, abstraction-wise, you run out of oxygen. Sometimes smart thinkers just don't know when to stop, and they create these absurd, all-encompassing, high-level pictures of the universe that are all good and fine, but don't actually mean anything at all.
<p>
These are the people I call Architecture Astronauts. It's very hard to get them to write code or design programs, because they won't stop thinking about Architecture. They're astronauts because they are above the oxygen level, I don't know how they're breathing. They tend to work for really big companies that can afford to have lots of unproductive people with really advanced degrees that don't contribute to the bottom line.
</p>
</blockquote>
<p>
Here's the key distinction between an architecture astronaut and a practical developer: when you're in the trenches <b>proving your ideas by implementing them in real applications. The kind used by actual users.</b> Christopher Baus articulates this best in <a href="http://www.baus.net/doersandtalkers.html">doers vs. talkers</a>:
</p>
<p>
</p>
<blockquote>
Software isn't about methodologies, languages, or even operating systems. It is about working applications. At Adobe I would have learned the art of building massive applications that generate millions of dollars in revenue. Sure, PostScript wasn't the sexiest application, and it was written in old school C, but it performed a significant and useful task that thousands (if not millions) of people relied on to do their job. There could hardly be a better place to learn the skills of building commercial applications, no matter the tools that were employed at the time. I did learn an important lesson at ObjectSpace. A UML diagram can't push 500 pages per minute through a RIP.
<p>
There are two types of people in this industry. Talkers and Doers. ObjectSpace was a company of talkers. Adobe is a company of doers. Adobe took in $430 million in revenue last quarter. ObjectSpace is long bankrupt.
</p>
</blockquote>
<p>
Patterns and practices are certainly good things, but they should <i>always</i> be framed in the context of a problem you're solving for the users. Don't succumb to the dark side.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-12-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/it-came-from-planet-architecture/</guid>
</item>
</channel>
</rss>
