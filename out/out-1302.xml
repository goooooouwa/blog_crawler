<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Web Farms and ASP.NET ViewState</title>
<link>https://blog.codinghorror.com/web-farms-and-aspnet-viewstate/</link>
<content>
                <!--kg-card-begin: markdown--><p>
If you deploy ASP.NET websites to a web farm, you may run into <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;323744">this perplexing <code>System.Web.HttpException</code></a>:
</p>
<p>
</p>
<blockquote><i>The viewstate is invalid for this page and might be corrupted </i></blockquote>
<p>
If you've installed ASP.NET 1.1 service pack 1, you may also get a much more helpful exception from <code>System.Web.UI.LosFormatter.Deserialize</code>:
</p>
<p>
</p>
<blockquote><i>Authentication of viewstate failed.  1) If this is a cluster, edit  configuration so all servers use the same validationKey and validation algorithm.  AutoGenerate cannot be used in a cluster.  2) Viewstate can only be posted back to the same page.  3) The viewstate for this page might be corrupted.</i></blockquote>
<p>
So clearly there's a problem with the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnaspnet/html/asp11222001.asp">ASP.NET viewstate</a>.
</p>
<p>
As pointed out in <a href="http://blogs.msdn.com/rich_crane/archive/2004/05/12/130693.aspx%0A">Rich Crane's blog entry</a>, <b>ASP.NET ViewState is tied to the particular server it came from by default</b>-- even though the documentation says it isn't. So when ViewState generated on server A is POST-ed back to server B, you'll get this exception. Somewhere in the pipeline, the viewstate is salted with a unique, autogenerated machine key from the originating server's machine.config file:
</p>
<p>
</p>
<pre language="xml" name="code">
&lt;!--  validation="[SHA1|MD5|3DES]" --&gt;
&lt;machineKey validationKey="AutoGenerate,IsolateApps"
decryptionKey="AutoGenerate,IsolateApps" validation="SHA1"/&gt;
</pre>
<p>
This is done to prevent users from somehow tampering with the ViewState. Any change to the ViewState data on the client will be detected. But this has a side effect: it also prevents multiple servers from processing the same ViewState. One solution is to force every server in your farm to use the same key-- generate a hex encoded 64-bit or 128-bit <a href="http://msdn.microsoft.com/library/en-us/cpgenref/html/gngrfmachinekeysection.asp">&lt;machineKey&gt;</a> and put that in each server's machine.config (note that this key is bogus and shown only for illustration; don't use it):
</p>
<p>
</p>
<pre language="xml" name="code">
&lt;!--  validation="[SHA1|MD5|3DES]" --&gt;
&lt;machineKey validation="SHA1"
validationKey="F3690E7A3143C185A6A8B4D81FD55DD7A69EEAA3B32A6AE813ECEEC" /&gt;
</pre>
<p>
Or-- and I think this is the easier approach-- you can <b>disable the keying of viewstate to a particular server</b> using a simple page directive at the top of your .aspx pages:
</p>
<p>
</p>
<pre>&lt;%@ Page Language="vb" AutoEventWireup="false" Codebehind="MyPage.aspx.vb"
Inherits="MyAssembly.MyPage" <span style="color:red">enableViewStateMac="False"</span> %&gt;</pre>
<p>
Alternately, you can modify the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/gngrfpagessection.asp">pages element</a> in Web.config:
</p>
<p>
</p>
<pre language="xml" name="code">
&lt;system.web&gt;
&lt;pages enableViewStateMac="false" /&gt;
&lt;/system.web&gt;
</pre>
<p>
Either way, works great. Who needs all that stupid security anyway?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-11-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/web-farms-and-aspnet-viewstate/</guid>
</item>
</channel>
</rss>
