<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Why Doesn't Anyone Give a Crap About Freedom Zero?</title>
<link>https://blog.codinghorror.com/why-doesnt-anyone-give-a-crap-about-freedom-zero/</link>
<content>
                <!--kg-card-begin: markdown--><p>I never quite made the transition from the Apple II series to the Mac. Instead, I migrated from my Apple II to a PC. I always thought the PC ecosystem, although <i>deeply</i> flawed, was more naturally analogous to the eclectic third party hardware and software hacker ecosystem that grew up around the semi-open Apple II hardware platform. This, to me, was the most enduring and beloved quality of the early Apple community. The Mac, in contrast, was underwritten and driven by primarily Apple software running on completely locked down Apple hardware. It's almost first party only –  about as close as you can get to a console platform and still call yourself a computer. I guess you'd say I chose Woz over Jobs. The way Jobs <a href="http://en.wikipedia.org/wiki/Macintosh_clone">ruthlessly crushed the fledgling clone market in 1997</a> only reinforced this lesson for me.</p>
<p>So let's be completely clear: <b>when you buy a new Mac, you're buying a giant hardware dongle</b> that allows you to run OS X software.</p>
<img alt="dongle management dialog" height="400" src="https://blog.codinghorror.com/content/images/uploads/2008/01/6a0120a85dcdae970b0120a86dc522970b-pi.png" width="581">
<p>You know, a <a href="http://en.wikipedia.org/wiki/Dongle">dongle</a>:</p>
<blockquote>
<p>A dongle is a small hardware device that connects to a computer, often to authenticate a piece of software. When the dongle is not present, the software runs in a restricted mode or refuses to run. Dongles are used by some proprietary vendors as a form of copy prevention or digital rights management because it is much harder to copy the dongle than to copy the software it authenticates. Vendors of software protection dongles (and dongle-controlled software) often use terms such as hardware key, hardware token, or security device in their written literature. In day-to-day use however, the jargon word "dongle" is much more commonly used.</p>
</blockquote>
<p>There's nothing harder to copy than an entire MacBook. When the dongle –  or, if you prefer, the "Apple Mac" –   is present, OS X and Apple software runs. It's a remarkably pretty, well-designed machine, to be sure. But let's not kid ourselves: it's also one hell of a dongle.</p>
<p>If the above sounds disapproving in tone, perhaps it is. There's something distasteful to me about dongles, no matter how cool they may be. But it's seductive, too. I wonder if the console model that Jobs is aping isn't some temporary evolutionary dead end, but in fact, the model for all future computing. <b>People buy consoles like the Xbox 360 and Wii because they work with a minimum of fuss.</b> Similarly, people buy Apple hardware because of the perfect synergy between the Apple hardware, OS X, iTunes, iLife, iMovie, iPhoto, and countless other software packages expressly designed to run on a closed hardware platform. "It just works." And why wouldn't it? There are no crude, selfish third parties to screw the experience up behind your back. No oddball hardware, no incompatible drivers, no more software which has to deal with a combinatorial explosion of potential configurations. Choosing to run proprietary software and hardware is just that, a choice. If it's working for consumers, who am I to judge?</p>
<p>I find Apple's brand of hardware lock-in particularly egregious. On the other hand, I run Windows, so I'm subject to my own flavor of self imposed software lock-in. Others have made different choices. In <a href="http://web.archive.org/web/20080814232602/http://diveintomark.org/archives/2008/01/17/of-canaries-and-coal-mines">of canaries and coal mines</a>, Mark Pilgrim revisits his choice to <a href="http://web.archive.org/web/20080811183542/http://diveintomark.org/archives/2006/06/02/when-the-bough-breaks">abandon Apple's proprietary software model</a> for the world of free software.</p>
<blockquote>
<p>18 months later, Apple has sold 4 million <a href="http://web.archive.org/web/20080827175841/http://diveintomark.org/archives/2007/10/04/if-wishes-were-iphones">crippled phones</a>, billions of crippled songs, and people are predicting that <a href="http://www.appleinsider.com/articles/08/01/14/mac_sales_up_over_40_percent_year_over_year.html">Mac sales are up 40% year over year</a>. And I wouldn't bet against their new movie rental venture either.</p>
<p>So after 18 months, I think we can safely say that no, Cory and I were not "canaries in the coal mine." There are not hordes of fed-up consumers rejecting Apple's vision of cryptographic lock-in. There are not mass graves where people ceremoniously dump their crippled, non-general-purpose computing devices. Outside of <a href="http://planet.debian.org/">Planet Debian</a> and my own personal echo chamber, <b>nobody gives a sh*t about Freedom 0.</b></p>
<p>You knew this, of course, but I just wanted to let you know that I knew, too.</p>
</blockquote>
<p>Maybe I'm a hypocrite. Maybe the issue cuts philosophically deeper than mere dongles. Maybe it's not only about the freedom to run your operating system on whatever hardware you wish, but also the freedom to run whatever software you want for whatever purpose you need, in perpetuity. That's <a href="http://web.archive.org/web/20080818112510/http://diveintomark.org/archives/2004/05/14/freedom-0">Freedom Zero</a>:</p>
<blockquote>
<p><a href="http://www.gnu.org/philosophy/free-sw.html">Freedom 0 is the freedom to run the program, for any purpose</a>. WordPress gives me that freedom; Movable Type does not. It never really did, but it was free enough so we all looked the other way, myself included. But Movable Type 3.0 changes the rules, and prices me right out of the market. I do not have the freedom to run the program for any purpose; I only have the limited set of freedoms that Six Apart chooses to bestow upon me, and every new version seems to bestow fewer and fewer freedoms. With Movable Type 2.6, I was allowed to run 11 sites. In 3.0, that right will cost me $535.</p>
<p>WordPress is Free Software. Its rules will never change. In the event that the WordPress community disbands and development stops, a new community can form around the orphaned code. It's happened once already. In the extremely unlikely event that every single contributor (including every contributor to the original b2) agrees to relicense the code under a more restrictive license, I can still fork the current GPL-licensed code and start a new community around it. There is always a path forward. There are no dead ends.</p>
<p>Movable Type is a dead end. In the long run, the utility of all non-Free software approaches zero. All non-Free software is a dead end.</p>
</blockquote>
<p>It's compelling rhetoric. As a software developer, there's no denying that open source software is a powerful and transformative force in modern software development.</p>
<p>The console model, and Apple's de-facto first party development model, are about as far as you can get from Mark's freedom zero –  instead, you get <b>zero freedom</b>. You hand the vendor a pile of cash and they allow you to do a handful of specific things with their device, for only so long as they're inclined to do so. It's hardly fair. In fact it's completely <i>unfair</i>; they can legally pull the rug out from under you at any time. But it can still result in some incredibly useful relationships with products that solve very real problems for the user. As Jaron Lanier notes, <a href="http://discovermagazine.com/2007/dec/long-live-closed-source-software">the iPhone was not a product of freedom zero</a>:</p>
<blockquote>
<p>Twenty-five years later, that concern seems to have been justified. Open wisdom-of-crowds software movements have become influential, but they haven't promoted the kind of radical creativity I love most in computer science. If anything, they've been hindrances. Some of the youngest, brightest minds have been trapped in a 1970s intellectual framework because they are hypnotized into accepting old software designs as if they were facts of nature. Linux is a superbly polished copy of an antique, shinier than the original, perhaps, but still defined by it.</p>
<p>Before you write me that angry e-mail, please know I'm not anti-open source. I frequently argue for it in various specific projects. But a politically correct dogma holds that open source is automatically the best path to creativity and innovation, and that claim is not borne out by the facts.</p>
<p>Why are so many of the more sophisticated examples of code in the online world –  like the page-rank algorithms in the top search engines or like Adobe's Flash –  the results of proprietary development? Why did the adored iPhone come out of what many regard as the most closed, tyrannically managed software-development shop on Earth? An honest empiricist must conclude that while the open approach has been able to create lovely, polished copies, it hasn't been so good at creating notable originals. Even though the open-source movement has a stinging countercultural rhetoric, it has in practice been a conservative force.</p>
</blockquote>
<p>So I'll ask again, since Mark brought it up: <b>why <i>doesn't</i> anyone give a crap about freedom zero?</b></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-01-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-doesnt-anyone-give-a-crap-about-freedom-zero/</guid>
</item>
</channel>
</rss>
