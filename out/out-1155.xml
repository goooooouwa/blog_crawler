<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Multiple Core CPU Futures</title>
<link>https://blog.codinghorror.com/multiple-core-cpu-futures/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Both AMD and Intel now have dual core CPUs on the market, in the form of the <a href="http://techreport.com/reviews/2005q2/athlon64-x2/index.x?pg=1">Athlon 64 X2</a> and the <a href="http://www20.tomshardware.com/cpu/20050405/index.html">Pentium 4 D</a> series. They may be expensive now, but I fully expect dual core architectures to trickle down to the rest of the lineup within the next two years.
</p>
<p>
I've mentioned before that I'm <a href="http://www.codinghorror.com/blog/archives/000029.html">a big fan of the Athlon 64 series</a> because it compiles code so much faster* than the equivalent Pentium 4. This advantage naturally extends to the dual core Athlon 64 X2 as you can see in these <a href="http://www.anandtech.com/cpuchipsets/showdoc.aspx?i=2397&amp;p=25">multitasking compilation benchmarks</a>:
</p>
<p>
<img alt="AMD and Intel dual core multitasking compilation results" class="at-xid-6a0120a85dcdae970b0128776fb06f970c" height="337" src="https://blog.codinghorror.com/content/images/uploads/2005/05/6a0120a85dcdae970b0128776fb06f970c-pi.png" width="450">
</p>
<p>
<b>The Athlon 64 benefits more than the Pentium 4 from the dual core design</b> because it has a superior architecture-- specifically, an on-die memory controller-- and because it had no special threading support prior to the dual core update. Intel <a href="http://blogs.msdn.com/oldnewthing/archive/2004/09/13/228780.aspx">primed the market for better threading support with Hyperthreading</a>, and we're now poised to reap the benefits with the true dual core designs.
</p>
<p>
Dual core designs are fantastic from a technology standpoint, but as a software developer, it's a scary trend. If the only way we can increase speed is through extra parallelism (aka threading), our coding and debugging burden just went through the roof. See <a href="http://www.codinghorror.com/blog/archives/000169.html">Threading, Concurrency, and the most powerful psychokinetic explosive in the Universe</a> for my take on that. The challenge of increasing speed starts to <a href="http://blogs.msdn.com/volkerw/archive/2005/05/02/413985.aspx">shift from the hardware to the software</a>:
</p>
<p>
</p>
<blockquote>
But how will users benefit from multiple cores? Will the apps run faster just because there a now 2 processors on a single chip? I guess not really. There are benefits for the OS that may relate to improved performance. But the app itself? Well, you can run multiple instances easier and better for one. But what about a single app? <b>A single threaded (client) app that has been designed with a single processor and a single thread of execution in mind, will not benefit and therefore users will not benefit from multiple processors or multiple cores.</b>
</blockquote>
<p>
And it gets worse. Check out this <a href="http://www.infoworld.com/article/05/05/02/18NNruiz_1.html">interview with Hector Ruiz</a>, the CEO of AMD:
</p>
<blockquote>
IW: What lies beyond dual-core for AMD?
<p>
HR: <b>It's hard to tell right now beyond four cores. The probability of having a four-core product is very high.</b> There's a lot of work going on with our engineering teams and with our customers to figure out where we go beyond that. There are two or three options that look pretty attractive. We'll be narrowing down our choices.
</p>
<p>
IW: It is interesting that you did not say that four-core is a certainty. Are you looking at different ways of improving performance other than doubling the number of cores?
</p>
<p>
HR: At the end of the day, for us, it's going to be what our customers want. <b>Making transistors is pretty trivial. We can make hundreds of millions of transistors. Figuring out what the hell to do with those transistors is the challenge.</b> One could choose, for example, to have heterogeneous cores. You could have two cores that are different instead of the same. That opens up a completely different array of possibilities.
</p>
</blockquote>
<p>
Once two cores become standard, you can expect four cores to follow in short order. One day, <b>you won't be able to throw money at your hardware to make your app run faster</b>. You'll have no choice but to pour that money into parallelizing the algorithms inside your app, which is a far more difficult proposition.
</p>
<p>
* It's also significantly faster in games, not that <a href="http://www.eagames.com/official/battlefield/battlefield2/us/home.jsp">I play those</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-05-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/multiple-core-cpu-futures/</guid>
</item>
</channel>
</rss>
