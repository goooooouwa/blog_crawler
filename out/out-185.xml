<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Xanadu Dream</title>
<link>https://blog.codinghorror.com/the-xanadu-dream/</link>
<content>
                <!--kg-card-begin: markdown--><p>Links are the <a href="https://blog.codinghorror.com/dont-click-here-the-art-of-hyperlinking/">fundamental building blocks of the web</a>. And every time I click on one, I can't help recalling the odd visionary who came up with the original idea of clickable links in text, aka <a href="http://en.wikipedia.org/wiki/Hypertext">hypertext</a>, in 1963 -- <a href="http://en.wikipedia.org/wiki/Ted_Nelson">Ted Nelson</a>.</p>
<p>Ted Nelson is, shall we say, a <i>character</i>. He has gone on record many times with the four maxims that guide his life. He isn't shy about sharing them with anyone he meets:</p>
<ul>
<li>most people are fools</li>
<li>most authority is malignant</li>
<li>God does not exist</li>
<li>everything is wrong</li>
</ul>
<p>And that, in a nutshell, is pretty much everything you need to know about Ted Nelson. He is <b>the archetypal borderline autistic, non-conformist, free-thinking technologist</b>. Any resemblance between Ted and your average programmer is, I'm sure, completely coincidental. That's why his story is so fascinating to me. It hits close to home.</p>
<p>Like most programmers, Ted's reach often exceeded his grasp. Ted's vision of hypertext was far more grandiose than the motley assortment of links that is today's web. His vision was (and is) a bit of computer history lore that has become the stuff of legend: <a href="http://en.wikipedia.org/wiki/Project_Xanadu">Project Xanadu</a>.</p>
<blockquote>
<p>Xanadu, a global hypertext publishing system, is the longest-running vaporware story in the history of the computer industry. It has been in development for more than 30 years. This long gestation period may not put it in the same category as the Great Wall of China, which was under construction for most of the 16th century and still failed to foil invaders, but, given the relative youth of commercial computing, Xanadu has set a record of futility that will be difficult for other companies to surpass. The fact that Nelson has had only since about 1960 to build his reputation as the king of unsuccessful software development makes Xanadu interesting for another reason: the project's failure (or, viewed more optimistically, its long-delayed success) coincides almost exactly with the birth of hacker culture. Xanadu's manic and highly publicized swerves from triumph to bankruptcy show a side of hackerdom that is as important, perhaps, as tales of billion-dollar companies born in garages.</p>
<p><a href="http://www.imdb.com/title/tt0081777/"><img alt="xanadu-movie.jpg" border="0" class="at-xid-6a0120a85dcdae970b0120a86e2635970b" height="241" src="https://blog.codinghorror.com/content/images/uploads/2009/10/6a0120a85dcdae970b0120a86e2635970b-pi.jpg" width="417"></a></p>
<p>Among people who consider themselves insiders, Nelson's Xanadu is sometimes treated as a joke, but this is superficial. Nelson's writing and presentations inspired some of the most visionary computer programmers, managers, and executives - including Autodesk Inc. founder John Walker - to pour millions of dollars and years of effort into the project. Xanadu was meant to be a universal library, a worldwide hypertext publishing tool, a system to resolve copyright disputes, and a meritocratic forum for discussion and debate. By putting all information within reach of all people, Xanadu was meant to eliminate scientific ignorance and cure political misunderstandings. And, on the very hackerish assumption that global catastrophes are caused by ignorance, stupidity, and communication failures, Xanadu was supposed to save the world.</p>
</blockquote>
<p>The above text is excerpted from <a href="https://www.wired.com/1995/06/xanadu/">the definitive 1995 Wired article on Project Xanadu</a>, which is still as electrifying to read today as it was then. The hubris and sheer scale of the Xanadu dream are at turns both inspiring and desperately, hopelessly out of touch.</p>
<p>Xanadu has 17 rules defining its behavior. As you're reading through this list, ask yourself <b>how many of these rules are satisfied by the current world wide web</b>, even in part:</p>
<ol>
<li>Every Xanadu server is uniquely and securely identified.</li>
<li>Every Xanadu server can be operated independently or in a network.</li>
<li>Every user is uniquely and securely identified.</li>
<li>Every user can search, retrieve, create and store documents.</li>
<li>Every document can consist of any number of parts each of which may be of any data type.</li>
<li>Every document can contain links of any type including virtual copies ("transclusions") to any other document in the system accessible to its owner.</li>
<li>Links are visible and can be followed from all endpoints.</li>
<li>Permission to link to a document is explicitly granted by the act of publication.</li>
<li>Every document can contain a royalty mechanism at any desired degree of granularity to ensure payment on any portion accessed, including virtual copies ("transclusions") of all or part of the document.</li>
<li>Every document is uniquely and securely identified.</li>
<li>Every document can have secure access controls.</li>
<li>Every document can be rapidly searched, stored and retrieved without user knowledge of where it is physically stored.</li>
<li>Every document is automatically moved to physical storage appropriate to its frequency of access from any given location.</li>
<li>Every document is automatically stored redundantly to maintain availability even in case of a disaster.</li>
<li>Every Xanadu service provider can charge their users at any rate they choose for the storage, retrieval and publishing of documents.</li>
<li>Every transaction is secure and auditable only by the parties to that transaction.</li>
<li>The Xanadu client-server communication protocol is an openly published standard. Third-party software development and integration is encouraged.</li>
</ol>
<p>It is instructive, then, to consider the primary ways in which the modern web is functionally broken:</p>
<ul>
<li>
<b>Link rot</b>. The odds of a hyperlink working are inversely proportional to the age of that hyperlink. Old links frequently break, because the server hosting the content disappears for any number of reasons over time. I've gotten to the point where I dread clicking on links from old web pages, because the per-click success rate is so abysmally low.</li>
<li>
<b>Every website has unique usernames and passwords</b>. There is almost no <a href="https://blog.codinghorror.com/openid-does-the-world-really-need-yet-another-username-and-password/">reliable centralized form of identity on the internet</a>, and those few that do exist are often poisoned by explicit commercial affiliation, such as Facebook Connect and Microsoft Passport. This is why curated anonymous, lightweight participation dominates the net -- best illustrated by Wikipedia.</li>
<li>
<b>No redundancy</b>. If content is driven offline by temporary high traffic levels or, worse, catastrophic data loss, there may not be any way to recover that content. I know that Digg has services which auto-mirror highly rated links because Digg traffic can be so toxic to the destination links. (Ironically, all duggmirror.com links redirect to amazon.com now, which illustrates how ephemeral all this stuff tends to be.) I suppose if you're lucky the <a href="http://www.archive.org/">wayback machine</a> will eventually pick up a historical copy of the content, or the <a href="http://www.googleguide.com/cached_pages.html">Google cache</a> will hold a copy for some unknown amount of time while the site is offline. You'd probably have better odds praying for missing content to reappear.</li>
</ul>
<p>Let's put aside the more ambitious parts of Project Xanadu for the moment. <b>The current world wide web does basically <i>one</i> thing: simple, stupid, mindless hyperlinks</b>. But even that alone was enough to build a functional and useful internet for the world. And Google was able to build a <a href="https://blog.codinghorror.com/markov-and-you/">zillion dollar algorithm</a> out of discovering the relationship between those dumb hyperlinks.</p>
<p>All that, when the most fundamental building block of the web, the hyperlink, <i>barely works at all</i>. Hyperlinks are fraught with peril and pitfalls even under the best of conditions. The current state of hyperlinking is almost literally the stupidest thing we could build that works. Frankly, the current system sucks beyond belief, as Ted himself notes:</p>
<blockquote>
<p>HTML is precisely what we were trying to <i>prevent</i> -- ever-breaking links, links going outward only, quotes you can't follow to their origins, no version management, no rights management.</p>
</blockquote>
<p>The next time you're about to embark on a grandiose, glorious software Xanadu Dream of your own, <a href="http://www.25hoursaday.com/weblog/2009/09/27/DuctTapeProgrammersAndTheCultureOfComplexityInSoftwareProjects.aspx">take Dare's advice</a>.</p>
<blockquote>
<p>The bottom line is that a lot of the time it's OK to create a solution that solves 80% of the problem. Always remember that shipping is a feature.</p>
</blockquote>
<p>Consider the reality of what's actually possible, what people can understand, and what us all too human programmers can practically implement. It might not be the Xanadu you dreamed of -- heck, it might even <i>suck</i> â€“ but it'll at least have a fighting chance of <b>existing in reality rather than fantasy</b>.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-10-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-xanadu-dream/</guid>
</item>
</channel>
</rss>
