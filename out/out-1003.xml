<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Conversations with Erich Gamma</title>
<link>https://blog.codinghorror.com/conversations-with-erich-gamma/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Artima has another great interview series, this time with <b>Erich Gamma</b>. You know, Erich Gamma: <a href="http://www.codinghorror.com/blog/archives/000200.html">Gang of Four</a>, <a href="http://www.junit.org/index.htm">JUnit</a>, <a href="http://www.eclipse.org/">Eclipse</a>. As you might expect from such a notable developer, it's full of great advice. Like this section on <b>avoiding frameworkitis</b>:
</p>
<p>
</p>
<blockquote>
Frameworkitis is the disease that <a href="http://msdn.microsoft.com/practices/guidetype/appblocks/">a framework wants to do too much for you</a> or it does it in a way that you don't want but you can't change it. It's fun to get all this functionality for free, but it hurts when the free functionality gets in the way. But you are now tied into the framework. To get the desired behavior you start to fight against the framework. And at this point you often start to lose, because it's difficult to bend the framework in a direction it didn't anticipate. Toolkits do not attempt to take control for you and they therefore do not suffer from frameworkitis.
<p>
If we do frameworks, we try to make them small frameworks. We prefer many small frameworks over one heavyweight framework. <b>The bigger the framework becomes, the greater the chances that it will want to do too much, the bigger the learning curves become, and the more difficult it becomes to maintain it.</b> If you really want to take the risk of doing frameworks, you want to have small and focused frameworks that you can also probably make optional. If you really want to, you can use the framework, but you can also use the toolkit. That's a good position that avoids this frameworkitis problem, where you get really frustrated because you have to use the framework. Ideally I'd like to have a toolbox of smaller frameworks where I can pick and choose, so that I can pay the framework costs as I go.
</p>
</blockquote>
<p>
Highly recommended.
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.artima.com/lejava/articles/gammadpP.html">How to Use Design Patterns</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/reuseP.html">Erich Gamma on Flexibility and Reuse</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/designprinciplesP.html">Design Principles from Design Patterns</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/patterns_practiceP.html">Patterns and Practice</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/eclipse_cultureP.html">Eclipse's Culture of Shipping</a>
</li>
</ul>
<p>
If you enjoyed that, you'll also enjoy a similar series of interviews with the Pragmatic Programmers. The entire series is linked at the bottom of <a href="http://www.codinghorror.com/blog/archives/000052.html">this post</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-11-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/conversations-with-erich-gamma/</guid>
</item>
</channel>
</rss>
