<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>I Just Logged In As You: How It Happened</title>
<link>https://blog.codinghorror.com/i-just-logged-in-as-you-how-it-happened/</link>
<content>
                <!--kg-card-begin: markdown--><p>
In my previous post <a href="http://www.codinghorror.com/blog/archives/001262.html">I Just Logged In As You</a>, I disclosed that someone was logging in as me -- specifically because they <b>discovered my password</b>. But how?
</p>
<p>
If I wanted to discover someone's password, I can think of a few ways:
</p>
<p>
</p>
<ol>
<li>
<b>Educated guess.</b> If you know someone's birthday, their pets, their children's names, favorite movies, and so on  -- these are all potential passwords in various forms. This is classic social engineering, and it can work; that's essentially <a href="http://www.wired.com/threatlevel/2008/09/palin-e-mail-ha/">how Sarah Palin's email was hacked</a>. While my password <i>was</i> weak, it wasn't anything you could reasonably guess based on public information available about me.
<br><br>
</li>
<li>
<b>Brute force dictionary attack.</b> If login attempts aren't meaningfully <a href="http://www.codinghorror.com/blog/archives/001228.html">rate limited</a>, then you can attempt a dictionary attack and pray the target password is a simple dictionary word. That's how <a href="http://www.wired.com/threatlevel/2009/01/professed-twitt/">one Twitter administrator's account was compromised</a>. But failing to rate limit password attempts is strictly amateur hour stuff (and I'd argue borderline incompetence); no OpenID provider of any consequence would make this mistake.
<br><br>
</li>
<li>
<b>Interception.</b> Eavesdrop on the user in any way you can to discover their password: install a hardware keylogger, software keylogger, or perform network sniffing of unencrypted traffic. If you have physical access to the user, low-tech analog methods such as watching over someone's shoulder as they type in their password are effectively the same thing. While I can't <i>rule out</i> paranoid fantasies of keyloggers, if my machine was so thoroughly <a href="http://dir.salon.com/story/tech/feature/2002/08/28/0wnz0red/index.html">0wnz0red</a>, I think my OpenID password would have been the least of my worries at that point.
<br><br>
</li>
<li>
<b>Impersonation.</b> Commonly known as phishing. You present the user with a plausible looking login page for a service they already use, and hope they enter their credentials. Alternately, in the depressingly common Web 2.0 style, you can just <a href="http://www.codinghorror.com/blog/archives/001128.html">demand that users give up their credentials</a> for some trivial integration feature with the target website. I consider both forms of phishing, and I call it <a href="http://www.codinghorror.com/blog/archives/000852.html">the forever hack</a> for good reason.
</li>
</ol>
<p>
So which of these methods did this person use to obtain my password? <b>None of them</b>.
</p>
<p>
</p>
<blockquote>
It wasn't a guess and it wasn't brute force.
<p>
I guess I can tell you, so you don't fall into this trap again.  <b>There's a site I help out with that doesn't salt their passwords.</b> They're MD5 encrypted, but if you've got a dictionary password, it's very easy to use a reverse-MD5 site to get the original.  I was able to figure out you were a user on the site some time back, and realized I could do this, if only I knew your openid provider...
</p>
<p>
(As an aside, I complained to the head of the site months ago that he ought to start salting passwords for this exact reason.  I also run my passwords I need to be secure through a few reverse-hash websites, just to ensure that it's not stored somewhere.)
</p>
<p>
So, the unethical part was actually looking up this information in the first place.  I apologize. But like I said, better than someone else getting into this data.
</p>
</blockquote>
<p>
Hey, it looks like <b><a href="http://www.codinghorror.com/blog/archives/000953.html">you're storing passwords incorrectly!</a></b>
</p>
<p>
<img alt="we have met the enemy and he is us" border="0" class="at-xid-6a0120a85dcdae970b01287770901f970c" height="425" src="https://blog.codinghorror.com/content/images/uploads/2009/05/6a0120a85dcdae970b01287770901f970c-pi.png" width="279">
</p>
<p>
We have met the enemy, and he is.. programmers just like us. Seriously, go <a href="http://www.codinghorror.com/blog/archives/000953.html">read that blog entry</a>. It is exactly, <i>exactly</i> what just happened to me.
</p>
<p>
When I say programmers like us, I mean me, too. I acknowledge that I am also at fault here, for...
</p>
<p>
</p>
<ul>
<li>using the same low-value credential password in two places.
</li>
<li>picking a particularly weak password.
</li>
<li>not using a high-value credential for something that clearly deserved it, namely, my moderator login to Stack Overflow.
</li>
</ul>
<p>
All of this is true, and I shoulder the blame for that. Perhaps I should <a href="http://www.codinghorror.com/blog/archives/000360.html">take my own advice</a>. A moment of weakness, I suppose.
</p>
<p>
The important thing to take away from this, if you're a programmer working on an application that stores user credentials, is to <b><i>get the hell out of the business of storing user credentials!</i></b> As we've seen today, the world is full of stupid users like me who do incredibly stupid things. Are you equipped and willing do everything necessary to protect idiots like me from myself? That's a key part of the promise of OpenID, and one of the reasons we chose it as the authentication system for Stack Overflow. As one commenter <a href="http://www.reddit.com/r/programming/comments/8hpog/i_just_logged_in_as_you/c09bq23">noted</a> on Reddit:
</p>
<p>
</p>
<blockquote>
I, for one, think that my OpenID provider is more secure than the average guy running a forum.
</blockquote>
<p>
Exactly. We outsourced our user credential system to people who are much better at it than us (well, depending on which OpenID provider you pick). And also because <a href="http://www.codinghorror.com/blog/archives/001121.html">we didn't think the world needed yet another username and password</a>. You're welcome. I think.
</p>
<p>
So, what have we learned?
</p>
<p>
</p>
<ol>
<li>Programmers are the enemy.
</li>
<li>Hey .. wait a second, <i>I'm</i> a programmer!
</li>
<li>
<code>GOTO 1</code>
</li>
</ol>
<p>
(Oh, and credit to <a href="http://joose-js.blogspot.com/">Malte</a>, the first commenter to correctly identify what the likely password vulnerability was -- less than an hour after the entry was posted!)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2009-05-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-just-logged-in-as-you-how-it-happened/</guid>
</item>
</channel>
</rss>
