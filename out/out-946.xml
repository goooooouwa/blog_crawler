<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Keeping Private Keys Private</title>
<link>https://blog.codinghorror.com/keeping-private-keys-private/</link>
<content>
                <!--kg-card-begin: markdown--><p>
After I posted the CodeProject article <a href="http://www.codeproject.com/dotnet/SimpleEncryption.asp">.NET Encryption Simplified</a>, a reader asked this question in the comments:
</p>
<p>
</p>
<blockquote><i>
I would like to know what your thoughts are on private key storage in applications. I believe the recommended practice is to use the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsecure/html/windataprotection-dpapi.asp">DPAPI</a>, but I have found this to be too cumbersome for practical use. I would like to encrypt certain aspects of my apps and even parts of my database, but without secure key storage it is pointless. Thoughts?
</i></blockquote>
<p>
The class in that article is suitable for most encryption scenarios, but I was using it in a web service. That meant <b>I had the luxury of keeping my private key on a different physical server</b>. I had never even considered the problem of private key storage on the same machine!
</p>
<p>
At the risk of belaboring the obvious, asymmetric encryption hinges on keeping the public key public, and the private key private. This is a snap if you're doing cross-machine calls. You slap the private key on your server, and freely distribute the public key to clients. The private key is never transmitted over the network, so unless a disgruntled user manages to battle his way into your data center and <i>physically access your server</i>, you're secure. But if all the encryption work you're doing is on the local machine, then the private key and the public key are both stored somewhere on the local machine. <b>How in the world do you keep the private key away from the prying eyes of the local user?</b>
</p>
<p>
It seems like an insoluble problem to me, since users have complete physical control over their own machines. However, a user named "bigals" posted this helpful response in the comments:
</p>
<p>
</p>
<blockquote>
<i>
First of all, convert your private key to a PKCS12 file, which is a nice little container for private keys. Then you have a few options for <b>storing the private key</b>:
</i><p>
</p>
<ol>
<li>
<b>In your machine's key store.</b><br>
This is not as safe as the user store, as it can be accessed by any user if they have enough permissions.
</li>
<li>
<b>In the current user's key store.</b><br>
This is more secure than the machine store, because it's protected by windows ACL's. But it can play havok on you if passwords and permissions are changed for that particular user.
</li>
<li>
<b>In the registry.</b><br>
You can use ACL's to protect the registry key.
</li>
<li>
<b>On a <a href="http://www.microsoft.com/technet/security/topics/identitymanagement/scard.mspx">smart card</a>.</b>
<ul>
<li>The CryptoAPI has native support for this.
</li>
<li>Smart cards can be removed and secured.
</li>
<li>The keys are never stored on the machine, so it is a very secure solution.
</li>
</ul>
</li>
</ol>
<p>
Remember, never store an instance of your keys or passwords in a string!
The .NET GC does not clear these values very well, and they are visible in the string table memory for anyone to steal! .NET 2.0 has a new object called <a href="http://msdn2.microsoft.com/system.security.securestring.aspx">SecureString</a>, which <a href="http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx">keeps strings in encrypted memory</a>.
</p>
</blockquote>
<p>
This is another reason why <a href="http://www.codinghorror.com/blog/archives/000421.html">the user comments are the best part of a blog</a>. A two-way dialog between author and reader is often the difference between good content and <i>great</i> content.
</p>
<p>
The only way to keep a private key truly private is to store it on a completely different machine. If you must store the private key on the same machine, some vulnerability is inevitable. You can only make it <i>inconvenient</i> for a user to find the private key through software protection. If you want to make it really <i>difficult</i>, you have to <a href="http://www.free60.org/wiki/Documentation">embed the private key in specialized hardware, like the Xbox 360 does</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-02-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/keeping-private-keys-private/</guid>
</item>
</channel>
</rss>
