<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Let's Play Planning Poker!</title>
<link>https://blog.codinghorror.com/lets-play-planning-poker/</link>
<content>
                <!--kg-card-begin: markdown--><p>
One of the most challenging aspects of any software project is estimation-- determining how long the work will take. It's so difficult, some call it a black art. That's why I highly recommend McConnell's book, <a href="http://www.amazon.com/exec/obidos/ASIN/0735605351/codihorr-20">Software Estimation: Demystifying the Black Art</a>; it's the definitive work on the topic. Anyone running a software project should own a copy. If you think you <i>don't</i> need this book, take the estimation challenge: <a href="http://www.codinghorror.com/blog/archives/000625.html">how good an estimator are you?</a>
</p>
<p>
How'd you do? If you're like the rest of us, <b><i>you suck</i></b>. At estimating, I mean.
</p>
<p>
Given the uncertainty and variability around planning, it's completely appropriate that there's a game making the rounds in agile development circles called <a href="http://en.wikipedia.org/wiki/Planning_poker">Planning Poker</a>.
</p>
<p>
<a href="http://www.crisp.se/planningpoker/"><img alt="Planning Poker card deck" border="0" class="at-xid-6a0120a85dcdae970b012877701ea0970c" height="333" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877701ea0970c-pi.jpg" width="506"></a>
</p>
<p>
There are even <a href="http://www.crisp.se/planningpoker/">cards for it</a>, which makes it feel a lot more poker-ish in practice. And like poker, the stakes in software development are real money-- although we're usually playing with someone else's money. If you have a distributed team, card games may seem like a cruel joke. But there's a nifty <a href="http://www.planningpoker.com/">web-based implementation of Planning Poker</a>, too.
</p>
<p>
Planning Poker is a form of the estimation technique known as <a href="http://www.stellman-greene.com/aspm/content/view/23/26/">Wideband Delphi</a>. Wideband Delphi was <a href="http://www.rand.org/pubs/research_memoranda/RM5888/">created by the RAND corporation in 1968</a>. I assume by Delphi they're referring to <a href="http://en.wikipedia.org/wiki/Pythia">the oracle at Delphi</a>. If anything says "we have no clue how long this will take", it's naming your estimation process after <a href="http://news.nationalgeographic.com/news/2001/08/0814_delphioracle.html">ancient, gas-huffing priestesses</a> who offered advice in the form of cryptic riddles. It doesn't exactly inspire confidence, but that's probably a good expectation to set, given the risks of estimation.
</p>
<p>
Planning Poker isn't quite as high concept as Wideband Delphi, but the process is <a href="http://www.planningpoker.com/detail.html">functionally identical</a>:
</p>
<p>
</p>
<ol>
<li>Form a group of no more than 10 estimators and a moderator. The product owner can participate, but cannot be an estimator.
</li>
<li>Each estimator gets a deck of cards: 0, 1, 2, 3, 5, 8, 13, 20, 40, and 100.
</li>
<li>The moderator reads the description of the user story or theme. The product owner answers brief questions from the estimators.
</li>
<li>Every estimator selects an estimate card and places it face down on the table. After all estimates are in, the cards are flipped over.
</li>
<li>If the estimates vary widely, the owners of the high and low estimates discuss the reasons why their estimates are so different. All estimators should participate in the discussion.
</li>
<li>Repeat from step 4 until the estimates converge.
</li>
</ol>
<p>
There's nothing magical here; it's the power of group dialog and <a href="http://www.codinghorror.com/blog/archives/000611.html">multiple estimate averaging</a>, delivered in an approachable, fun format.
</p>
<p>
Planning Poker is a good option, particularly if your current estimation process resembles throwing darts at a printout of a Microsoft Project Gantt chart. But <b>the best estimates you can possibly produce are those based on historical data</b>. Steve McConnell has <a href="http://www.amazon.com/exec/obidos/ASIN/0735605351/codihorr-20">a whole chapter on this</a>, and here's his point:
</p>
<p>
</p>
<blockquote>
If you haven't previously been exposed to the power of historical data, you can be excused for not currently having any data to use for your estimates. But now that you know how valuable historical data is, you don't have any excuse not to collect it. Be sure that when you reread this chapter next year, you're not still saying "I wish I had some historical data!"
</blockquote>
<p>
In other words, if you don't have historical data to base your estimates on, <i>begin collecting it as soon as possible</i>. There are tools out there that can help you do this. Consider the latest version of <a href="http://www.fogcreek.com/FogBugz/">Fogbugz</a>; its marquee feature is <a href="http://www.fogcreek.com/FogBugz/learnmore.html#hist_PredictShipDates">evidence-based scheduling</a>. Armed with the right historical evidence, you can..
</p>
<p>
<b>Predict when your software will ship</b>. Here you can see we have a 74% chance of shipping by December 17th.
</p>
<p>
<img alt="fogbugz 6: predict ship dates" border="0" class="at-xid-6a0120a85dcdae970b012877701eb7970c" height="309" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877701eb7970c-pi.png" width="579">
</p>
<p>
<b>Determine which developers are on the critical path</b>. Some developers are better at estimating than others; you can shift critical tasks to developers with a proven track record of meeting their estimates.
</p>
<p>
<img alt="fogbugz 6: developer ship dates" border="0" class="at-xid-6a0120a85dcdae970b012877701ecb970c" height="298" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877701ecb970c-pi.png" width="573">
</p>
<p>
<b>See how accurate an estimator you really are</b>. How close are your estimates landing to the actual time the task took?
</p>
<p>
<img alt="fogbugz 6: developer history" border="0" class="at-xid-6a0120a85dcdae970b012877701ede970c" height="284" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877701ede970c-pi.png" width="282">
</p>
<p>
<b>See your predicted ship dates change over time</b>. We're seeing the 5%, 50%, and 95% estimates on the same graph here. Notice how they converge as development gets further along; this is evidence that the project will eventually complete, and you won't be stuck in some kind of <a href="http://en.wikipedia.org/wiki/Duke_Nukem_Forever#Development_history">Duke Nukem Forever limbo</a>.
</p>
<p>
<img alt="fogbugz 6: ship date over time" border="0" class="at-xid-6a0120a85dcdae970b012877701eef970c" height="305" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877701eef970c-pi.png" width="576">
</p>
<p>
Witness, my friends, the power of historical data on a software project.
</p>
<p>
The dirty little secret of evidence based scheduling is that collecting this kind of historical data isn't trivial. Garbage in, garbage out. It takes discipline and concerted effort to enter the effort times-- even greatly simplified versions-- and to keep them up to date as you're working on tasks. Fogbugz does its darndest to make this simple, but your team has to buy into the time tracking philosophy for it to work.
</p>
<p>
You don't have to use Fogbugz. But however you do it, I urge you to begin capturing historical estimation data, if you're not already. It's a tremendous credit to Joel Spolsky that he made this crucial feature the centerpiece of the <a href="http://www.fogcreek.com/FogBugz/">new Fogbugz</a>. I'm not aware of any other software lifecycle tools that go to such great lengths to help you produce good estimates.
</p>
<p>
Planning Poker is a reasonable starting point.  But the fact that two industry icons, Joel Spolsky and Steve McConnell, are both hammering home the same point isn't a coincidence. Historical estimate data is fundamental to the science of software engineering. Over time, try to reduce your reliance on outright gambling, and begin basing your estimates on <i>real data</i>. Without some kind of institutional estimation memory-- without <b>appreciating the power of historical data</b>-- you're likely to keep <a href="http://www.codinghorror.com/blog/archives/000889.html">repeating the same estimation errors over and over</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-10-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/lets-play-planning-poker/</guid>
</item>
</channel>
</rss>
