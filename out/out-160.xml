<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>What's Wrong With CSS</title>
<link>https://blog.codinghorror.com/whats-wrong-with-css/</link>
<content>
                <!--kg-card-begin: markdown--><p>
We're currently in the midst of a <a href="http://www.codinghorror.com/blog/2005/12/the-css-zen-garden-and-aspnet.html">CSS Zen Garden type excerise</a> on our family of Q&amp;A websites, which I affectionately refer to as <a href="http://blog.stackoverflow.com/2009/05/the-stack-overflow-trilogy/">"the Trilogy"</a>:
</p>
<p>
</p>
<ul>
<li>
<a href="http://serverfault.com">Server Fault</a>
</li>
<li>
<a href="http://superuser.com">Super User</a>
</li>
<li>
<a href="http://stackoverflow.com">Stack Overflow</a>
</li>
<li>
<a href="http://meta.stackoverflow.com">Meta Stack Overflow</a>
</li>
</ul>
<p>
(In case you were wondering, yes, meta <i>is</i> the <a href="http://en.wikipedia.org/wiki/The_Star_Wars_Holiday_Special">Star Wars Holiday Special</a>.)
</p>
<p>
These sites all run the same core engine, but the logo, domain, and CSS "skin" that lies over the HTML skeleton is different in each case:
</p>
<p>
</p>
<table>
<tr>
<td>
<a href="http://serverfault.com"><img alt="serverfault.com screenshot" title="serverfault screenshot" src="https://blog.codinghorror.com/content/images/uploads/2010/04/6a0120a85dcdae970b01348044a079970c-800wi.png" border="0" style="border:1px solid silver"></a>
</td>
<td>
<a href="http://superuser.com"><img alt="superuser.com screenshot" title="superuser screenshot" src="https://blog.codinghorror.com/content/images/uploads/2010/04/6a0120a85dcdae970b01348044a20a970c-800wi.png" border="0" style="border:1px solid silver"></a>
</td>
</tr>
<tr>
<td>
<a href="http://meta.stackoverflow.com"><img alt="meta.stackoverflow screenshot" title="meta.stackoverflow screenshot" src="https://blog.codinghorror.com/content/images/uploads/2010/04/6a0120a85dcdae970b01348044a6f4970c-800wi.png" border="0" style="border:1px solid silver"></a>
</td>
<td>
<a href="http://stackoverflow.com"><img alt="stackoverflow.com screenshot" title="stackoverflow.com screenshot" src="https://blog.codinghorror.com/content/images/uploads/2010/04/6a0120a85dcdae970b01348044a788970c-800wi.png" border="0" style="border:1px solid silver">
</a>
</td>
</tr>
</table>
<p>
They are not <i>terribly</i> different looking, it's true, but we also want them to be recognizable as a family of sites.
</p>
<p>
We're working with two amazing designers, <a href="http://www.8164.org/">Jin Yang</a> and <a href="http://uxhero.com/">Nathan Bowers</a>, who are helping us whip the CSS and HTML into shape so they can produce a set of about 10 different Zen Garden designs. As new sites in our network <a href="http://blog.stackexchange.com/post/518474918/stack-exchange-2-0">get democracied into being</a>, these designs will be used as a palette for the community to choose from. (And, later, the community will decide on a domain name and logo as well.)
</p>
<p>
Anyway, I bring this up not because <i><a href="http://www.google.com/images?q=my+pokemans+let+me+show+you">my pokemans, let me show you them</a></i>, but because I have to personally maintain four different CSS files. And that number is only going to get larger. <i>Much</i> larger. That scares me a little.
</p>
<p>
Most of all, what I've learned from this exercise in site theming is that <b>CSS is kind of painful</b>. I fully support CSS as a (mostly) functional <a href="http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html">user interface Model-View-Controller</a>. But even if you have extreme HTML hygiene and Austrian levels of discipline, CSS has some <a href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets#Limitations">serious limitations</a> in practice.
</p>
<p>
Things in particular that bite us a lot:
</p>
<p>
</p>
<ul>
<li>Vertical alignment is a giant, hacky PITA. (Tables work great for this though!)
</li>
<li>Lack of variables so we have to repeat colors all over the place.
</li>
<li>Lack of nesting so we have to repeat huge blocks of CSS all over the place.
</li>
</ul>
<p>
In short, CSS violates the living crap out of <a href="http://www.codinghorror.com/blog/2007/03/curlys-law-do-one-thing.html">the DRY principle</a>. You are <i>constantly</i> and <i>unavoidably</i> repeating yourself.
</p>
<p>
That's why I'm so intrigued by two Ruby gems that attempt to directly address the deficiencies of CSS.
</p>
<p>
1. <b><a href="http://lesscss.org/">Less CSS</a></b>
</p>
<p>
</p>
<table width="700">
<tr>
<td valign="top">
<pre>
/* CSS */
#header {
-moz-border-radius: 5;
-webkit-border-radius: 5;
border-radius: 5;
}
#footer {
-moz-border-radius: 10;
-webkit-border-radius: 10;
border-radius: 10;
}
</pre>
</td>
<td valign="top">
<pre>
// LessCSS
.rounded_corners (@radius: 5px) {
-moz-border-radius: @radius;
-webkit-border-radius: @radius;
border-radius: @radius;
}
#header {
.rounded_corners;
}
#footer {
.rounded_corners(10px);
}
</pre>
</td>
</tr>
</table>
<p>
2. <b><a href="http://sass-lang.com/">SASS</a></b>
</p>
<p>
</p>
<table width="700">
<tr>
<td valign="top">
<pre>
/* CSS */
.content_navigation {
border-color: #3bbfce;
color: #2aaebd;
}
.border {
padding: 8px;
margin: 8px;
border-color: #3bbfce;
}
</pre>
</td>
<td valign="top">
<pre>
// Sass
!blue = #3bbfce
!margin = 16px
.content_navigation
border-color = !blue
color = !blue - #111
.border
padding = !margin / 2
margin = !margin / 2
border-color = !blue
</pre>
</td>
</tr>
</table>
<p>
As you can see, in both cases we're <b>transmogrifying CSS into a bit more of a programming language</b>, rather than the static set of layout rules it currently exists as. Behind the scenes, we're generating plain vanilla CSS using these little dynamic languages. This could be done at project build time, or even dynamically on every page load if you have a good caching strategy.
</p>
<p>
I'm not sure how many of these improvements <a href="http://www.w3.org/Style/CSS/current-work">CSS3</a> will bring, never mind when the bulk of browsers in the world will support it. But I definitely feel that the core changes identified in both <a href="http://lesscss.org/">Less CSS</a> and <a href="http://sass-lang.com/">SASS</a> address very real pain points in practical CSS use. It's worth checking them out to understand why they exist, what they bring to the table, and how you could possibly adopt some of these strategies in your own CSS and your favorite programming language.
</p>
<p>
</p>
<p>
<!--kg-card-end: markdown-->
            </p></content>
<pubDate>2010-04-30T06:49:21.000Z</pubDate>
<guid>https://blog.codinghorror.com/whats-wrong-with-css/</guid>
</item>
</channel>
</rss>
