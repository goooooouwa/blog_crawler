<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>That's Not a Bug, It's a Feature Request</title>
<link>https://blog.codinghorror.com/thats-not-a-bug-its-a-feature-request/</link>
<content>
                <!--kg-card-begin: markdown--><p>
For as long as I've been a software developer and used bug tracking systems, we have struggled with the same fundamental problem in every single project we've worked on: <b>how do you tell bugs from feature requests?</b>
</p>
<p>
Sure, there are some obvious crashes that are clearly bugs. But that's maybe 10% of what you deal with on a daily basis, and the real killer showstopper bugs -- the ones that prevent normal usage of the system -- are eradicated quickly, lest the entire project fail. The rest of the entries in your bug tracking system, the vast majority, exist in an uncertain gray no-man's land. Did users report a bug? Not quite. Are users asking for a new or enhanced feature? Not quite. Well, which is it?
</p>
<p>
It's an insoluble problem. Furthermore, I think most bug tracking systems fail us because <i>they make us ask the wrong questions</i>. They force you to pick a side. <a href="http://www.straightdope.com/columns/read/2269/how-did-the-hatfield-mccoy-feud-end-anyway">Hatfields vs. McCoys</a>. Coke vs. Pepsi. Bug vs. Feature Request. It's a painful and arbitrary decision, because most of the time, it's <i>both</i>. <b>There's no difference between a bug and a feature request from the user's perspective.</b> If you want to do something with an application (or website) and you can't do it because that feature isn't implemented -- how is that any different than not being able to do something due to an error message?
</p>
<p>
Consider an example: <a href="http://weblogs.asp.net/KDente/archive/2005/03/13/394499.aspx">Visual Studio doesn't use the correct font when building Windows applications</a>. Is this a bug or a feature request?
</p>
<p>
Personally, <b>I consider this a bug</b>. I guess Microsoft does too, at least in theory, because it's been <a href="http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=115408">in Microsoft's Connect bug tracking system</a> for over four years now. When you build a Windows application, wouldn't you expect it to use the default font of the underlying operating system you're running it on, unless you've explicitly told it otherwise? Well, guess what happens when you create a new form in Visual Studio 2008 and instantiate a label control.
</p>
<p>
<img alt="Windows Forms, Visual Studio 2008 default font" border="0" class="at-xid-6a0120a85dcdae970b0128777082bc970c" height="273" src="https://blog.codinghorror.com/content/images/uploads/2008/11/6a0120a85dcdae970b0128777082bc970c-pi.png" width="379">
</p>
<p>
Party like it's 1996, folks, because you'll get MS Sans Serif, and <i>you'll like it</i>. That is the default for each new form. Never mind that every new application you build will look like -- let me put this as delicately as I can -- <i>ass</i>.
</p>
<p>
Here's a comparison of a label with the default font, versus one that was explicitly set to the default GUI font.
</p>
<p>
<img alt="windows-forms-sans-serif-vs-segoe-ui.png" border="0" class="at-xid-6a0120a85dcdae970b0128777082d1970c" height="136" src="https://blog.codinghorror.com/content/images/uploads/2008/11/6a0120a85dcdae970b0128777082d1970c-pi.png" width="342">
</p>
<p>
Judging by the applications I've used, most Windows developers couldn't care less about design. That's bad. What's even worse is learning that same design carelessness has shipped in the box with every copy of Visual Studio since 2002.
</p>
<p>
Of course, matters of design are so <i>subjective</i>. If only there were some definitive source we could refer to on the matter of proper Windows GUI font usage. Some sort of reference standard, as it were. Like, say, the <a href="http://msdn.microsoft.com/en-us/library/aa511327.aspx">top rules for Windows Vista User Experience</a> from Microsoft:
</p>
<p>
</p>
<ol>
<li><a href="http://msdn.microsoft.com/en-us/library/aa511327.aspx#aero">Use the Aero Theme and System Font (Segoe UI)</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/aa511327.aspx#controls">Use common controls and common dialogs</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/aa511327.aspx#frames">Use the standard window frame, use glass judiciously</a></li>
</ol>
<p>
There are 12 rules in total, but the rule I'm looking for is right at the top -- <b>applications should use the system font</b>.
</p>
<p>
The hilarity of this list is already sort of self evident, given that I've written an entire post <a href="http://www.codinghorror.com/blog/archives/001126.html">bemoaning the general lack of fit and finish in Windows Vista</a>. I couldn't help but laugh at rule number 12: <a href="http://msdn.microsoft.com/en-us/library/aa511327.aspx#fitandfinish">Reserve time for "fit and finish"!</a> Now <i>there's</i> a rule Microsoft should have taken to heart while developing Windows Vista. Understand this is all coming from a guy who <i>likes</i> Vista.
</p>
<p>
But I digress.
</p>
<p>
Despite the windows forms font behavior in Visual Studio 2008 contradicting <i>rule number one</i> of Microsoft's own design guidelines, this "bug" has gone unfixed for over four years. It has been silently reclassified as a "feature request" and effectively ignored. Nothing's broken, after all: using the wrong font hasn't caused any application crashes or lost productivity. On the other hand, imagine how many BigCorpCo apps have been built since then that <b>violate Microsoft's own design rules for their platform</b>. Either because the developers didn't realize that the app font didn't match the operating system, or because they didn't have the time to write the workaround code necessary to make it do the right thing.
</p>
<p>
Yes, this is a small thing. And I'm sure fixing it wouldn't result in selling an additional umpteen thousand Visual Studio licenses to BigCorpCo, which is why it hasn't happened yet.
</p>
<p>
But the question remains: is this a bug, or a feature request?
</p>
<p>
One of my favorite things about <a href="http://uservoice.com/">UserVoice</a> -- which we use for Stack Overflow -- is the way it intentionally blurs the line between bugs and feature requests. Users never understand the difference anyway, and what's worse, developers tend to use that division as a wedge <i>against</i> users. Nudge things you don't want to do into that "feature request" bucket, and proceed to ignore them forever. Argue strongly and loudly enough that something reported as a "bug" clearly isn't, and you may not have to to do any work to fix it. Stop dividing the world into Bugs and Feature Requests, and both of these project pathologies go away.
</p>
<p>
I wish we could, as an industry, spend less time fighting tooth and nail over definitions, painstakingly placing feedback in the "bug" or "feature request" buckets -- and more time <b>doing something constructive with our users' feedback</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2008-11-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/thats-not-a-bug-its-a-feature-request/</guid>
</item>
</channel>
</rss>
