<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Make Mine XCOPY</title>
<link>https://blog.codinghorror.com/make-mine-xcopy/</link>
<content>
                <!--kg-card-begin: markdown--><p>
Steve "what the heck does furrygoat mean" Makofsky crystallized a lot of my thoughts in his recent rant on <a href="http://www.furrygoat.com/2005/03/rant_install_pr.html">software installers</a>. One of the biggest advantages of using the .NET framework is the way it <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndotnet/html/xcopywininst.asp">enables XCopy deployments</a> for the first time*. Installing a program by copying it to a folder was an utter fantasy in the VB6 world. In addition to the VB6 runtime, It took multiple first and/or third party OCX controls to do anything useful in a real app. And each of those OCX controls had their own dependencies.
</p>
<p>
<b>XCopy is the gold standard for correctly architected .NET software projects.</b> We should always be working toward that goal-- making our software deployment as simple as dropping a few files in a folder-- not putting in processes that make it easy for us to backslide into the bad old days. That's the whole point of Microsoft abandoning the registry, COM+, and all the other associated meta-dependencies that made our life hell for so many years. If the design of your .NET project precludes XCopy deployment, take a long, hard look at what you're doing. Don't just treat the symptoms of the disease.
</p>
<p>
Now, there are other reasons you may want an installer anyway. For one thing, <b>I'm not sure users are ready for XCopy deployment.</b> Do we really expect users to be able to unzip an archive to a folder? No, I'm not being sarcastic. There are other ameneties users expect in a software install, such as creating start menu icons, desktop icons, and integration with the add/remove programs section of Control Panel. Honestly, do you really think your program would end up in the Program Files folder if you left it up to the user? I'll tell you where it would go-- <a href="http://neopoleon.com/blog/posts/13304.aspx">on the desktop</a>. Along with every other piece of software and every other document.
</p>
<p>
The installer is a distraction, but a necessary one for users' sanity. If someone can propose another workable alternative, I'm all ears. I think the real lesson here is to <b>keep your project dependencies to a minimum</b>, and to absolutely master the dependencies you must have. Can your app run from <a href="http://loosewire.typepad.com/blog/2005/03/a_directory_of_.html">a USB keychain?</a> I realize that it's not practical for all real world projects, but it should always be one of the goals.
</p>
<p>
* Delphi has also offered this kind of dependency-free "install" for years. Which may be one reason why it's so incredibly popular amongst win32 utility authors.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-03-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/make-mine-xcopy/</guid>
</item>
</channel>
</rss>
