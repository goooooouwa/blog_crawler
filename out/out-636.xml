<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Learning on the Battlefield</title>
<link>https://blog.codinghorror.com/learning-on-the-battlefield/</link>
<content>
                <!--kg-card-begin: markdown--><p>I occasionally get emails from people asking <strong>how to prepare for a career in software development</strong>. Some are students wondering what classes they should take; others have been bitten by the programming bug and are considering their next steps.</p>
<p>I always answer with the same advice. <a href="http://alistair.cockburn.us/index.php/Software_development_as_a_cooperative_game">There's no substitute for learning on the battlefield</a>.</p>
<blockquote>
<p>It appears to me that software development is happening in industry, not in the universities. Universities are great for problems that can be solved by sitting alone and thinking or experimenting for months on end. Universities were great for giving us automata theory, complexity analysis, compilers and the like. But universities are not at all well suited to understanding what is happening during software development.</p>
<p>Software development <em>at the moment</em> is much more like the early manufacture of samurai swords, shields, and battlefield tactics. You make a pile of swords or war tactics, send them onto the battlefield, and see which ones worked better. Then you make different swords and tactics, and so on. <strong>You have to be on the battlefield.</strong></p>
<img src="https://blog.codinghorror.com/content/images/uploads/2007/03/6a0120a85dcdae970b0120a86d87d0970b-pi.jpg" alt="samurai battle, woodblock print" width="597" height="374">
I can't imagine learning the things I've learned while sitting peacefully in my office reflecting. Most of my original reflections and predictions were just wrong. So any one of you who is interested in this topic probably has to work as a developer or consultant, so you can see the moment-to-moment action and get raw data.
</blockquote>
<p>Of course, software development only teaches you how to talk to your computer. Higher education is still worthwhile because it teaches you how to talk to <em>people</em>. With a good educational background, you'll learn how to read effectively, how to write coherently, and how to think critically amongst your peers.</p>
<blockquote>
<p>If I were founding a university I would found first a smoking room; then when I had a little more money in hand I would found a dormitory; then after that, or more probably with it, a decent reading room and a library. After that, if I still had more money that I couldn't use, I would hire a professor and get some textbooks. (<a href="http://www.umuc.edu/resources/edit_styleguide/guide2-47.html">Stephen Leacock</a>)</p>
</blockquote>
<p>For a fast-moving field like computer science, <strong>the work you're doing is far more relevant than any classes you're taking.</strong> If you must choose between formal schooling and work experience, always choose work. If you're in school, aggressively pursue real-world experience that compliments your schoolwork.</p>
<p>Fortunately, this is a battle you can fight on multiple fronts:</p>
<ul>
<li>
<p>If you're a student, <strong>seek out internships like your life depends on it</strong>. Some of the best programmers I've ever met have been college interns. Intern somewhere that you can absorb and learn as much as possible. You won't make much money, but the experience will be priceless.<br>
 </p>
</li>
<li>
<p><strong>Participate in local user groups</strong>. User groups are an unbeatable resource for people just starting out in their careers; they're an excellent source of advice and mentorship.</p>
</li>
<li>
<p><strong>Contribute to an open-source project.</strong> There are thousands, so pick whatever strikes your fancy. But pick one and really dig in, become an active contributor. Absolutely nothing is more practical than working collaboratively with software developers all over the globe, from all walks of life.</p>
</li>
<li>
<p><strong>Publish articles</strong>. The cleverest code in the world won't help you if you can't clearly communicate how that code works, or what it's for. Try your hand at writing. <a href="http://www.codeproject.com">CodeProject</a> is an excellent sandbox to practice in. Publish an article and the large, active CodeProject community will let you know how you're doing with ratings and comments.<br>
 </p>
</li>
<li>
<p><strong>Start a blog</strong>. Pick a writing schedule and stick with it; I recommend once a week at minimum. Select a general theme for your blog and write on topics related (at least tangentially) to that theme. And <a href="http://web.archive.org/web/20070601225441/http://blogs.vertigosoftware.com/jatwood/archive/2006/09/05/3547.aspx">don't be an echo chamber</a>.</p>
</li>
</ul>
<p>You don't have to do all these things, but if you're serious about your career, pick at least two and follow through. For more detailed advice, I highly recommend <a href="http://www.softwarebyrob.com/2007/03/20/advice-on-how-to-become-a-programmer/">Rob's advice on how to become a programmer</a>.</p>
<p>In software development, you learn by doing. As long as you're <strong>out on the battlefield fighting the good fight</strong>, you're bound to improve.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2007-03-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/learning-on-the-battlefield/</guid>
</item>
</channel>
</rss>
