<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>TryParse and the Exception Tax</title>
<link>https://blog.codinghorror.com/tryparse-and-the-exception-tax/</link>
<content>
                <!--kg-card-begin: markdown--><p>In .NET 1.1, TryParse is <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDoubleClassTryParseTopic.asp">only available for the Double datatype</a>. Version 2.0 of the framework <a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=1239">extends TryParse to all the basic datatypes</a>. Why do we care? Performance.  Parse throws an exception if the conversion from a string to the specified datatype fails, whereas TryParse explicitly <em>avoids</em> throwing an exception.</p>
<p>Julia Lerman showed a screenshot of a cool little demo app demonstrating the performance difference between Parse and TryParse in a <a href="http://www.thedatafarm.com/docs/Lerman_BCLWhidbey_June2004.ppt">presentation of hers</a> (ppt) that I stumbled across a few months ago. I was shocked how much faster TryParse was! I knew <a href="http://www.howzatt.demon.co.uk/articles/12May04.html">exceptions were slow</a>, butâ€¦ wow.</p>
<p>The original source for this sample app was a <a href="http://blogs.msdn.com/bclteam/archive/2003/10/22/49710.aspx">BCL team blog entry</a> from way back in October 2003. That code sample is pretty ancient by now, so I thought I'd pick it up and update it so that it at least loads in VS.NET 2005 beta 2. In the process of doing this, I found out that this little sample app has.. er.. some bugs. A lot of bugs, actually. Bugs that made this dramatic performance difference not so dramatic any more:</p>
<p><img src="https://blog.codinghorror.com/content/images/2016/08/tryparse_screenshot.gif" alt=""></p>
<p>So, yeah, parsing with exceptions is quite a bit slower, but not "did someone just downgrade my computer to a 486?" slower. The general rule of <b>avoiding exceptions in your primary code paths</b> still applies. That said, it's not unreasonable to use exceptions for program flow when the situation warrants it, as <a href="http://weblogs.asp.net/alex_papadimoulis/archive/2005/04/01/396734.aspx">Alex Papadimoulis points out</a>:</p>
<blockquote>
I think that there's a general consensus out there that Exceptions should be limited to exceptional circumstances. But "exceptional" is a rather subjective adjective, so there's a bit of a gray area as to what is and isn't an appropriate use of Exceptions.
<p>Let's start with an inappropriate use that we can all agree on. I can think of no better place to find <a href="http://thedailywtf.com/ShowPost.aspx?PostID=22954">such an example</a> than TheDailyWTF.com. Although that particular block of code doesn't exactly deal with throwing exceptions, it is a very bad way of handling exceptions. At the other extreme, exceptions are appropriate for handling environment failure. For example, if your database throws "TABLE NOT FOUND," that would be the time to catch, repackage, and throw an exception.</p>
<p>But it's in the middle where there's a bit of disagreement. One area in particular I'd like to address in this post is exceptions to business rules. I mentioned this as an appropriate before, but noticed there was quite a bit of disagreement with that. But the fact of the matter is, exceptions really are the best way to deal with business rule exceptions.</p>
</blockquote>
<p>Alex concludes that, in this case, using exceptions to propagate errors across the tiers is a better solution. He's <b>willing to pay the exception performance tax</b>:</p>
<blockquote>
<p>Less code, less mess. Nanoseconds slower? Probably. A big deal in the context of a web request going through three physical tiers? Not at all.</p>
</blockquote>
<p>I totally agree. As long as you're aware of the cost, this is a perfectly reasonable thing to do. An iron-clad adherence to the "avoid all exceptions" rule would be a net loss.</p>
<p><a href="https://github.com/coding-horror/TryParse">Download the updated TryParse demo VS.NET 2005 solution</a> (17kb zip)</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2005-08-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/tryparse-and-the-exception-tax/</guid>
</item>
</channel>
</rss>
