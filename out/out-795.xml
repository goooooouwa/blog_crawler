<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The Power of "View Source"</title>
<link>https://blog.codinghorror.com/the-power-of-view-source/</link>
<content>
                <!--kg-card-begin: markdown--><p>
The 1996 JavaWorld article
<a href="http://www.javaworld.com/javaworld/jw-08-1996/jw-08-js-analysis.html">Is JavaScript here to stay?</a> is almost amusing in retrospect. John Lam recently <a href="http://www.iunknown.com/articles/2006/08/14/some-more-photos-from-lang-net">observed </a> that
</p>
<blockquote>
JavaScript is the world's most ubiquitous computing runtime.
</blockquote>
<p>
I think the answer is an emphatic <i>yes</i>.
</p>
<p>
JavaScript is currently undergoing a renaissance through AJAX. Sure, the AJAX-ified clones of <a href="http://www.writely.com">Word</a> and <a href="http://numsum.com/">Excel</a> are still pretty lame, but they're the first baby steps on <b>the long road to rewriting every client application in the world in JavaScript.</b> The line between client executable and web page gets blurrier every day.
</p>
<p>
The meteoric rise in popularity of Ruby has also renewed interest in dynamic languages. And <a href="http://schf.uc.org/articles/2006/08/13/javascript-the-underappreciated-dynamic-language">JavaScript may be the most underappreciated dynamic language of all.</a> Unfortunately, it's difficult to separate JavaScript from all its browser environment baggage and consider it <a href="http://www.crockford.com/javascript/survey.html">purely as a language</a>.
</p>
<p>
But these are both relatively recent developments. They're important milestones, but they're not the full story of JavaScript's success. Not by a long shot. I attribute most of JavaScript's enormous success to one long-standing menu item on every browser:
</p>
<p>
<img alt="The View Source browser menu" border="0" class="at-xid-6a0120a85dcdae970b0128776fec51970c" height="273" src="https://blog.codinghorror.com/content/images/uploads/2006/08/6a0120a85dcdae970b0128776fec51970c-pi.png" width="189">
</p>
<p>
<b>The view source menu is the ultimate form of open source.</b> It's impossible to obfuscate or hide JavaScript running in a browser. The code that powers any AJAX application is right there in plain sight, for everyone to see, copy, and use. A complete set of JavaScript source code for the latest AJAX apps is never more than one HTTP download away. They're literally <i>giving away</i> the source code for their application to <i>every user</i>.
</p>
<p>
Some people might see that as a huge business risk. I say if your business model is that dependent on clever, obfuscated source code tricks, it isn't much of a business model.
</p>
<p>
I've read several <a href="http://www.codinghorror.com/blog/archives/000291.html">complaints that .NET code is too easy to decompile</a>. Nonsense. It should be even <i>easier</i> to decompile. The real stroke of genius in JavaScript wasn't closures, or XmlHttpRequest; it was <b>forcing people to share their source code with the community.</b> How do you think anyone found out about XmlHttpRequest in the first place? Through reading the documentation?
</p>
<p>
The entire JavaScript development community is predicated on instant, ubiquitous access to source code. This leads to what I call <b>"Code Darwinism"</b>: good techniques are seen immediately and reproduce promiscuously. Bad techniques never reproduce and die out.
</p>
<p>
<img alt="Darwin Evolution - Skeletons" border="0" class="at-xid-6a0120a85dcdae970b0128776fec79970c" height="289" src="https://blog.codinghorror.com/content/images/uploads/2006/08/6a0120a85dcdae970b0128776fec79970c-pi.png" width="549">
</p>
<p>
That's why I'm not afraid to bust out a copy of <a href="http://www.aisto.com/roeder/dotnet/">Reflector</a> and perform a little ad-hoc "View Source". It's common practice to decompile binary .NET assemblies, for a whole host of entirely valid reasons:
</p>
<ul>
<li>You've encountered a possible bug in the code
</li>
<li>You don't understand the code's behavior
</li>
<li>You need to do something similar in your own code
</li>
</ul>
<p>
Having the source code gives you the ability to fix your own problems-- or even someone else's problems. If you can see the source code, the binary is alive-- it can <i>evolve</i>.
</p>
<p>
And you can still license your software and make money, even if you're handing out the source code at the same time. <a href="http://www.devx.com/opinion/Article/20513">According to DesaWare</a>, one of the most compelling software sales pitches is the phrase "source code included":
</p>
<p>
</p>
<blockquote>
Providing source code is the only answer -- it's a way to say to the customer that if worst comes to worst, they can be their own alternate source. Even Microsoft has demonstrated this by providing Windows Source to certain customers, like large governments, who have the leverage to demand it. And, yes, escrow services should be sufficient for this purpose, but for some reason most customers don't like that approach. Perhaps it's lack of confidence in the long-term viability of the escrow services themselves? Or perhaps lack of faith in their own institutional memory to recall that such escrow arrangements had been made.
<p>
There are some nice side benefits of having source code available: the ability to learn from someone else's code, and the possibility of customizing components to suit specific needs, but those are smaller issues. Security is always a concern, but it is only applicable to software that has the potential to elevate the privilege of a user -- something that applies to a relatively small number of software components.
</p>
<p>
So what about the great closed source vs. open source debate? I'm never one to shy away from controversy, but that's for another time and place. What we did by releasing our software was not open source by any stretch of the imagination. Our source code is licensed to individual developers for their own use -- not for distribution. Does a true open source model make sense for the component world? I don't know. What I do know is that source code availability provides a level of peace of mind for some developers that probably cannot be matched any other way.
</p>
</blockquote>
<p>
We should do away with the pretense of hiding code. Let's not only acknowledge that decompiling .NET code is trivial, <b>let's <i>embrace</i> the power of "view source" by shipping source code along with our binaries.</b>
</p>
<p>
<!--kg-card-end: markdown-->
            </p></content>
<pubDate>2006-08-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-power-of-view-source/</guid>
</item>
</channel>
</rss>
