<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Does Writing Code Matter?</title>
<link>https://blog.codinghorror.com/does-writing-code-matter/</link>
<content>
                <!--kg-card-begin: markdown--><p>Ian Landsman's <a href="https://web.archive.org/web/20070306071950/http://www.userscape.com/blog/index.php/site/comments/10_tips_for_moving_from_programmer_to_entrepreneur/">10 tips for moving from programmer to entrepreneur</a> is excellent advice. Even if you have no intention of becoming an entrepreneur.</p>
<blockquote>
<p>One of the biggest issues I see is developers getting caught up in the code. Spending countless hours making a function perfect or building features which show off the latest technology. Now you have to write code to be in the software business. It has to be high quality code that isn't filled with bugs or is insecure. However, <b>the best code in the world is meaningless if nobody knows about your product</b>. Code is meaningless if the IRS comes and throws you in jail because you didn't do your taxes. Code is meaningless if you get sued because you didn't bother having a software license created by a lawyer.</p>
</blockquote>
<p><a href="https://blog.codinghorror.com/can-your-team-pass-the-elevator-test/">Software developers love code</a>. But we're biased. And we write less of it than we think we do. <a href="https://blog.codinghorror.com/when-understanding-means-rewriting/">We spend far more time understanding code than writing it</a>.</p>
<p>Anyway, as Ian points out, <b>the importance of the code we do write is absolutely dwarfed by everything else that goes on around it.</b> Raise your hand if you've ever poured your heart and soul into an application that never shipped. I know I have. And that's just the tip of the iceberg; there are hundreds of reasons the code you write may have zero impact on the world. If nobody knows about your code, if nobody can understand your code, if for whatever reason <em>your code doesn't even ship</em> … then <b>have you really accomplished anything by writing that code?</b></p>
<p>Maybe the best way to succeed as a programmer is to cut out the low value activities entirely and <a href="http://steve-yegge.blogspot.com/2006/07/get-famous-by-not-programming.html">stop writing code altogether</a>. Steve Yegge explains:</p>
<blockquote>
<p>Do you have any programming heroes? I do! Oddly enough, though, I've never really seen much of their code. <b>Most of the famous-ish programmers I respect have actually made their impact on me through writing, and it's usually just prose, with maybe a little code interspersed.</b></p>
<p>There are programmers I admire who've built things that I use a lot. But when I try to come up with a list of programmers I admire (and I specifically mean people I don't know personally), I find they almost always fall into one (or both) of just two categories:</p>
<ul>
<li>People who wrote a useful programming language, an operating system, or an especially important framework.</li>
<li>People who wrote a really neat book about programming.</li>
</ul>
<p>When someone builds a framework  –  any environment that we live in and actually enjoy programming in  –  and there's one person who's chiefly identifiable as the primary author of that framework, then I think we tend to admire that person, and unlike other programmers, the person starts to become famous.</p>
<p>Even if they're a crappy programmer.</p>
<p>Not that we'd really know, because how often do we go look at the source code for the frameworks we use? How much time have you spent examining the source code of your favorite programming language's compiler, interpreter or VM? And by the time such systems reach sufficient size and usefulness, how much of that code was actually penned by the original author?</p>
</blockquote>
<p>Am I really telling developers to stop writing code? No, not really. Developers are already good at writing code. It's why they became software developers in the first place. Writing reams of code just digs you deeper into an already deeply specialized skill. What I <em>am</em> proposing is that we spend less time coding and more time developing skills in other areas that <em>complement</em> our coding skills. <a href="https://blog.codinghorror.com/is-writing-more-important-than-programming/">Become a better writer</a>. <a href="https://discourse.codinghorror.com/t/presentation-zen/895">Become a better speaker</a>. <a href="https://blog.codinghorror.com/being-technologically-savvy-isnt-enough/">Improve your personal skills</a>. <a href="https://blog.codinghorror.com/buy-the-community-not-the-product/">Participate in the community</a>. <b>Try to spend some time talking to people instead of the compiler.</b> That's how you distinguish yourself from your peers. And that's ultimately how you become a better software developer, too.</p>
<p>Of course, this isn't a zero-sum game. You can have it both ways. <b>Ideally, you'd write code, and then write or talk about the code in a way that inspires and illuminates other people.</b> But we don't have an infinite amount of time, either. If you have to choose between writing code and writing <em>about</em> code, remember which side of the equation is more important – and balance accordingly.</p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2006-10-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/does-writing-code-matter/</guid>
</item>
</channel>
</rss>
