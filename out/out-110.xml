<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>The End of Pagination</title>
<link>https://blog.codinghorror.com/the-end-of-pagination/</link>
<content>
                <!--kg-card-begin: markdown--><p>
What do you do when you have a lot of things to display to the user, far more than can possibly fit on the screen? <a href="http://ui-patterns.com/patterns/Pagination">Paginate, naturally</a>.
</p>
<p>
<img alt="Pagination-examples" title="Pagination-examples" src="https://blog.codinghorror.com/content/images/uploads/2012/03/6a0120a85dcdae970b0167644e1bbe970b-800wi.png" width="455" height="246">
</p>
<p>
There are plenty of <a href="http://www.smashingmagazine.com/2007/11/16/pagination-gallery-examples-and-good-practices/">other real world examples</a> in this 2007 article, but I wouldn't bother. If you've seen one pagination scheme, you've seen them all. The state of art in pagination hasn't exactly changed much – or at all, really – in the last 5 years.
</p>
<p>
I can understand paginating when you have 10, 50, 100, maybe even a few hundred items. But once you have <i>thousands</i> of items to paginate, <b>who the heck is visiting page 964 of 3810?</b> What's the point of paginating so much information when there's a hard practical limit on how many items a human being can view and process in any reasonable amount of time?
</p>
<p>
Once you have thousands of items, you don't have a pagination problem. You have a search and filtering problem. Why are we presenting hundreds or thousands of items to the user? What does that achieve? <b>In a perfect world, every search would result in a page with a single item: <i>exactly</i> the thing you were looking for.</b>
</p>
<p>
<img alt="U2-google" title="U2-google" src="https://blog.codinghorror.com/content/images/uploads/2012/03/6a0120a85dcdae970b0167644e5f1f970b-800wi.png" width="525" height="256">
</p>
<p>
But perhaps you <i>don't</i> know exactly what you're looking for: maybe you want a variety of viewpoints and resources, or to compare a number of similar items. Fair enough. I have a difficult time imagining any scenario where presenting a hundred or so items wouldn't meet that goal. Even so, the items would naturally be presented in some logical <i>order</i> so the most suitable items are near the top.
</p>
<p>
Once we've chosen a suitable order and a subset of relevant items … <b>do we really need pagination at all?</b> What if we did some kind of endless pagination scheme, where we loaded more items into the view dynamically as the user reaches the bottom? Like so:
</p>
<p>
<iframe width="640" height="360" src="https://www.youtube.com/embed/bwzBCm2oSuw"></iframe>
</p>
<p>
It isn't just oddball <a href="http://en.wikipedia.org/wiki/Disemvoweling">disemvowelled</a> companies, either. <a href="https://twitter.com/codinghorror">Twitter's timeline</a> and <a href="https://www.google.com/search?q=alice+in+wonderland+illustrations+public+domain&amp;hl=en&amp;prmd=imvns&amp;source=lnms&amp;tbm=isch&amp;ei=mDpyT8KnOeHg2AWVwOjJDg&amp;sa=X&amp;oi=mode_link&amp;ct=mode&amp;cd=2&amp;ved=0CBcQ_AUoAQ&amp;biw=811&amp;bih=1037">Google's image search</a> use a similar <b>endless pagination</b> approach. Either the page loads more items automatically when you scroll down to the bottom, or there's an explicit "show more results" button.
</p>
<p>
<b>Pagination is also <i>friction</i></b>. Ever been on a forum where you wished like hell the other people responding to the thread had read all four pages of it before typing their response? Well, maybe some of them would have if the next page buttons weren't so impossibly small, or better yet, <i>not there at all</i> because pagination was automatic and seamless. We should be <a href="https://blog.codinghorror.com/training-your-users/">actively removing friction where we want users to do <i>more</i> of something</a>.
</p>
<p>
I'm not necessarily proposing that all traditional pagination be replaced with endless pagination. But we, as software developers, should <b>avoid mindlessly generating a list of thousands upon thousands of possible items and paginating it as a lazy one-size-fits-all solution</b>. This puts all the burden on the user to make sense of the items. Remember, we invented computers to make the user's life easier, not more difficult.
</p>
<p>
Once you've done that, there's a balance to be struck, <a href="http://googlewebmastercentral.blogspot.com/2011/09/view-all-in-search-results.html">as Google's research</a> tells us:
</p>
<blockquote>
<p>User testing has taught us that searchers much prefer the view-all, single-page version of content over a component page containing only a portion of the same information with arbitrary page breaks.</p>
<p>Interestingly, the cases when users didn’t prefer the view-all page were correlated with high latency (e.g., when the view-all page took a while to load, say, because it contained many images). This makes sense because we know users are less satisfied with slow results. So while a view-all page is commonly desired, as a webmaster it’s important to balance this preference with the page’s load time and overall user experience.</p>
</blockquote>
<p>
Traditional pagination is not particularly user friendly, but endless pagination isn't without its own faults and pitfalls, either:
</p>
<ul>
<li>The scroll bar, the user's moral compass of "how much more is there?" doesn't work in endless pagination because it is effectively infinite. You'll need an alternate method of providing that crucial feedback, perhaps as a simple percent loaded text docked at the bottom of the page.
</li>
<li>Endless pagination should not break deep linking. Even without the concept of a "page", users should be able to clearly and obviously link to any specific item in the list.
</li>
<li>Clicking the browser forward or back button should preserve the user's position in the endless scrolling stream, perhaps using <a href="http://diveintohtml5.info/history.html"><code>pushState</code></a>.
</li>
<li>Pagination may be a bad user experience, but it's <i>essential</i> for web spiders. Don't neglect to accommodate web search engines with a traditional paging scheme, too, or perhaps <a href="http://webmasters.stackexchange.com/questions/4803/the-sitemap-paradox">a Sitemap</a>.
</li>
<li>Provide visible feedback when you're dynamically loading new items in the list, so the user can tell that new items are coming, and their browser isn't hung – and that they haven't reached the bottom yet.
</li>
<li>Remember that the user won't be able to reach the footer (or the header) any more, because items keep appearing as they scroll down in the river of endless content. So either move to static headers and footers, or perhaps use the explicit "load more" button instead of loading new content automatically.
</li>
</ul>
<p>
For further reading, there's some excellent <a href="http://ux.stackexchange.com/questions/tagged/pagination">Q&amp;A on the topic of pagination</a> at ux.stackexchange.
</p>
<p>
<b>Above all else, you should strive to make pagination irrelevant because the user never has to look at more than a few items to find what they need</b>. That's why I suspect Google hasn't done much with this technique in their core search result pages; if they aren't providing great results on page 1, it doesn't really <i>matter</i> what kind of pagination they use because they're not going to be in business much longer. Take that lesson to heart: you should be worried most of all about presenting a <i>relevant</i> list of items to the user in a sensible order. Once you've got that licked, then and only then should you think about your pagination scheme.
</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] What's your next career move? <a href="http://careers.stackoverflow.com/" rel="nofollow">Stack Overflow Careers</a> has the best job listings from great companies, whether you're looking for opportunities at a startup or Fortune 500. You can search our <a href="http://careers.stackoverflow.com/jobs" rel="nofollow">job listings</a> or <a href="http://careers.stackoverflow.com/cv" rel="nofollow">create a profile</a> and let employers find you.
</td></tr>
</table>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2012-03-27T14:58:28.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-end-of-pagination/</guid>
</item>
</channel>
</rss>
