<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title>Creating More Exceptional Exceptions</title>
<link>https://blog.codinghorror.com/creating-more-exceptional-exceptions/</link>
<content>
                <!--kg-card-begin: markdown--><p>
I find myself throwing plain old <b>System.Exception</b> far too often.  If only I had a complete reference of the many default Exception classes Microsoft provides, like the one <a href="http://www.dotnetjohn.com/articles/articleid42.aspx">Chris Sully</a> provides in his article. That's good as a starting point, but I don't see things like <b>System.Data.DataException</b> in there. Does anyone know of a more comprehensive list of *Exception classes for all the common .NET namespaces?
</p>
<p>
While searching for this, I also found <a href="http://weblogs.asp.net/erobillard/archive/2004/05/10/129134.aspx">some interesting commentary</a> on <b>System.ApplicationException</b>. I always wondered what the heck that was for, and a linked Microsoft page confirms my suspicions:
</p>
<blockquote><i>
Designing exception hierarchies is tricky. Well-designed exception hierarchies are wide, not very deep, and contain only those exceptions for which there is a programmatic scenario for catching. We added ApplicationException thinking it would add value by grouping exceptions declared outside of the .NET Framework, but there is no scenario for catching ApplicationException and it only adds unnecessary depth to the hierarchy. You should not define new exception classes derived from ApplicationException; use Exception instead. In addition, you should not write code that catches ApplicationException.
</i></blockquote>
<p>
Well, so much for that.
</p>
<p>
There's also some discussion about the <a href="http://blogs.gotdotnet.com/BradA/PermaLink.aspx/c9c61dbf-62a9-474f-a5fe-c171cdedb4f6">merits of error codes vs. exceptions</a>. Opinions vary, but the determining factor seems to be performance. The first entry in MSDN's <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndotnet/html/dotnetperftips.asp">Performance Tips and Tricks in .NET Applications</a> talks about exceptions:
</p>
<blockquote>
<i>
Throwing exceptions can be very expensive, so make sure that you don't throw a lot of them. Use Perfmon to see how many exceptions your application is throwing. It may surprise you to find that certain areas of your application throw more exceptions than you expected. For better granularity, you can also check the exception number programmatically by using Performance Counters.
</i><p>
Finding and designing away exception-heavy code can result in a decent perf win. <b>Bear in mind that this has nothing to do with try/catch blocks: you only incur the cost when the actual exception is thrown. You can use as many try/catch blocks as you want.</b> Using exceptions gratuitously is where you lose performance. For example, you should stay away from things like using exceptions for control flow.
</p>
</blockquote>
At some point in the development of your project, I suggest you turn on "Break on all exceptions" using the VS.NET Exceptions menu. This will expose any loops where you are catching thrown exceptions. That's how I found out we are using a a third party tree control which throws an exception on every row paint!
<p>
That's a big deal, because <b>throwing an exception is literally slower than making a database call</b>. This really surprised me, because a DB query is <i>incredibly</i> slow. But <a href="http://www.howzatt.demon.co.uk/articles/12May04.html">it's true</a>:
</p>
<p>
</p>
<blockquote><i>
Yes, that's right - the decimal point is in the right place for function #2! <b>The code path through the exception throwing route took almost 3 orders of magnitude longer than the raw code.</b> This is why, for this article, I'm just not interested in minor optimisations of the source code since the impact of exceptions dwarfs them.
</i></blockquote>
<p>
This sounds really bad, but in practice, it shouldn't matter. If you are using exceptions properly, they should rarely be occurring and therefore any performance cost is moot. <a href="http://blogs.gotdotnet.com/cbrumme/permalink.aspx/d5fbb311-0c95-46ac-9c46-8f8c0e6ae561">Eric Gunnerson puts it best</a>:
</p>
<p>
</p>
<blockquote><i>
So, if you are not a programming God like those OS developers, you should consider using exceptions for your application errors.  They are more powerful, more expressive, and less prone to abuse than error codes.  They are one of the fundamental ways that we make managed programming more productive and less error prone.  In fact, the CLR internally uses exceptions even in the unmanaged portions of the engine.  However, there is a serious long term performance problem with exceptions and this must be factored into your decision.
</i></blockquote>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
            </content>
<pubDate>2004-10-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/creating-more-exceptional-exceptions/</guid>
</item>
</channel>
</rss>
